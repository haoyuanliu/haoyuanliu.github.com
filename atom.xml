<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>贫贫贫贫僧</title>
  <subtitle>面向工资编程</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://haoyuanliu.github.io/"/>
  <updated>2017-07-01T08:19:25.162Z</updated>
  <id>http://haoyuanliu.github.io/</id>
  
  <author>
    <name>刘浩远</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>gcc/g++编译过程</title>
    <link href="http://haoyuanliu.github.io/2017/06/11/gcc-g-%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B/"/>
    <id>http://haoyuanliu.github.io/2017/06/11/gcc-g-编译过程/</id>
    <published>2017-06-11T10:08:44.000Z</published>
    <updated>2017-07-01T08:19:25.162Z</updated>
    
    <content type="html"><![CDATA[<p>gcc/g++编译过程一共包括四个步骤，分别是预处理、编译、汇编和链接，以如下<code>test.cpp</code>源代码为例，详细介绍各个步骤的作用。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello, World!"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h2 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h2><p>就是将所有的<code>#include</code>的文件和宏定义替换成其真正的内容，预处理之后得到的仍然是文本代码，但是文件的体积会大很多。<code>gcc</code>的预处理是使用预处理器<code>cpp</code>完成的。<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">g</span>++ -<span class="keyword">E</span> <span class="keyword">test</span>.cpp -o <span class="keyword">test</span>.<span class="built_in">i</span></div></pre></td></tr></table></figure></p>
<p>或者使用<code>cpp</code>预处理命令<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cpp <span class="keyword">test</span>.cpp -o <span class="keyword">test</span>.<span class="built_in">i</span></div></pre></td></tr></table></figure></p>
<p>其中，上述命令中的<code>-E</code>是编译器在完成预处理后就结束，不再继续进行编译过程；<code>-o</code>指定输出文件名</p>
<h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>编译是指将预处理之后的程序转换成特定的汇编代码的过程，是将程序从源文件转换成二进制可执行文件的第一部分操作。<br>编译命令如下：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">g</span>++ -S <span class="keyword">test</span>.i -o <span class="keyword">test</span>.<span class="built_in">s</span></div></pre></td></tr></table></figure></p>
<p>其中<code>-S</code>表示编译器在编译完成之后就停止，不进行后续过程。</p>
<h2 id="汇编"><a href="#汇编" class="headerlink" title="汇编"></a>汇编</h2><p>汇编将编译得到的汇编代码转换成机器码，生成二进制目标文件，<code>gcc</code>使用<code>as</code>命令完成汇编过程。<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">as</span> <span class="keyword">test</span>.s -o <span class="keyword">test</span>.o</div></pre></td></tr></table></figure></p>
<p>等价于<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">g</span>++ <span class="selector-tag">-c</span> <span class="selector-tag">test</span><span class="selector-class">.s</span> <span class="selector-tag">-o</span> <span class="selector-tag">test</span><span class="selector-class">.o</span></div></pre></td></tr></table></figure></p>
<p>这一步会为每一个<code>.cpp</code>源文件生成一个<code>.o</code>文件。</p>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>链接过程将多个目标文件以及所需要的库文件(.so等)链接成最终的可执行文件，命令如下：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">g</span>++ <span class="keyword">test</span>.o -o <span class="keyword">test</span></div><div class="line">./<span class="keyword">test</span></div></pre></td></tr></table></figure></p>
<p>总结来说，C语言编译一共需要四个步骤：预处理-&gt;编译-&gt;汇编-&gt;链接四个步骤！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;gcc/g++编译过程一共包括四个步骤，分别是预处理、编译、汇编和链接，以如下&lt;code&gt;test.cpp&lt;/code&gt;源代码为例，详细介绍各个步骤的作用。&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;Hello, World!&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://haoyuanliu.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://haoyuanliu.github.io/tags/Linux/"/>
    
      <category term="GCC/G++" scheme="http://haoyuanliu.github.io/tags/GCC-G/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode Greedy</title>
    <link href="http://haoyuanliu.github.io/2017/02/28/LeetCode-Greedy/"/>
    <id>http://haoyuanliu.github.io/2017/02/28/LeetCode-Greedy/</id>
    <published>2017-02-28T09:36:40.000Z</published>
    <updated>2017-07-01T08:19:25.161Z</updated>
    
    <content type="html"><![CDATA[<p>本篇文章的主要内容是LeetCode有关贪心算法的习题练习，主要包含如下题目：</p>
<p><a href="https://leetcode.com/problems/wildcard-matching/?tab=Description" target="_blank" rel="external">44. Wildcard Matching</a><br><a href="https://leetcode.com/problems/jump-game-ii/?tab=Description" target="_blank" rel="external">45. Jump Game II</a><br><a href="https://leetcode.com/problems/jump-game/?tab=Description" target="_blank" rel="external">55. Jump Game</a><br><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/?tab=Description" target="_blank" rel="external">122. Best Time to Buy and Sell Stock II</a><br><a href="https://leetcode.com/problems/gas-station/?tab=Description" target="_blank" rel="external">134. Gas Station</a><br><a href="https://leetcode.com/problems/candy/?tab=Description" target="_blank" rel="external">135. Candy</a><br><a href="https://leetcode.com/problems/remove-duplicate-letters/?tab=Description" target="_blank" rel="external">316. Remove Duplicate Letters</a><br><a href="https://leetcode.com/problems/create-maximum-number/?tab=Description" target="_blank" rel="external">321. Create Maximum Number</a><br><a href="https://leetcode.com/problems/patching-array/?tab=Description" target="_blank" rel="external">330. Patching Array</a><br><a href="https://leetcode.com/problems/wiggle-subsequence/?tab=Description" target="_blank" rel="external">376. Wiggle Subsequence</a><br><a href="https://leetcode.com/problems/is-subsequence/?tab=Description" target="_blank" rel="external">392. Is Subsequence</a><br><a href="https://leetcode.com/problems/remove-k-digits/?tab=Description" target="_blank" rel="external">402. Remove K Digits</a><br><a href="https://leetcode.com/problems/queue-reconstruction-by-height/?tab=Description" target="_blank" rel="external">406. Queue Reconstruction by Height</a><br><a href="https://leetcode.com/problems/non-overlapping-intervals/?tab=Description" target="_blank" rel="external">435. Non-overlapping Intervals</a><br><a href="https://leetcode.com/problems/minimum-number-of-arrows-to-burst-balloons/?tab=Description" target="_blank" rel="external">452. Minimum Number of Arrows to Burst Balloons</a><br><a href="https://leetcode.com/problems/assign-cookies/?tab=Description" target="_blank" rel="external">455. Assign Cookies</a><br><a href="https://leetcode.com/problems/ipo/?tab=Description" target="_blank" rel="external">502. IPO</a></p>
<a id="more"></a>
<h2 id="44-Wildcard-Matching"><a href="#44-Wildcard-Matching" class="headerlink" title="44. Wildcard Matching"></a>44. Wildcard Matching</h2><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>使用动态规划的思路，dp[i][j]表示字符串s的前i个字符与字符串p的前j个字符是否匹配，然后：<br>如果<code>p[j] == &#39;*&#39;</code>，则<code>dp[i][j+1] = dp[i][j] || dp[i-1][j]</code> (‘<em>‘匹配与不匹配)；<br>如果`p[j] != ‘</em>‘<code>, 则只有</code>p[j] == s[i] || p[j] == ‘?’<code>的时候，</code>dp[i][j+1] = dp[i-1][j]`;</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        <span class="function"><span class="keyword">bool</span> <span class="title">isMatch</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">string</span> p)</span></span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> m = s.size();</div><div class="line">            <span class="keyword">int</span> n = p.size();</div><div class="line">            <span class="keyword">int</span> cnt = count(p.begin(), p.end(), <span class="string">'*'</span>);</div><div class="line">            <span class="keyword">if</span>(n - cnt &gt; m)</div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; dp(n+<span class="number">1</span>, <span class="literal">false</span>);</div><div class="line">            dp[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</div><div class="line">                <span class="keyword">if</span>(p[i] == <span class="string">'*'</span>)</div><div class="line">                    dp[i+<span class="number">1</span>] = dp[i];</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</div><div class="line">            &#123;</div><div class="line">                <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; cur(n+<span class="number">1</span>, <span class="literal">false</span>);</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">if</span>(p[j<span class="number">-1</span>] == <span class="string">'*'</span>)</div><div class="line">                        cur[j] = cur[j<span class="number">-1</span>] || dp[j];</div><div class="line">                    <span class="keyword">else</span></div><div class="line">                    &#123;</div><div class="line">                        <span class="keyword">if</span>(p[j<span class="number">-1</span>] == s[i<span class="number">-1</span>] || p[j<span class="number">-1</span>] == <span class="string">'?'</span>)</div><div class="line">                            cur[j] = dp[j<span class="number">-1</span>];</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                dp = cur;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> dp[n];</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="45-Jump-Game-II"><a href="#45-Jump-Game-II" class="headerlink" title="45. Jump Game II"></a>45. Jump Game II</h2><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p>维持一个curJump变量，保存目前为止所能跳转到的最大下标，lastJump表示最近一次最大跳转到达的元素下标，遍历整个数组并更新curJump和lastJump变量，如果lastJump已经到达或者超过数组范围，返回跳转计数。</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        <span class="keyword">int</span> jump(vector&lt;<span class="keyword">int</span>&gt; &amp;nums)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> len = nums.size();</div><div class="line">            <span class="keyword">int</span> curJump = <span class="number">0</span>;</div><div class="line">            <span class="keyword">int</span> lastJump = <span class="number">0</span>;</div><div class="line">            <span class="keyword">int</span> <span class="keyword">count</span> = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(lastJump &lt; i)</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">count</span>++;</div><div class="line">                    lastJump = curJump;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>(lastJump &gt;= len<span class="number">-1</span>)</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">count</span>;</div><div class="line">                <span class="keyword">if</span>(curJump &gt;= i)</div><div class="line">                    curJump = max(curJump, i + nums[i]);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">count</span>;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="55-Jump-Game"><a href="#55-Jump-Game" class="headerlink" title="55. Jump Game"></a>55. Jump Game</h2><h3 id="解题思路I"><a href="#解题思路I" class="headerlink" title="解题思路I"></a>解题思路I</h3><p>直接使用贪心的算法解决，每遍历一个节点，更新最大Jump的距离maxJump，如果maxJump为0则无法跳到最后节点。</p>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">canJump</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> len = nums.size();</div><div class="line">        <span class="keyword">int</span> maxJump = nums[<span class="number">0</span>];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; ++i)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(maxJump == <span class="number">0</span>)</div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">            maxJump = max(--maxJump, nums[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="解题思路II"><a href="#解题思路II" class="headerlink" title="解题思路II"></a>解题思路II</h3><p>对思路I的算法进行优化，维持一个cover变量，记录能够跳到的最大数组下标，每遍历一个节点，更新<code>cover = max(cover, i + nums[i])</code>，一旦<code>cover &gt;= len - 1</code>则肯定能够跳到最后一个节点，直接返回true；</p>
<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        <span class="function"><span class="keyword">bool</span> <span class="title">canJump</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums)</span></span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> len = nums.size();</div><div class="line">            <span class="keyword">int</span> cover = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(cover &gt;= len - <span class="number">1</span>)</div><div class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">                <span class="keyword">if</span>(cover &gt;= i)</div><div class="line">                    cover = max(cover, i + nums[i]);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="122-Best-Time-to-Buy-and-Sell-Stock-II"><a href="#122-Best-Time-to-Buy-and-Sell-Stock-II" class="headerlink" title="122. Best Time to Buy and Sell Stock II"></a>122. Best Time to Buy and Sell Stock II</h2><h3 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><p>股票的买入和抛售，原则就是最低价买入，然后最高价抛售，价格上升的区间就是获取利润的区间，直接遍历整个数组，将上升趋势的价格差额累加起来就得到最终的最大利润。</p>
<h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span></div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; prices)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; prices.size(); ++i)</div><div class="line">        &#123;</div><div class="line">            res += max(prices[i] - prices[i<span class="number">-1</span>], <span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="134-Gas-Station"><a href="#134-Gas-Station" class="headerlink" title="134. Gas Station"></a>134. Gas Station</h2><h3 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h3><ol>
<li>如果从A点无法到达B点，那么在A、B两点之间任意一点都无法到达B点，也就是说，如果判断得到从A点无法到达B点，那么A、B两点之间的任何一点都不能作为起始点，因为都到达不了B点。（证明：因为B点无法到达，所以B点的cost &gt; gas; 假设A、B中间一点C，因为从A到B点无法到达，所以总体的cost &gt; gas, A点是可以到达Ｃ点的，所以AC段cost &lt; gas，那么CB段必定cost &gt; gas，所以C点无法到达B点）</li>
<li>对于全部路程，总体gas大于总体cost才有解，否则无解；</li>
</ol>
<h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span></div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">canCompleteCircuit</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; gas, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; cost)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> total = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> tank = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> start = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; gas.size(); ++i)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>((tank = tank + gas[i] - cost[i]) &lt; <span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">                start = i+<span class="number">1</span>;</div><div class="line">                total += tank;</div><div class="line">                tank = <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> (total + tank &gt;= <span class="number">0</span>) ? start : <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="135-Candy"><a href="#135-Candy" class="headerlink" title="135. Candy"></a>135. Candy</h2><h3 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h3><p>确保每个小孩至少一颗糖，初始化每个人一颗，同时观察发现，只有当存在等级差别的时候才需要增加糖的数量，向后向前遍历两遍数组，计算需要增加的糖果数量，最后加和给出结果。</p>
<h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">candy</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; ratings)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> len = ratings.size();</div><div class="line">        <span class="keyword">if</span>(len &lt; <span class="number">2</span>) <span class="keyword">return</span> len;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; candies(len, <span class="number">1</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; ++i)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(ratings[i] &gt; ratings[i<span class="number">-1</span>])</div><div class="line">                candies[i] = candies[i<span class="number">-1</span>] + <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = len<span class="number">-2</span>; i &gt;= <span class="number">0</span>; --i)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(ratings[i] &gt; ratings[i+<span class="number">1</span>])</div><div class="line">                candies[i] = max(candies[i+<span class="number">1</span>]+<span class="number">1</span>, candies[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</div><div class="line">            res += candies[i];</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="316-Remove-Duplicate-Letters"><a href="#316-Remove-Duplicate-Letters" class="headerlink" title="316. Remove Duplicate Letters"></a>316. Remove Duplicate Letters</h2><h3 id="解题思路-5"><a href="#解题思路-5" class="headerlink" title="解题思路"></a>解题思路</h3><p>使用栈结构的性质，对于每一个字符，如果已经在栈中了，就跳过；<br>如果没有在栈中，如果该字符小于栈顶的字符，并且栈顶字符在后面字符串中还有（计数值大于0），则将栈顶元素出栈，然后继续循环判断新的栈顶元素是否需要出栈，循环判断结束后最后将新字符入栈。</p>
<h3 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="built_in">string</span> <span class="title">removeDuplicateLetters</span><span class="params">(<span class="built_in">string</span> s)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">string</span> res = <span class="string">"0"</span>;</div><div class="line">        <span class="keyword">int</span> len = s.size();</div><div class="line">        <span class="keyword">int</span> m[<span class="number">256</span>] = &#123;<span class="number">0</span>&#125;;</div><div class="line">        <span class="keyword">int</span> visited[<span class="number">256</span>] = &#123;<span class="number">0</span>&#125;;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</div><div class="line">            m[s[i]]++;</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> c : s)</div><div class="line">        &#123;</div><div class="line">            m[c]--;</div><div class="line">            <span class="keyword">if</span>(visited[c]) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">while</span>(c &lt; res.back() &amp;&amp; m[res.back()])</div><div class="line">            &#123;</div><div class="line">                visited[res.back()] = <span class="number">0</span>;</div><div class="line">                res.pop_back();</div><div class="line">            &#125;</div><div class="line">            res += c;</div><div class="line">            visited[c] = <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res.substr(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="321-Create-Maximum-Number"><a href="#321-Create-Maximum-Number" class="headerlink" title="321. Create Maximum Number"></a>321. Create Maximum Number</h2><h3 id="解题思路-6"><a href="#解题思路-6" class="headerlink" title="解题思路"></a>解题思路</h3><p>核心算法是遍历<code>k1</code>，<code>nums1</code>取<code>k1</code>个数字，<code>nums2</code>取<code>k-k1</code>个数字，都获得其最大值然后进行合并，最后比较大小返回最大的那一个。<br>这道题学习了<code>StefanPochmann</code>大神的代码，真的厉害，各种c++的技巧用得太巧妙了。<code>StefanPochmann</code>大神对于函数重载以及引用等技巧的使用太赞了！</p>
<h3 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; maxNumber(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums2, <span class="keyword">int</span> k)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> n1 = nums1.size();</div><div class="line">        <span class="keyword">int</span> n2 = nums2.size();</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = max(<span class="number">0</span>, k - n2); i &lt;= min(k, n1); ++i)</div><div class="line">        &#123;</div><div class="line">            res = max(res, maxNumber(maxNumber(nums1, i), maxNumber(nums2, k-i)));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; maxNumber(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nums, <span class="keyword">int</span> k)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> drop = nums.size() - k;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> n : nums)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">while</span>(drop &amp;&amp; !res.empty() &amp;&amp; n &gt; res.back())</div><div class="line">            &#123;</div><div class="line">                res.pop_back();</div><div class="line">                drop--;</div><div class="line">            &#125;</div><div class="line">            res.push_back(n);</div><div class="line">        &#125;</div><div class="line">        res.resize(k);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; maxNumber(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nums1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nums2)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</div><div class="line">        <span class="keyword">while</span>(nums1.size() + nums2.size())</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;temp = nums1 &gt; nums2 ? nums1 : nums2;</div><div class="line">            res.push_back(temp[<span class="number">0</span>]);</div><div class="line">            temp.erase(temp.begin());</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="330-Patching-Array"><a href="#330-Patching-Array" class="headerlink" title="330. Patching Array"></a>330. Patching Array</h2><h3 id="解题思路-7"><a href="#解题思路-7" class="headerlink" title="解题思路"></a>解题思路</h3><p>miss表示[1,n]中我们无法得到的最小值，也就意味着我们可以得到小于miss的所有数字，取值区间为[1, miss)。如果nums数组中有元素<code>num &lt; miss</code>，之前我们可以得到范围[1, miss)的数值，现在统一加上num就可以得到[1, miss+num)范围的数值；如果数组中没有小于miss的值，则此时我们需要加入一个新的值来达到要求，这里最好的选择是miss，同时结果计数进行累加计算；<br><code>StefanPochmann</code>大神详细题解可以参考这个&lt;<a href="https://discuss.leetcode.com/topic/35494/solution-explanation" target="_blank" rel="external">链接</a>&gt;！</p>
<h3 id="代码-9"><a href="#代码-9" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minPatches</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> n)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> len = nums.size();</div><div class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> cur = <span class="number">0</span>;</div><div class="line">        <span class="keyword">long</span> miss = <span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span>(miss &lt;= n)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(cur &lt; len &amp;&amp; nums[cur] &lt;= miss)</div><div class="line">            &#123;</div><div class="line">                miss += nums[cur++];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                miss &lt;&lt;= <span class="number">1</span>;</div><div class="line">                res++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="376-Wiggle-Subsequence"><a href="#376-Wiggle-Subsequence" class="headerlink" title="376. Wiggle Subsequence"></a>376. Wiggle Subsequence</h2><h3 id="解题思路-8"><a href="#解题思路-8" class="headerlink" title="解题思路"></a>解题思路</h3><p>使用贪心算法解决，遍历整个数组，使用pos表示已遍历数组中符合要求的连续数列长度，且最后的difference是正值，neg就表示最后difference是复制的连续数列长度。如此以来，如果<code>nums[i] &gt; nums[i-1]</code>，则difference是正值，此时<code>pos = neg + 1</code>，反之<code>neg = pos + 1</code>；</p>
<h3 id="代码-10"><a href="#代码-10" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">wiggleMaxLength</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> len = nums.size();</div><div class="line">        <span class="keyword">int</span> pos = <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> neg = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; ++i)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(nums[i] &gt; nums[i<span class="number">-1</span>])</div><div class="line">                pos = neg + <span class="number">1</span>;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[i] &lt; nums[i<span class="number">-1</span>])</div><div class="line">                neg = pos + <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> min(len, max(neg, pos));</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="392-Is-Subsequence"><a href="#392-Is-Subsequence" class="headerlink" title="392. Is Subsequence"></a>392. Is Subsequence</h2><h3 id="解题思路-9"><a href="#解题思路-9" class="headerlink" title="解题思路"></a>解题思路</h3><p>这道题按照顺序去比较每一个字符是否相同即可；</p>
<h3 id="代码-11"><a href="#代码-11" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isSubsequence</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">string</span> t)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> len = s.size();</div><div class="line">        <span class="keyword">if</span>(len == <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> x : t)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(x == s[i])</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(++i == len)</div><div class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="402-Remove-K-Digits"><a href="#402-Remove-K-Digits" class="headerlink" title="402. Remove K Digits"></a>402. Remove K Digits</h2><h3 id="解题思路-10"><a href="#解题思路-10" class="headerlink" title="解题思路"></a>解题思路</h3><p>利用string的栈结构特性，保证位于高位的数字达到最小即可，最后进行字符串的整理和特例处理。</p>
<h3 id="代码-12"><a href="#代码-12" class="headerlink" title="代码"></a>代码</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">class Solution</div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">string</span> removeKdigits(<span class="keyword">string</span> num, <span class="keyword">int</span> k)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> len = num.<span class="built_in">size</span>();</div><div class="line">        <span class="keyword">string</span> res = <span class="string">""</span>;</div><div class="line">        <span class="keyword">int</span> drop = k;</div><div class="line">        <span class="built_in">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">while</span>(drop &amp;&amp; res.<span class="built_in">size</span>() &amp;&amp; num[i] &lt; res.back())</div><div class="line">            &#123;</div><div class="line">                res.pop_back();</div><div class="line">                drop--;</div><div class="line">            &#125;</div><div class="line">            res += num[i];</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">while</span>(drop &amp;&amp; res.<span class="built_in">size</span>())</div><div class="line">        &#123;</div><div class="line">            res.pop_back();</div><div class="line">            drop--;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">while</span>(res[<span class="number">0</span>] == <span class="string">'0'</span>)</div><div class="line">            res.erase(res.<span class="built_in">begin</span>());</div><div class="line">        <span class="built_in">return</span> res.empty() ? <span class="string">"0"</span> : res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="406-Queue-Reconstruction-by-Height"><a href="#406-Queue-Reconstruction-by-Height" class="headerlink" title="406. Queue Reconstruction by Height"></a>406. Queue Reconstruction by Height</h2><h3 id="解题思路I-1"><a href="#解题思路I-1" class="headerlink" title="解题思路I"></a>解题思路I</h3><p>将people数组元素进行排序，然后按照身高从矮到高的顺序置入结果队列中，通过遍历结果队列更新计数值来决定应该置入的位置。</p>
<h3 id="代码-13"><a href="#代码-13" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; reconstructQueue(<span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;&amp; people)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> len = people.size();</div><div class="line">        <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; res(len, &#123;<span class="number">-1</span>, <span class="number">-1</span>&#125;);</div><div class="line">        sort(people.begin(), people.end());</div><div class="line">        <span class="keyword">int</span> count, i;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> p : people)</div><div class="line">        &#123;</div><div class="line">            count = <span class="number">0</span>;</div><div class="line">            i = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; len; ++i)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(res[i].first == <span class="number">-1</span> || res[i].first &gt;= p.first)</div><div class="line">                    count++;</div><div class="line">                <span class="keyword">if</span>(count &gt; p.second)</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            res[i].first = p.first;</div><div class="line">            res[i].second = p.second;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="解题思路II-1"><a href="#解题思路II-1" class="headerlink" title="解题思路II"></a>解题思路II</h3><p>首先还是对people数组排序，身高高的排在前面，身高一样的，前面人少的排在前面。<br>简单来说就是按照身高从高到低进行排序，然后高个子先置入结果数组中。这样每一个people数组元素置入的时候，由于比他高的全都已经在结果数组中了，所以此时他的位置也就直接确定了，使用insert执行置入操作即可；</p>
<h3 id="代码-14"><a href="#代码-14" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; reconstructQueue(<span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;&amp; people)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">auto</span> comp = [](<span class="keyword">const</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &amp;a, <span class="keyword">const</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &amp;b)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> a.first &gt; b.first || (a.first == b.first &amp;&amp; a.second &lt; b.second);</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; res;</div><div class="line">        sort(people.begin(), people.end(), comp);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> p : people)</div><div class="line">            res.insert(res.begin()+p.second, p);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="435-Non-overlapping-Intervals"><a href="#435-Non-overlapping-Intervals" class="headerlink" title="435. Non-overlapping Intervals"></a>435. Non-overlapping Intervals</h2><h3 id="解题思路-11"><a href="#解题思路-11" class="headerlink" title="解题思路"></a>解题思路</h3><p>首先对数组进行排序，按照start从小到大进行排序，如果start相同，按照包含区间从小到大进行排序。<br>遍历整个数组，如果当前interval的start小于前一个interval的end，即<code>cur.start &lt; pre.end</code>，则此时必定发生overlapping，结果计数加一，如果<code>cur.end &lt; pre.end</code>时，cur包含在pre中，此时应该舍弃pre并更新cur为新的pre。<br>反之，如果一开始就<code>cur.start &gt;= pre.end</code>的话，区间没有overlapping，更新cur为新的pre，继续遍历即可。</p>
<h3 id="代码-15"><a href="#代码-15" class="headerlink" title="代码"></a>代码</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">class Solution</div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">int</span> eraseOverlapIntervals(vector&lt;Interval&gt;&amp; intervals)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> len = intervals.<span class="built_in">size</span>();</div><div class="line">        <span class="built_in">if</span>(len &lt; <span class="number">2</span>) <span class="built_in">return</span> res;</div><div class="line">        <span class="keyword">auto</span> cmp = [](<span class="keyword">const</span> Interval &amp;a, <span class="keyword">const</span> Interval &amp;b)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">return</span> a.start &lt; b.start || (a.start == b.start &amp;&amp; a.<span class="built_in">end</span> - a.start &lt; b.<span class="built_in">end</span> - b.start);</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        sort(intervals.<span class="built_in">begin</span>(), intervals.<span class="built_in">end</span>(), cmp);</div><div class="line">        <span class="keyword">int</span> pre = <span class="number">0</span>;</div><div class="line">        <span class="built_in">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; ++i)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">if</span>(intervals[i].start &lt; intervals[pre].<span class="built_in">end</span>)</div><div class="line">            &#123;</div><div class="line">                res++;</div><div class="line">                <span class="built_in">if</span>(intervals[i].<span class="built_in">end</span> &lt; intervals[pre].<span class="built_in">end</span>)</div><div class="line">                    pre = i;</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">else</span></div><div class="line">                pre = i;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="452-Minimum-Number-of-Arrows-to-Burst-Balloons"><a href="#452-Minimum-Number-of-Arrows-to-Burst-Balloons" class="headerlink" title="452. Minimum Number of Arrows to Burst Balloons"></a>452. Minimum Number of Arrows to Burst Balloons</h2><h3 id="解题思路-12"><a href="#解题思路-12" class="headerlink" title="解题思路"></a>解题思路</h3><p>首先对points数组进行排序，维持left和right代表公共区间的左右边界，遍历整个数组，如果气球范围出了公共区间，则此时应该射一箭，反之，则应该继续更新公共区间，如此遍历全部气球数组。<br>注意这里公共区间边界如果left==right也是可以的；遍历过程中最后一箭是没有射出去的，所以res初始化为1。</p>
<h3 id="代码-16"><a href="#代码-16" class="headerlink" title="代码"></a>代码</h3><figure class="highlight glsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">class Solution</div><div class="line">&#123;</div><div class="line">public:</div><div class="line">    <span class="type">int</span> findMinArrowShots(vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;&amp; <span class="keyword">points</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">points</span>.size() == <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        auto cmp = [](<span class="keyword">const</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; &amp;a, <span class="keyword">const</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; &amp;b)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> a.first &lt; b.first;</div><div class="line">        &#125;;</div><div class="line">        sort(<span class="keyword">points</span>.begin(), <span class="keyword">points</span>.end(), cmp);</div><div class="line"></div><div class="line">        <span class="type">int</span> res = <span class="number">1</span>;</div><div class="line">        <span class="type">int</span> left = <span class="keyword">points</span>[<span class="number">0</span>].first;</div><div class="line">        <span class="type">int</span> right = <span class="keyword">points</span>[<span class="number">0</span>].second;</div><div class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="keyword">points</span>.size(); ++i)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(<span class="keyword">points</span>[i].first &gt; right)</div><div class="line">            &#123;</div><div class="line">                res++;</div><div class="line">                left = <span class="keyword">points</span>[i].first;</div><div class="line">                right = <span class="keyword">points</span>[i].second;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                left = <span class="built_in">max</span>(left, <span class="keyword">points</span>[i].first);</div><div class="line">                right = <span class="built_in">min</span>(right, <span class="keyword">points</span>[i].second);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="455-Assign-Cookies"><a href="#455-Assign-Cookies" class="headerlink" title="455. Assign Cookies"></a>455. Assign Cookies</h2><h3 id="解题思路-13"><a href="#解题思路-13" class="headerlink" title="解题思路"></a>解题思路</h3><p>对两个数组进行排序，首先用最大的饼干来满足要求最高的孩子，如果无法满足，则换下一个要求小一点的孩子，如果能够满足，则执行<code>--</code>操作继续进行匹配遍历。</p>
<h3 id="代码-17"><a href="#代码-17" class="headerlink" title="代码"></a>代码</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">class Solution</div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">int</span> findContentChildren(vector&lt;<span class="keyword">int</span>&gt;&amp; g, vector&lt;<span class="keyword">int</span>&gt;&amp; s)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line">        sort(g.<span class="built_in">begin</span>(), g.<span class="built_in">end</span>());</div><div class="line">        sort(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());</div><div class="line"></div><div class="line">        <span class="keyword">int</span> x = g.<span class="built_in">size</span>() - <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> y = s.<span class="built_in">size</span>() - <span class="number">1</span>;</div><div class="line">        <span class="built_in">while</span>(x &gt;= <span class="number">0</span> &amp;&amp; y &gt;= <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">if</span>(g[x] &gt; s[y]) x--;</div><div class="line">            <span class="built_in">else</span> <span class="built_in">if</span>(g[x--] &lt;= s[y--]) res++;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="502-IPO"><a href="#502-IPO" class="headerlink" title="502. IPO"></a>502. IPO</h2><h3 id="解题思路-14"><a href="#解题思路-14" class="headerlink" title="解题思路"></a>解题思路</h3><p>使用一个大顶堆结构保存现阶段可以进行的项目，使用vector保存那些不能进行的项目，每次都只执行堆顶的利益最大的项目，执行完毕之后，将已执行的项目pop删除，遍历vector更新可执行的项目，置入到堆中并从vector中删除。</p>
<h3 id="代码-18"><a href="#代码-18" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findMaximizedCapital</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> W, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; Profits, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; Capital)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> res = W;</div><div class="line">        priority_queue&lt;<span class="keyword">int</span>&gt; doable;</div><div class="line">        <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; notdoable;</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Profits.size(); ++i)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(Profits[i])</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(Capital[i] &lt;= W)</div><div class="line">                    doable.push(Profits[i]);</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    notdoable.push_back(make_pair(Profits[i], Capital[i]));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span>(k-- &amp;&amp; doable.size())</div><div class="line">        &#123;</div><div class="line">            res += doable.top();</div><div class="line">            doable.pop();</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> it = notdoable.begin(); it != notdoable.end(); )</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(it-&gt;second &lt;= res)</div><div class="line">                &#123;</div><div class="line">                    doable.push(it-&gt;first);</div><div class="line">                    it = notdoable.erase(it);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    it++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇文章的主要内容是LeetCode有关贪心算法的习题练习，主要包含如下题目：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/wildcard-matching/?tab=Description&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;44. Wildcard Matching&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/jump-game-ii/?tab=Description&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;45. Jump Game II&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/jump-game/?tab=Description&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;55. Jump Game&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/?tab=Description&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;122. Best Time to Buy and Sell Stock II&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/gas-station/?tab=Description&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;134. Gas Station&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/candy/?tab=Description&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;135. Candy&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/remove-duplicate-letters/?tab=Description&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;316. Remove Duplicate Letters&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/create-maximum-number/?tab=Description&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;321. Create Maximum Number&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/patching-array/?tab=Description&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;330. Patching Array&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/wiggle-subsequence/?tab=Description&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;376. Wiggle Subsequence&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/is-subsequence/?tab=Description&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;392. Is Subsequence&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/remove-k-digits/?tab=Description&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;402. Remove K Digits&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/queue-reconstruction-by-height/?tab=Description&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;406. Queue Reconstruction by Height&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/non-overlapping-intervals/?tab=Description&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;435. Non-overlapping Intervals&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/minimum-number-of-arrows-to-burst-balloons/?tab=Description&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;452. Minimum Number of Arrows to Burst Balloons&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/assign-cookies/?tab=Description&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;455. Assign Cookies&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/ipo/?tab=Description&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;502. IPO&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://haoyuanliu.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://haoyuanliu.github.io/tags/LeetCode/"/>
    
      <category term="Greedy" scheme="http://haoyuanliu.github.io/tags/Greedy/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode Trapping Rain Water</title>
    <link href="http://haoyuanliu.github.io/2017/02/24/LeetCode-Trapping-Rain-Water/"/>
    <id>http://haoyuanliu.github.io/2017/02/24/LeetCode-Trapping-Rain-Water/</id>
    <published>2017-02-24T08:47:46.000Z</published>
    <updated>2017-07-01T08:19:25.161Z</updated>
    
    <content type="html"><![CDATA[<p>本文包含如下两个题目：<br><a href="https://leetcode.com/problems/trapping-rain-water/" target="_blank" rel="external">42. Trapping Rain Water</a><br><a href="https://leetcode.com/problems/trapping-rain-water-ii/" target="_blank" rel="external">407. Trapping Rain Water II</a></p>
<a id="more"></a>
<h2 id="42-Trapping-Rain-Water"><a href="#42-Trapping-Rain-Water" class="headerlink" title="42. Trapping Rain Water"></a>42. Trapping Rain Water</h2><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>从两头开始向中间搜索，维持一个secondHeight的变量，记录已遍历的节点中第二高的点。遍历到的节点高度小于secondHeight的话，可以装水，如果大于secondHeight的话，则此时需要更新secondHeight。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">class Solution</div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        <span class="keyword">int</span> trap(vector&lt;<span class="keyword">int</span>&gt; &amp;<span class="built_in">height</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line">            <span class="keyword">int</span> len = <span class="built_in">height</span>.<span class="built_in">size</span>();</div><div class="line">            <span class="keyword">int</span> l = <span class="number">0</span>;</div><div class="line">            <span class="keyword">int</span> r = len<span class="number">-1</span>;</div><div class="line">            <span class="keyword">int</span> secondHeight = <span class="number">0</span>;</div><div class="line">            <span class="built_in">while</span>(l &lt; r)</div><div class="line">            &#123;</div><div class="line">                <span class="built_in">if</span>(<span class="built_in">height</span>[l] &lt; <span class="built_in">height</span>[r])</div><div class="line">                &#123;</div><div class="line">                    <span class="built_in">if</span>(secondHeight &lt; <span class="built_in">height</span>[l])</div><div class="line">                        secondHeight = <span class="built_in">height</span>[l];</div><div class="line">                    <span class="built_in">else</span></div><div class="line">                        res += secondHeight - <span class="built_in">height</span>[l];</div><div class="line">                    l++;</div><div class="line">                &#125;</div><div class="line">                <span class="built_in">else</span></div><div class="line">                &#123;</div><div class="line">                    <span class="built_in">if</span>(secondHeight &lt; <span class="built_in">height</span>[r])</div><div class="line">                        secondHeight = <span class="built_in">height</span>[r];</div><div class="line">                    <span class="built_in">else</span></div><div class="line">                        res += secondHeight - <span class="built_in">height</span>[r];</div><div class="line">                    r--;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">return</span> res;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="407-Trapping-Rain-Water-II"><a href="#407-Trapping-Rain-Water-II" class="headerlink" title="407. Trapping Rain Water II"></a>407. Trapping Rain Water II</h2><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p>首先将边缘的高度全部统计，使用堆排序进行排序，建立最初的水池边框。然后取边框中高度最低的作为参照，取其上下左右四个相邻块的高度，如果高度小于参照高度，则可以储水，如果大于等于参照高度，则无法储水，就应该划归到边框中，置入堆中进行排序，然后循环如上操作。</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">trapRainWater</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; heightMap)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span>(heightMap.size() &lt;= <span class="number">2</span>)</div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">        priority_queue&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;, <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;, greater&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;&gt; que;</div><div class="line">        <span class="keyword">int</span> row = heightMap.size();</div><div class="line">        <span class="keyword">int</span> col = heightMap[<span class="number">0</span>].size();</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; visited(row, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(col, <span class="number">0</span>));</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; ++i)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; col; ++j)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(!(i==<span class="number">0</span> || i==row<span class="number">-1</span> || j==<span class="number">0</span> || j==col<span class="number">-1</span>))</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                que.push(make_pair(heightMap[i][j], i*col+j));</div><div class="line">                visited[i][j] = <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; dir = &#123;&#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">-1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;&#125;;</div><div class="line">        <span class="keyword">int</span> minHeight = <span class="number">1</span>&lt;&lt;<span class="number">31</span>;</div><div class="line"></div><div class="line">        <span class="keyword">while</span>(!que.empty())</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> height = que.top().first;</div><div class="line">            <span class="keyword">int</span> x = que.top().second / col;</div><div class="line">            <span class="keyword">int</span> y = que.top().second % col;</div><div class="line">            que.pop();</div><div class="line">            minHeight = max(minHeight, height);</div><div class="line"></div><div class="line">            <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> d : dir)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">int</span> x2 = x + d[<span class="number">0</span>];</div><div class="line">                <span class="keyword">int</span> y2 = y + d[<span class="number">1</span>];</div><div class="line">                <span class="keyword">if</span>(x2 &lt; <span class="number">0</span> || x2 &gt;= row || y2 &lt; <span class="number">0</span> || y2 &gt;= col || visited[x2][y2])</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                <span class="keyword">if</span>(heightMap[x2][y2] &lt; minHeight)</div><div class="line">                    res += minHeight - heightMap[x2][y2];</div><div class="line">                que.push(make_pair(heightMap[x2][y2], x2 * col + y2));</div><div class="line">                visited[x2][y2] =  <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文包含如下两个题目：&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/trapping-rain-water/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;42. Trapping Rain Water&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/trapping-rain-water-ii/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;407. Trapping Rain Water II&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://haoyuanliu.github.io/categories/LeetCode/"/>
    
    
      <category term="Algorithm" scheme="http://haoyuanliu.github.io/tags/Algorithm/"/>
    
      <category term="LeetCode" scheme="http://haoyuanliu.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode Heap</title>
    <link href="http://haoyuanliu.github.io/2017/02/08/LeetCode-Heap/"/>
    <id>http://haoyuanliu.github.io/2017/02/08/LeetCode-Heap/</id>
    <published>2017-02-08T14:02:01.000Z</published>
    <updated>2017-07-01T08:19:25.160Z</updated>
    
    <content type="html"><![CDATA[<p>本文包含如下题目：</p>
<p><a href="https://leetcode.com/problems/ugly-number-ii/" target="_blank" rel="external">264. Ugly Number II</a><br><a href="https://leetcode.com/problems/find-median-from-data-stream/" target="_blank" rel="external">295. Find Median from Data Stream</a><br><a href="https://leetcode.com/problems/super-ugly-number/" target="_blank" rel="external">313. Super Ugly Number</a><br><a href="https://leetcode.com/problems/top-k-frequent-elements/" target="_blank" rel="external">347. Top K Frequent Elements</a><br><a href="https://leetcode.com/problems/design-twitter/" target="_blank" rel="external">355. Design Twitter</a><br><a href="https://leetcode.com/problems/find-k-pairs-with-smallest-sums/" target="_blank" rel="external">373. Find K Pairs with Smallest Sums</a><br><a href="https://leetcode.com/problems/kth-smallest-element-in-a-sorted-matrix/" target="_blank" rel="external">378. Kth Smallest Element in a Sorted Matrix</a><br><a href="https://leetcode.com/problems/sort-characters-by-frequency/" target="_blank" rel="external">451. Sort Characters By Frequency</a></p>
<a id="more"></a>
<h2 id="264-Ugly-Number-II"><a href="#264-Ugly-Number-II" class="headerlink" title="264. Ugly Number II"></a>264. Ugly Number II</h2><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>使用动态规划的思想，已知<code>res[0] = 1</code>，此时可以得到<code>res[1] = min(res[0]*2, res[0]*3, res[0]*5)</code>，然后可以求得<code>res[2] = min(res[1]*2, res[0]*3, res[0]*5</code>。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">class Solution</div><div class="line">&#123;</div><div class="line"><span class="symbol">public:</span></div><div class="line">    int nthUglyNumber(int n)</div><div class="line">    &#123;</div><div class="line">		if(n &lt; <span class="number">0</span>) return <span class="number">0</span><span class="comment">;</span></div><div class="line">		vector&lt;int&gt; res(n, <span class="number">1</span>)<span class="comment">;</span></div><div class="line">		int <span class="built_in">t2</span> = <span class="number">0</span>, <span class="built_in">t3</span> = <span class="number">0</span>, <span class="built_in">t5</span> = <span class="number">0</span><span class="comment">;</span></div><div class="line">		for(int i = <span class="number">1</span><span class="comment">; i &lt; n; ++i)</span></div><div class="line">		&#123;</div><div class="line">			res[i] = min(res[<span class="built_in">t2</span>]*<span class="number">2</span>, min(res[<span class="built_in">t3</span>]*<span class="number">3</span>, res[<span class="built_in">t5</span>]*<span class="number">5</span>))<span class="comment">;</span></div><div class="line">			if(res[i] == res[<span class="built_in">t2</span>]*<span class="number">2</span>) <span class="built_in">t2</span>++<span class="comment">;</span></div><div class="line">			if(res[i] == res[<span class="built_in">t3</span>]*<span class="number">3</span>) <span class="built_in">t3</span>++<span class="comment">;</span></div><div class="line">			if(res[i] == res[<span class="built_in">t5</span>]*<span class="number">5</span>) <span class="built_in">t5</span>++<span class="comment">;</span></div><div class="line">		&#125;</div><div class="line">		return res[n-1]<span class="comment">;</span></div><div class="line">    &#125;</div><div class="line">&#125;<span class="comment">;</span></div></pre></td></tr></table></figure>
<h2 id="295-Find-Median-from-Data-Stream"><a href="#295-Find-Median-from-Data-Stream" class="headerlink" title="295. Find Median from Data Stream"></a>295. Find Median from Data Stream</h2><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p>利用STL库函数中的<code>priority_queue</code>，维持一个大顶堆和一个小顶堆（利用负数实现），然后动态更新保持两个堆的元素数量的平衡，最后返回中位数。</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight verilog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> MedianFinder</div><div class="line">&#123;</div><div class="line">    priority_queue&lt;<span class="keyword">int</span>&gt; <span class="keyword">small</span>, <span class="keyword">large</span>;</div><div class="line">public:</div><div class="line">    <span class="keyword">void</span> addNum(<span class="keyword">int</span> num)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(!<span class="keyword">large</span><span class="variable">.empty</span>() &amp;&amp; -<span class="keyword">large</span><span class="variable">.top</span>() &lt; num)</div><div class="line">            <span class="keyword">large</span><span class="variable">.push</span>(-num);</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="keyword">small</span><span class="variable">.push</span>(num);</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">small</span><span class="variable">.size</span>() - <span class="keyword">large</span><span class="variable">.size</span>() == <span class="number">2</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">large</span><span class="variable">.push</span>(-<span class="keyword">small</span><span class="variable">.top</span>());</div><div class="line">            <span class="keyword">small</span><span class="variable">.pop</span>();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">large</span><span class="variable">.size</span>() -  <span class="keyword">small</span><span class="variable">.size</span>() == <span class="number">2</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">small</span><span class="variable">.push</span>(-<span class="keyword">large</span><span class="variable">.top</span>());</div><div class="line">            <span class="keyword">large</span><span class="variable">.pop</span>();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    double findMedian()</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">small</span><span class="variable">.size</span>() &gt; <span class="keyword">large</span><span class="variable">.size</span>()) <span class="keyword">return</span> <span class="keyword">small</span><span class="variable">.top</span>();</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">small</span><span class="variable">.size</span>() &lt; <span class="keyword">large</span><span class="variable">.size</span>()) <span class="keyword">return</span> -<span class="keyword">large</span><span class="variable">.top</span>();</div><div class="line">        <span class="keyword">else</span> <span class="keyword">return</span> (<span class="keyword">small</span><span class="variable">.top</span>() - <span class="keyword">large</span><span class="variable">.top</span>()) / <span class="number">2</span><span class="variable">.0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="313-Super-Ugly-Number"><a href="#313-Super-Ugly-Number" class="headerlink" title="313. Super Ugly Number"></a>313. Super Ugly Number</h2><h3 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><p>使用动态规划的思路，使用一个<code>res</code>(vector)保存顺序排列的丑数，然后使用一个<code>idx</code>(vector)保存每个primes中元素所对应的乘法因子，然后每次取乘法结果的最小的值作为新的丑数，同时遍历<code>idx</code>进行去重操作。</p>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">nthSuperUglyNumber</span><span class="params">(<span class="keyword">int</span> n, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; primes)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res(n, <span class="number">1</span>);</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; idx(primes.size(), <span class="number">0</span>);</div><div class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">return</span> res[<span class="number">0</span>];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i)</div><div class="line">        &#123;</div><div class="line">            res[i] = <span class="number">0x7fffffff</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; primes.size(); ++j)</div><div class="line">            &#123;</div><div class="line">                res[i] = min(res[i], primes[j] * res[idx[j]]);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; primes.size(); ++j)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">while</span>(res[idx[j]] * primes[j] &lt;= res[i])</div><div class="line">                    idx[j]++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res[n<span class="number">-1</span>];</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="347-Top-K-Frequent-Elements"><a href="#347-Top-K-Frequent-Elements" class="headerlink" title="347. Top K Frequent Elements"></a>347. Top K Frequent Elements</h2><h3 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h3><p>使用<code>unordered_map</code>对输入的数字进行频率统计，然后使用<code>priority_queue</code>堆结构对之前得到的频率进行统计，最后将要求结果保存返回即可。</p>
<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; topKFrequent(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</div><div class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; m;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); ++i)</div><div class="line">        &#123;</div><div class="line">            m[nums[i]]++;</div><div class="line">        &#125;</div><div class="line">        priority_queue&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; que;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> it = m.begin(); it != m.end(); ++it)</div><div class="line">        &#123;</div><div class="line">            que.push(make_pair(it-&gt;second, it-&gt;first));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; ++i)</div><div class="line">        &#123;</div><div class="line">            res.push_back(que.top().second);</div><div class="line">            que.pop();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="355-Design-Twitter"><a href="#355-Design-Twitter" class="headerlink" title="355. Design Twitter"></a>355. Design Twitter</h2><h3 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h3><p>建立一个<code>tweet</code>结构，保存<code>tweet</code>的<code>userId</code>,<code>tweetId</code>和<code>tweetTime(发布时间)</code>使用<code>hashMap</code>建立<code>user</code>和<code>tweet</code>之间的联系，使用<code>hashMap</code>和<code>set</code>结构处理<code>user</code>之间的follow关系，收集<code>tweet</code>完成之后，使用<code>priority_queue</code>进行堆排序，获取最近的10个<code>tweet</code>。</p>
<h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Twitter</span></span></div><div class="line">&#123;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tweet</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> userId;</div><div class="line">        <span class="keyword">int</span> tweetId;</div><div class="line">        <span class="keyword">int</span> tweetTime;</div><div class="line">        tweet(<span class="keyword">int</span> userId_, <span class="keyword">int</span> tweetId_) : userId(userId_), tweetId(tweetId_) &#123;&#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> userId;</div><div class="line">    <span class="keyword">int</span> time = <span class="number">0</span>;</div><div class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="built_in">vector</span>&lt;tweet&gt;&gt; userToTweet;</div><div class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="built_in">unordered_set</span>&lt;<span class="keyword">int</span>&gt;&gt; userToFollowee;</div><div class="line"></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">/** Initialize your data structure here. */</span></div><div class="line">    Twitter()</div><div class="line">    &#123;</div><div class="line">        userId = <span class="number">0</span>;</div><div class="line">        time++;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/** Compose a new tweet. */</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">postTweet</span><span class="params">(<span class="keyword">int</span> userId, <span class="keyword">int</span> tweetId)</span></span></div><div class="line">    &#123;</div><div class="line">        tweet temp = tweet(userId, tweetId);</div><div class="line">        temp.tweetTime = time++;</div><div class="line">        userToTweet[userId].push_back(temp);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/** Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent. */</span></div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; getNewsFeed(<span class="keyword">int</span> userId)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</div><div class="line">        priority_queue&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; que;</div><div class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> <span class="keyword">const</span> tweet : userToTweet[userId])</div><div class="line">        &#123;</div><div class="line">            que.push(make_pair(tweet.tweetTime, tweet.tweetId));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> <span class="keyword">const</span> followee : userToFollowee[userId])</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> <span class="keyword">const</span> tweet : userToTweet[followee])</div><div class="line">            &#123;</div><div class="line">                que.push(make_pair(tweet.tweetTime, tweet.tweetId));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span>(!que.empty())</div><div class="line">        &#123;</div><div class="line">            res.push_back(que.top().second);</div><div class="line">            que.pop();</div><div class="line">            <span class="keyword">if</span>(++count &gt;= <span class="number">10</span>)</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/** Follower follows a followee. If the operation is invalid, it should be a no-op. */</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">follow</span><span class="params">(<span class="keyword">int</span> followerId, <span class="keyword">int</span> followeeId)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(followerId != followeeId)</div><div class="line">            userToFollowee[followerId].insert(followeeId);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/** Follower unfollows a followee. If the operation is invalid, it should be a no-op. */</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unfollow</span><span class="params">(<span class="keyword">int</span> followerId, <span class="keyword">int</span> followeeId)</span></span></div><div class="line">    &#123;</div><div class="line">        userToFollowee[followerId].erase(followeeId);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="373-Find-K-Pairs-with-Smallest-Sums"><a href="#373-Find-K-Pairs-with-Smallest-Sums" class="headerlink" title="373. Find K Pairs with Smallest Sums"></a>373. Find K Pairs with Smallest Sums</h2><h3 id="解题思路-5"><a href="#解题思路-5" class="headerlink" title="解题思路"></a>解题思路</h3><p>遍历所有的可能情况，然后将其组合置入一个堆结构中，最后按照要求弹出返回结果。</p>
<h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; kSmallestPairs(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums2, <span class="keyword">int</span> k)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; res;</div><div class="line">        priority_queue&lt;pair&lt;<span class="keyword">int</span>, pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;&gt; que;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums1.size(); ++i)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nums2.size(); ++j)</div><div class="line">            &#123;</div><div class="line">                que.push(make_pair(-nums1[i]-nums2[j], make_pair(nums1[i], nums2[j])));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k &amp;&amp; !que.empty(); ++i)</div><div class="line">        &#123;</div><div class="line">            res.push_back(make_pair(que.top().second.first, que.top().second.second));</div><div class="line">            que.pop();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="378-Kth-Smallest-Element-in-a-Sorted-Matrix"><a href="#378-Kth-Smallest-Element-in-a-Sorted-Matrix" class="headerlink" title="378. Kth Smallest Element in a Sorted Matrix"></a>378. Kth Smallest Element in a Sorted Matrix</h2><h3 id="解题思路I"><a href="#解题思路I" class="headerlink" title="解题思路I"></a>解题思路I</h3><p>这道题我直接用堆排序解决了。。。</p>
<h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h3><figure class="highlight mel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">class Solution</div><div class="line">&#123;</div><div class="line">public:</div><div class="line">    <span class="keyword">int</span> kthSmallest(<span class="keyword">vector</span>&lt;<span class="keyword">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; <span class="keyword">matrix</span>, <span class="keyword">int</span> k)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> res;</div><div class="line">        priority_queue&lt;<span class="keyword">int</span>&gt; que;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">matrix</span>.<span class="keyword">size</span>(); i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="keyword">matrix</span>.<span class="keyword">size</span>(); ++j)</div><div class="line">            &#123;</div><div class="line">                que.push(-<span class="keyword">matrix</span>[i][j]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k &amp;&amp; !que.empty(); ++i)</div><div class="line">        &#123;</div><div class="line">            res = -que.top();</div><div class="line">            que.pop();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="解题思路II"><a href="#解题思路II" class="headerlink" title="解题思路II"></a>解题思路II</h3><p>充分利用矩阵每行每列有序的性质，维护一个最小堆，从左上角开始置入堆中，如果是首行元素，则将元素右边的元素置入堆中，这样能够避免重复，同是确保所有的可能结果都在堆中。</p>
<h3 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h3><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution</div><div class="line">&#123;</div><div class="line">    struct Node</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">int</span> idx;</div><div class="line">        <span class="built_in">int</span> idy;</div><div class="line">        <span class="built_in">int</span> val;</div><div class="line">        Node(<span class="built_in">int</span> x, <span class="built_in">int</span> y, <span class="built_in">int</span> v) : idx(x), idy(y), val(v) &#123;&#125;</div><div class="line">        bool operator &lt; (<span class="keyword">const</span> Node &amp;ref) <span class="keyword">const</span> &#123; return val &gt; ref.val; &#125;</div><div class="line">    &#125;;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">int</span> kthSmallest(vector&lt;vector&lt;<span class="built_in">int</span>&gt;&gt;&amp; matrix, <span class="built_in">int</span> k)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">int</span> res;</div><div class="line">        <span class="built_in">int</span> <span class="built_in">len</span> = matrix.size();</div><div class="line">        priority_queue&lt;Node&gt; que;</div><div class="line">        <span class="built_in">int</span> <span class="built_in">left</span> = <span class="number">0</span>;</div><div class="line">        <span class="built_in">int</span> <span class="built_in">right</span> = <span class="number">0</span>;</div><div class="line">        que.push(Node(<span class="built_in">left</span>, <span class="built_in">right</span>, matrix[<span class="built_in">left</span>][<span class="built_in">right</span>]));</div><div class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; k; ++i)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">left</span> = que.top().idx;</div><div class="line">            <span class="built_in">right</span> = que.top().idy;</div><div class="line">            que.pop();</div><div class="line">            <span class="keyword">if</span>(<span class="built_in">left</span> == <span class="number">0</span> &amp;&amp; <span class="built_in">right</span>+<span class="number">1</span> &lt; <span class="built_in">len</span>) que.push(Node(<span class="built_in">left</span>, <span class="built_in">right</span>+<span class="number">1</span>, matrix[<span class="built_in">left</span>][<span class="built_in">right</span>+<span class="number">1</span>]));</div><div class="line">            <span class="keyword">if</span>(<span class="built_in">left</span>+<span class="number">1</span> &lt; <span class="built_in">len</span>) que.push(Node(<span class="built_in">left</span>+<span class="number">1</span>, <span class="built_in">right</span>, matrix[<span class="built_in">left</span>+<span class="number">1</span>][<span class="built_in">right</span>]));</div><div class="line">        &#125;</div><div class="line">        return que.top().val;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="451-Sort-Characters-By-Frequency"><a href="#451-Sort-Characters-By-Frequency" class="headerlink" title="451. Sort Characters By Frequency"></a>451. Sort Characters By Frequency</h2><h3 id="解题思路-6"><a href="#解题思路-6" class="headerlink" title="解题思路"></a>解题思路</h3><p>使用unordered_map和priority_que进行hash匹配和堆排序，最后输出结果即可；</p>
<h3 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="built_in">string</span> <span class="title">frequencySort</span><span class="params">(<span class="built_in">string</span> s)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">string</span> res;</div><div class="line">        <span class="keyword">if</span>(s == <span class="string">""</span>) <span class="keyword">return</span> res;</div><div class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; m;</div><div class="line">        priority_queue&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">char</span>&gt;&gt; que;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.size(); ++i)</div><div class="line">            m[s[i]]++;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> it = m.begin(); it != m.end(); ++it)</div><div class="line">            que.push(make_pair((*it).second, (*it).first));</div><div class="line">        <span class="keyword">while</span>(!que.empty())</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; que.top().first; ++i)</div><div class="line">            &#123;</div><div class="line">                res += que.top().second;</div><div class="line">            &#125;</div><div class="line">            que.pop();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文包含如下题目：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/ugly-number-ii/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;264. Ugly Number II&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/find-median-from-data-stream/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;295. Find Median from Data Stream&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/super-ugly-number/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;313. Super Ugly Number&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/top-k-frequent-elements/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;347. Top K Frequent Elements&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/design-twitter/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;355. Design Twitter&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/find-k-pairs-with-smallest-sums/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;373. Find K Pairs with Smallest Sums&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/kth-smallest-element-in-a-sorted-matrix/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;378. Kth Smallest Element in a Sorted Matrix&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/sort-characters-by-frequency/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;451. Sort Characters By Frequency&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://haoyuanliu.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://haoyuanliu.github.io/tags/LeetCode/"/>
    
      <category term="Heap" scheme="http://haoyuanliu.github.io/tags/Heap/"/>
    
  </entry>
  
  <entry>
    <title>地址查询函数gethostbyname()和getaddrinfo()</title>
    <link href="http://haoyuanliu.github.io/2017/01/16/%E5%9C%B0%E5%9D%80%E6%9F%A5%E8%AF%A2%E5%87%BD%E6%95%B0gethostbyname-%E5%92%8Cgetaddrinfo/"/>
    <id>http://haoyuanliu.github.io/2017/01/16/地址查询函数gethostbyname-和getaddrinfo/</id>
    <published>2017-01-16T03:08:20.000Z</published>
    <updated>2017-07-01T08:19:25.160Z</updated>
    
    <content type="html"><![CDATA[<p>地址查询函数的功能也就是通过主机名或者域名返回详细的主机信息，其中我们最常用的功能就是通过主机名获得主机的IP地址等信息。gethostbyname()和其可重入版本gethostbyname_r()是我们之前较多使用的函数，由于SUSv4已经删除了它们并认为它们已经是过时的了，现在我们更推荐使用getaddrinfo()来完成相应的功能。</p>
<a id="more"></a>
<h2 id="gethostbyname-函数"><a href="#gethostbyname-函数" class="headerlink" title="gethostbyname()函数"></a>gethostbyname()函数</h2><h3 id="函数原型"><a href="#函数原型" class="headerlink" title="函数原型"></a>函数原型</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hostent</span></span> *gethostbyname(<span class="keyword">const</span> <span class="built_in">char</span> *name);</div></pre></td></tr></table></figure>
<p><strong>功能</strong>：用域名或主机名获取IP地址<br><strong>头文件</strong>：<code>&lt;netdb.h&gt;</code>, <code>&lt;sys/socket.h&gt;</code></p>
<h3 id="hostent结构体"><a href="#hostent结构体" class="headerlink" title="hostent结构体"></a>hostent结构体</h3><p>hostent的结构如下所示：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hostent</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">char</span>    *h_name;<span class="comment">//主机的规范名               </span></div><div class="line">    <span class="keyword">char</span>    **h_aliases;<span class="comment">//主机的别名</span></div><div class="line">    <span class="keyword">int</span>     h_addrtype;<span class="comment">//主机ip地址的类型</span></div><div class="line">    <span class="keyword">int</span>     h_length;<span class="comment">//主机ip地址的长度</span></div><div class="line">    <span class="keyword">char</span>    **h_addr_list;<span class="comment">//主机的ip地址</span></div><div class="line">    <span class="meta">#<span class="meta-keyword">define</span> h_addr h_addr_list[0];</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h3 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h3><p>代码<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netdb.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(argc != <span class="number">2</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"ERROR: usage %s\n"</span>, argv[<span class="number">0</span>]);</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">char</span> *ptr, **pptr;</div><div class="line">    <span class="keyword">char</span> buf[<span class="number">1024</span>];</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">hostent</span> *<span class="title">hent</span>;</span></div><div class="line">    <span class="keyword">if</span>((hent = gethostbyname(argv[<span class="number">1</span>])) == <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"ERROR: gethostbyname error for hostname: %s\n"</span>, argv[<span class="number">1</span>]);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Official hostname: %s\n"</span>, hent-&gt;h_name);</div><div class="line">    <span class="keyword">for</span>(pptr = hent-&gt;h_aliases; *pptr != <span class="literal">NULL</span>; pptr++)</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Alias hostname: %s\n"</span>, *pptr);</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Host Address Type: %d(AF_INET: %d)\n"</span>, hent-&gt;h_addrtype, (<span class="keyword">int</span>)AF_INET);</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(pptr = hent-&gt;h_addr_list; *pptr != <span class="literal">NULL</span>; pptr++)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"IP Address: %s\n"</span>, inet_ntop(hent-&gt;h_addrtype, *pptr, buf, <span class="keyword">sizeof</span> buf));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>执行结果：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">./a.out www.baidu.com</div><div class="line"></div><div class="line">Official hostname: www.a.shifen.com</div><div class="line">Alias hostname: www.baidu.com</div><div class="line">Host<span class="built_in"> Address </span>Type: 2(AF_INET: 2)<span class="built_in"></span></div><div class="line">IP Address: 61.135.169.125<span class="built_in"></span></div><div class="line">IP Address: 61.135.169.121</div></pre></td></tr></table></figure></p>
<h2 id="gethostbyname-r-函数"><a href="#gethostbyname-r-函数" class="headerlink" title="gethostbyname_r()函数"></a>gethostbyname_r()函数</h2><p>gethostbyname_r()函数是gethostbyname()函数的可重入版本，两个函数的功能是一样的。</p>
<h3 id="gethostbyname-r-函数原型"><a href="#gethostbyname-r-函数原型" class="headerlink" title="gethostbyname_r()函数原型"></a>gethostbyname_r()函数原型</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">gethostbyname_r</span>(<span class="params"><span class="keyword">const</span> <span class="keyword">char</span> *name,</span></span></div><div class="line">               <span class="keyword">struct</span> hostent *ret, <span class="keyword">char</span> *buf, size_t buflen,</div><div class="line">               <span class="keyword">struct</span> hostent **result, <span class="keyword">int</span> *h_errnop);</div></pre></td></tr></table></figure>
<p><strong>功能</strong>：用域名或主机名获取IP地址<br><strong>头文件</strong>：<code>&lt;netdb.h&gt;</code>, <code>&lt;sys/socket.h&gt;</code></p>
<h3 id="代码实例-1"><a href="#代码实例-1" class="headerlink" title="代码实例"></a>代码实例</h3><p>代码<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netdb.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(argc != <span class="number">2</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"ERROR: usage %s\n"</span>, argv[<span class="number">0</span>]);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">char</span> *ptr, **pptr;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">hostent</span> <span class="title">hent</span>, *<span class="title">hptr</span>;</span></div><div class="line">    <span class="keyword">char</span> buf[<span class="number">1024</span>];</div><div class="line">    <span class="keyword">int</span> ret;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(gethostbyname_r(argv[<span class="number">1</span>], &amp;hent, buf, <span class="keyword">sizeof</span>(buf), &amp;hptr, &amp;ret))</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"ERROR: gethostbyname_r(%s) ret: %d\n"</span>, argv[<span class="number">1</span>], ret);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Get host by name(%s) success!\n"</span>, argv[<span class="number">1</span>]);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Official hostname: %s\n"</span>, hptr-&gt;h_name);</div><div class="line">    <span class="keyword">for</span>(pptr = hptr-&gt;h_aliases; *pptr != <span class="literal">NULL</span>; pptr++)</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Alias hostname: %s\n"</span>, *pptr);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Host Address Type: %d(AF_INET: %d)\n"</span>, hptr-&gt;h_addrtype, (<span class="keyword">int</span>)AF_INET);</div><div class="line">    <span class="keyword">for</span>(pptr = hptr-&gt;h_addr_list; *pptr != <span class="literal">NULL</span>; pptr++)</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"IP Address: %s\n"</span>, inet_ntop(hptr-&gt;h_addrtype, *pptr, buf, <span class="keyword">sizeof</span> buf));</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>执行结果<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">./a.out www.baidu.com</div><div class="line"></div><div class="line"><span class="builtin-name">Get</span> host by name(www.baidu.com) success!</div><div class="line">Official hostname: www.a.shifen.com</div><div class="line">Alias hostname: www.baidu.com</div><div class="line">Host<span class="built_in"> Address </span>Type: 2(AF_INET: 2)<span class="built_in"></span></div><div class="line">IP Address: 61.135.169.125<span class="built_in"></span></div><div class="line">IP Address: 61.135.169.121</div></pre></td></tr></table></figure></p>
<h2 id="getaddrinfo-函数"><a href="#getaddrinfo-函数" class="headerlink" title="getaddrinfo()函数"></a>getaddrinfo()函数</h2><p>getaddrinfo()函数是现在用来替代gethostbyname()功能的函数，他具有更加强大的功能。</p>
<h3 id="getaddrinfo-函数原型"><a href="#getaddrinfo-函数原型" class="headerlink" title="getaddrinfo()函数原型"></a>getaddrinfo()函数原型</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getaddrinfo</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *<span class="keyword">restrict</span> host, </span></span></div><div class="line">                <span class="keyword">const</span> <span class="keyword">char</span> *<span class="keyword">restrict</span> service,</div><div class="line">                <span class="keyword">const</span> struct addrinfo *<span class="keyword">restrict</span> hint,</div><div class="line">                struct addrinfo **<span class="keyword">restrict</span> res);</div><div class="line">                        返回值：若成功，返回<span class="number">0</span>；若出错，返回非<span class="number">0</span>错误码</div></pre></td></tr></table></figure>
<p><strong>功能</strong>：用主机名或服务名获取IP地址<br><strong>头文件</strong>：<code>&lt;netdb.h&gt;</code>, <code>&lt;sys/socket.h&gt;</code></p>
<h3 id="代码实例-2"><a href="#代码实例-2" class="headerlink" title="代码实例"></a>代码实例</h3><p>代码<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netdb.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_family</span><span class="params">(struct addrinfo *aip)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Family:"</span>);</div><div class="line">    <span class="keyword">switch</span> (aip-&gt;ai_family) &#123;</div><div class="line">    <span class="keyword">case</span> AF_INET:</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"inet"</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> AF_INET6:</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"inet6"</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> AF_UNIX:</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"unix"</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> AF_UNSPEC:</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"unspecified"</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">default</span>:</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"unknown"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_type</span><span class="params">(struct addrinfo *aip)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">" Type:"</span>);</div><div class="line">    <span class="keyword">switch</span> (aip-&gt;ai_socktype) &#123;</div><div class="line">    <span class="keyword">case</span> SOCK_STREAM:</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"stream"</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> SOCK_DGRAM:</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"datagram"</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> SOCK_SEQPACKET:</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"seqpacket"</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> SOCK_RAW:</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"raw"</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">default</span>:</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"unknown (%d)"</span>, aip-&gt;ai_socktype);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_protocol</span><span class="params">(struct addrinfo *aip)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">" Protocol:"</span>);</div><div class="line">    <span class="keyword">switch</span> (aip-&gt;ai_protocol) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"default"</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> IPPROTO_TCP:</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"TCP"</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> IPPROTO_UDP:</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"UDP"</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> IPPROTO_RAW:</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"raw"</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">default</span>:</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"unknown (%d)"</span>, aip-&gt;ai_protocol);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_flags</span><span class="params">(struct addrinfo *aip)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">" Flags:"</span>);</div><div class="line">    <span class="keyword">if</span> (aip-&gt;ai_flags == <span class="number">0</span>) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">" 0"</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span> (aip-&gt;ai_flags &amp; AI_PASSIVE)</div><div class="line">            <span class="built_in">printf</span>(<span class="string">" passive"</span>);</div><div class="line">        <span class="keyword">if</span> (aip-&gt;ai_flags &amp; AI_CANONNAME)</div><div class="line">            <span class="built_in">printf</span>(<span class="string">" canon"</span>);</div><div class="line">        <span class="keyword">if</span> (aip-&gt;ai_flags &amp; AI_NUMERICHOST)</div><div class="line">            <span class="built_in">printf</span>(<span class="string">" numhost"</span>);</div><div class="line">        <span class="keyword">if</span> (aip-&gt;ai_flags &amp; AI_NUMERICSERV)</div><div class="line">            <span class="built_in">printf</span>(<span class="string">" numserv"</span>);</div><div class="line">        <span class="keyword">if</span> (aip-&gt;ai_flags &amp; AI_V4MAPPED)</div><div class="line">            <span class="built_in">printf</span>(<span class="string">" v4mapped"</span>);</div><div class="line">        <span class="keyword">if</span> (aip-&gt;ai_flags &amp; AI_ALL)</div><div class="line">            <span class="built_in">printf</span>(<span class="string">" all"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(argc != <span class="number">2</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"ERROR: usage %s\n"</span>, argv[<span class="number">0</span>]);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">addrinfo</span> *<span class="title">ai</span>, *<span class="title">aip</span>;</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">addrinfo</span> <span class="title">hint</span>;</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> *<span class="title">sinp</span>;</span></div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *addr;</div><div class="line">    <span class="keyword">int</span> err;</div><div class="line">    <span class="keyword">char</span> buf[<span class="number">1024</span>];</div><div class="line"></div><div class="line">    hint.ai_flags = AI_CANONNAME;</div><div class="line">    hint.ai_family = <span class="number">0</span>;</div><div class="line">    hint.ai_socktype = <span class="number">0</span>;</div><div class="line">    hint.ai_protocol = <span class="number">0</span>;</div><div class="line">    hint.ai_addrlen = <span class="number">0</span>;</div><div class="line">    hint.ai_canonname = <span class="literal">NULL</span>;</div><div class="line">    hint.ai_addr = <span class="literal">NULL</span>;</div><div class="line">    hint.ai_next = <span class="literal">NULL</span>;</div><div class="line">    <span class="keyword">if</span>((err = getaddrinfo(argv[<span class="number">1</span>], <span class="literal">NULL</span>, &amp;hint, &amp;ai)) != <span class="number">0</span>)</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"ERROR: getaddrinfo error: %s\n"</span>, gai_strerror(err));</div><div class="line">    <span class="keyword">for</span>(aip = ai; aip != <span class="literal">NULL</span>; aip = aip-&gt;ai_next)</div><div class="line">    &#123;</div><div class="line">        print_family(aip);</div><div class="line">        print_type(aip);</div><div class="line">        print_protocol(aip);</div><div class="line">        print_flags(aip);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Canonical Name: %s\n"</span>, aip-&gt;ai_canonname);</div><div class="line">        <span class="keyword">if</span>(aip-&gt;ai_family == AF_INET)</div><div class="line">        &#123;</div><div class="line">            sinp = (struct sockaddr_in *)aip-&gt;ai_addr;</div><div class="line">            addr = inet_ntop(AF_INET, &amp;sinp-&gt;sin_addr, buf, <span class="keyword">sizeof</span> buf);</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"IP Address: %s "</span>, addr);</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"Port: %d\n"</span>, ntohs(sinp-&gt;sin_port));</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>执行结果：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">./a.out www.baidu.com</div><div class="line"></div><div class="line"></div><div class="line">Family:inet Type:stream Protocol:TCP Flags: canon</div><div class="line">Canonical Name: www.a.shifen.com<span class="built_in"></span></div><div class="line">IP Address: 61.135.169.125 Port: 0</div><div class="line"></div><div class="line">Family:inet Type:datagram Protocol:UDP Flags: canon</div><div class="line">Canonical Name: (<span class="literal">null</span>)<span class="built_in"></span></div><div class="line">IP Address: 61.135.169.125 Port: 0</div><div class="line"></div><div class="line">Family:inet Type:raw Protocol:default Flags: canon</div><div class="line">Canonical Name: (<span class="literal">null</span>)<span class="built_in"></span></div><div class="line">IP Address: 61.135.169.125 Port: 0</div><div class="line"></div><div class="line">Family:inet Type:stream Protocol:TCP Flags: canon</div><div class="line">Canonical Name: (<span class="literal">null</span>)<span class="built_in"></span></div><div class="line">IP Address: 61.135.169.121 Port: 0</div><div class="line"></div><div class="line">Family:inet Type:datagram Protocol:UDP Flags: canon</div><div class="line">Canonical Name: (<span class="literal">null</span>)<span class="built_in"></span></div><div class="line">IP Address: 61.135.169.121 Port: 0</div><div class="line"></div><div class="line">Family:inet Type:raw Protocol:default Flags: canon</div><div class="line">Canonical Name: (<span class="literal">null</span>)<span class="built_in"></span></div><div class="line">IP Address: 61.135.169.121 Port: 0</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;地址查询函数的功能也就是通过主机名或者域名返回详细的主机信息，其中我们最常用的功能就是通过主机名获得主机的IP地址等信息。gethostbyname()和其可重入版本gethostbyname_r()是我们之前较多使用的函数，由于SUSv4已经删除了它们并认为它们已经是过时的了，现在我们更推荐使用getaddrinfo()来完成相应的功能。&lt;/p&gt;
    
    </summary>
    
      <category term="网络编程" scheme="http://haoyuanliu.github.io/categories/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="UNIX/Linux" scheme="http://haoyuanliu.github.io/tags/UNIX-Linux/"/>
    
      <category term="网络编程" scheme="http://haoyuanliu.github.io/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>地址转换函数inet_addr(), inet_aton(), inet_ntoa()和inet_ntop(), inet_pton()</title>
    <link href="http://haoyuanliu.github.io/2017/01/15/%E5%9C%B0%E5%9D%80%E8%BD%AC%E6%8D%A2%E5%87%BD%E6%95%B0inet-addr-inet-aton-inet-ntoa-%E5%92%8Cinet-ntop-inet-pton/"/>
    <id>http://haoyuanliu.github.io/2017/01/15/地址转换函数inet-addr-inet-aton-inet-ntoa-和inet-ntop-inet-pton/</id>
    <published>2017-01-15T08:43:01.000Z</published>
    <updated>2017-07-01T08:19:25.159Z</updated>
    
    <content type="html"><![CDATA[<p>对于地址转换函数，BSD网络软件包含inet_addr(), inet_aton()和inet_ntoa()三个函数用于二进制地址格式与点分十进制之间的相互转换，但是仅仅适用于IPv4，两个新函数inet_ntop()和inet_pton()具有相似的功能，并且同时支持IPv4和IPv6。</p>
<a id="more"></a>
<h2 id="inet-addr-inet-aton-和inet-ntoa-函数"><a href="#inet-addr-inet-aton-和inet-ntoa-函数" class="headerlink" title="inet_addr(), inet_aton()和inet_ntoa()函数"></a>inet_addr(), inet_aton()和inet_ntoa()函数</h2><h3 id="inet-addr-函数"><a href="#inet-addr-函数" class="headerlink" title="inet_addr()函数"></a>inet_addr()函数</h3><p><strong>功能</strong>：inet_addr()函数用于将点分十进制IP地址转换成网络字节序IP地址;<br><strong>原型</strong>：<code>in_addr_t inet_addr(const char *cp)</code>;<br><strong>返回值</strong>：如果正确执行将返回一个无符号长整数型数。如果传入的字符串不是一个合法的IP地址，将返回INADDR_NONE;<br><strong>头文件</strong>：arpa/inet.h (Linux) </p>
<h3 id="inet-aton-函数"><a href="#inet-aton-函数" class="headerlink" title="inet_aton()函数"></a>inet_aton()函数</h3><p><strong>功能</strong>：inet_aton()函数用于将点分十进制IP地址转换成网络字节序IP地址;<br><strong>原型</strong>：<code>int inet_aton(const char *string, struct in_addr *addr)</code>;<br><strong>返回值</strong>：如果这个函数成功，函数的返回值非零，如果输入地址不正确则会返回零;<br><strong>头文件</strong>：sys/socket.h (Linux)</p>
<h3 id="inet-ntoa-函数"><a href="#inet-ntoa-函数" class="headerlink" title="inet_ntoa()函数"></a>inet_ntoa()函数</h3><p><strong>功能</strong>inet_ntoa()函数用于网络字节序IP转化点分十进制IP;<br><strong>原型</strong>：<code>char *inet_ntoa (struct in_addr)</code>;<br><strong>返回值</strong>：若无错误发生，inet_ntoa()返回一个字符指针。否则的话，返回NULL。其中的数据应在下一个WINDOWS套接口调用前复制出来;<br><strong>头文件</strong>：arpa/inet.h (Linux)</p>
<h3 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h3><p>代码<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">char</span> lo[] = <span class="string">"127.0.0.1"</span>;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">netAddr</span>;</span></div><div class="line">    netAddr.s_addr = inet_addr(lo);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"NetIP: 0x%x\n"</span>, netAddr.s_addr);</div><div class="line">    <span class="keyword">char</span> *strAddr = inet_ntoa(netAddr);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"StrIP: %s\n"</span>, strAddr);</div><div class="line">    <span class="keyword">int</span> ret = inet_aton(strAddr, &amp;netAddr);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"NetIP: 0x%x\n"</span>, netAddr.s_addr);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出结果：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">NetIP:</span> <span class="number">0x100007f</span>(网络序)</div><div class="line"><span class="symbol">StrIP:</span> <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span></div><div class="line"><span class="symbol">NetIP:</span> <span class="number">0x100007f</span>(网络序)</div></pre></td></tr></table></figure></p>
<h2 id="inet-ntop-和inet-pton-函数"><a href="#inet-ntop-和inet-pton-函数" class="headerlink" title="inet_ntop()和inet_pton()函数"></a>inet_ntop()和inet_pton()函数</h2><h3 id="inet-ntop-函数"><a href="#inet-ntop-函数" class="headerlink" title="inet_ntop()函数"></a>inet_ntop()函数</h3><p><strong>功能</strong>：inet_ntop()函数用于将网络字节序的二进制地址转换成文本字符串;<br><strong>原型</strong>：<code>const char *inet_pton(int domain, const void *restrict addr, char *restrict str, socklen_t size)</code>;<br><strong>返回值</strong>：若成功，返回地址字符串指针；若出错，返回NULL;<br><strong>头文件</strong>：arpa/inet.h (Linux)</p>
<h3 id="inet-pton-函数"><a href="#inet-pton-函数" class="headerlink" title="inet_pton()函数"></a>inet_pton()函数</h3><p><strong>功能</strong>：inet_pton()函数用于将文本字符串格式转换成网络字节序二进制地址;<br><strong>原型</strong>：<code>int inet_pton(int domain, const char *restrict str, void *restrict addr)</code>;<br><strong>返回值</strong>：若成功，返回1；若格式无效，返回0；若出错，返回-1;<br><strong>头文件</strong>：arpa/inet.h (Linux)</p>
<h3 id="应用实例-1"><a href="#应用实例-1" class="headerlink" title="应用实例"></a>应用实例</h3><p>代码<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">addr</span>;</span></div><div class="line">    <span class="keyword">if</span>(inet_pton(AF_INET, <span class="string">"127.0.0.1"</span>, &amp;addr.s_addr) == <span class="number">1</span>)</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"NetIP: %x\n"</span>, addr.s_addr);</div><div class="line">    <span class="keyword">char</span> str[<span class="number">20</span>];</div><div class="line">    <span class="keyword">if</span>(inet_ntop(AF_INET, &amp;addr.s_addr, str, <span class="keyword">sizeof</span> str))</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"StrIP: %s\n"</span>, str);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出结果：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">NetIP</span>: 100007<span class="selector-tag">f</span></div><div class="line"><span class="selector-tag">StrIP</span>: 127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于地址转换函数，BSD网络软件包含inet_addr(), inet_aton()和inet_ntoa()三个函数用于二进制地址格式与点分十进制之间的相互转换，但是仅仅适用于IPv4，两个新函数inet_ntop()和inet_pton()具有相似的功能，并且同时支持IPv4和IPv6。&lt;/p&gt;
    
    </summary>
    
      <category term="网络编程" scheme="http://haoyuanliu.github.io/categories/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="UNIX/Linux" scheme="http://haoyuanliu.github.io/tags/UNIX-Linux/"/>
    
      <category term="网络编程" scheme="http://haoyuanliu.github.io/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode Tree II</title>
    <link href="http://haoyuanliu.github.io/2017/01/12/LeetCode-Tree-II/"/>
    <id>http://haoyuanliu.github.io/2017/01/12/LeetCode-Tree-II/</id>
    <published>2017-01-12T03:53:09.000Z</published>
    <updated>2017-07-01T08:19:25.159Z</updated>
    
    <content type="html"><![CDATA[<p>本文包含如下题目：<br><a href="https://leetcode.com/problems/flatten-binary-tree-to-linked-list/" target="_blank" rel="external">114. Flatten Binary Tree to Linked List</a><br><a href="https://leetcode.com/problems/populating-next-right-pointers-in-each-node/" target="_blank" rel="external">116. Populating Next Right Pointers in Each Node</a><br><a href="https://leetcode.com/problems/populating-next-right-pointers-in-each-node-ii/" target="_blank" rel="external">117. Populating Next Right Pointers in Each Node II</a><br><a href="https://leetcode.com/problems/binary-tree-maximum-path-sum/" target="_blank" rel="external">124. Binary Tree Maximum Path Sum</a><br><a href="https://leetcode.com/problems/sum-root-to-leaf-numbers/" target="_blank" rel="external">129. Sum Root to Leaf Numbers</a><br><a href="https://leetcode.com/problems/binary-tree-preorder-traversal/" target="_blank" rel="external">144. Binary Tree Preorder Traversal</a><br><a href="https://leetcode.com/problems/binary-tree-postorder-traversal/" target="_blank" rel="external">145. Binary Tree Postorder Traversal</a><br><a href="https://leetcode.com/problems/binary-search-tree-iterator/" target="_blank" rel="external">173. Binary Search Tree Iterator</a><br><a href="https://leetcode.com/problems/binary-tree-right-side-view/" target="_blank" rel="external">199. Binary Tree Right Side View</a><br><a href="https://leetcode.com/problems/count-complete-tree-nodes/" target="_blank" rel="external">222. Count Complete Tree Nodes</a><br><a href="https://leetcode.com/problems/invert-binary-tree/" target="_blank" rel="external">226. Invert Binary Tree</a><br><a href="https://leetcode.com/problems/kth-smallest-element-in-a-bst/" target="_blank" rel="external">230. Kth Smallest Element in a BST</a><br><a href="https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/" target="_blank" rel="external">235. Lowest Common Ancestor of a Binary Search Tree</a><br><a href="https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/" target="_blank" rel="external">236. Lowest Common Ancestor of a Binary Tree</a><br><a href="https://leetcode.com/problems/binary-tree-paths/" target="_blank" rel="external">257. Binary Tree Paths</a><br><a href="https://leetcode.com/problems/serialize-and-deserialize-binary-tree/" target="_blank" rel="external">297. Serialize and Deserialize Binary Tree</a><br><a href="https://leetcode.com/problems/house-robber-iii/" target="_blank" rel="external">337. House Robber III</a><br><a href="https://leetcode.com/problems/sum-of-left-leaves/" target="_blank" rel="external">404. Sum of Left Leaves</a><br><a href="https://leetcode.com/problems/serialize-and-deserialize-bst/" target="_blank" rel="external">449. Serialize and Deserialize BST</a><br><a href="https://leetcode.com/problems/delete-node-in-a-bst/" target="_blank" rel="external">450. Delete Node in a BST</a></p>
<a id="more"></a>
<h2 id="114-Flatten-Binary-Tree-to-Linked-List"><a href="#114-Flatten-Binary-Tree-to-Linked-List" class="headerlink" title="114. Flatten Binary Tree to Linked List"></a>114. Flatten Binary Tree to Linked List</h2><h3 id="解题思路-I"><a href="#解题思路-I" class="headerlink" title="解题思路 I"></a>解题思路 I</h3><blockquote>
<ul>
<li>使用一个栈结构存储各个节点，通过出栈入栈操作重新搭建树结构；</li>
<li>注意这里要先将右子节点入栈，保证先访问的是左子节点；</li>
</ul>
</blockquote>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">class Solution </div><div class="line">&#123;</div><div class="line">public:</div><div class="line">    void flatten(TreeNode* root) </div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(root == NULL)</div><div class="line">        	<span class="keyword">return</span>;</div><div class="line">        stack&lt;TreeNode*&gt; st;</div><div class="line">        TreeNode* p = root;</div><div class="line">        <span class="keyword">if</span>(p-&gt;<span class="built_in">right</span>) st.push(p-&gt;<span class="built_in">right</span>);</div><div class="line">        <span class="keyword">if</span>(p-&gt;<span class="built_in">left</span>) st.push(p-&gt;<span class="built_in">left</span>);</div><div class="line">        while(!st.empty())</div><div class="line">        &#123;</div><div class="line">        	p-&gt;<span class="built_in">left</span> = NULL;</div><div class="line">        	p-&gt;<span class="built_in">right</span> = st.<span class="built_in">top</span>();</div><div class="line">        	p = p-&gt;<span class="built_in">right</span>;</div><div class="line">        	TreeNode* temp = st.<span class="built_in">top</span>();</div><div class="line">        	st.pop();</div><div class="line">        	<span class="keyword">if</span>(temp-&gt;<span class="built_in">right</span>) st.push(temp-&gt;<span class="built_in">right</span>);</div><div class="line">        	<span class="keyword">if</span>(temp-&gt;<span class="built_in">left</span>) st.push(temp-&gt;<span class="built_in">left</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="解题思路-II"><a href="#解题思路-II" class="headerlink" title="解题思路 II"></a>解题思路 II</h3><blockquote>
<ul>
<li>使用递归的方法，先对右子树进行转换操作，然后左子树，最后根节点，使用一个<code>pre</code>参数保存每次转换之后的根节点，不断进行递归即可；</li>
</ul>
</blockquote>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span></div><div class="line">&#123;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">	TreeNode* pre = <span class="keyword">NULL</span>;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    void flatten(TreeNode* root) </div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(root == <span class="keyword">NULL</span>)</div><div class="line">        	<span class="keyword">return</span>;</div><div class="line">   		flatten(root-&gt;right);</div><div class="line">   		flatten(root-&gt;left);</div><div class="line">   		root-&gt;right = pre;</div><div class="line">   		root-&gt;left = <span class="keyword">NULL</span>;</div><div class="line">   		pre = root;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="解题思路-III"><a href="#解题思路-III" class="headerlink" title="解题思路 III"></a>解题思路 III</h3><blockquote>
<ul>
<li>将根节点右子树置于左子树叶子节点的右子树位置；</li>
<li>将左子树置于根节点的右子树位置，根节点左子树置为NULL；</li>
<li>不断循环上述操作；</li>
</ul>
</blockquote>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">class Solution </div><div class="line">&#123;</div><div class="line">public:</div><div class="line">    void flatten(TreeNode* root) </div><div class="line">    &#123;</div><div class="line">        while(root)</div><div class="line">        &#123;</div><div class="line">        	<span class="keyword">if</span>(root-&gt;<span class="built_in">left</span> &amp;&amp; root-&gt;<span class="built_in">right</span>)</div><div class="line">        	&#123;</div><div class="line">        		TreeNode* l = root-&gt;<span class="built_in">left</span>;</div><div class="line">        		while(l-&gt;<span class="built_in">right</span>)</div><div class="line">        			l = l-&gt;<span class="built_in">right</span>;</div><div class="line">        		l-&gt;<span class="built_in">right</span> = root-&gt;<span class="built_in">right</span>;</div><div class="line">        	&#125;</div><div class="line">        	<span class="keyword">if</span>(root-&gt;<span class="built_in">left</span>)</div><div class="line">        		root-&gt;<span class="built_in">right</span> = root-&gt;<span class="built_in">left</span>;</div><div class="line">        	root-&gt;<span class="built_in">left</span> = NULL;</div><div class="line">        	root = root-&gt;<span class="built_in">right</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="116-Populating-Next-Right-Pointers-in-Each-Node"><a href="#116-Populating-Next-Right-Pointers-in-Each-Node" class="headerlink" title="116. Populating Next Right Pointers in Each Node"></a>116. Populating Next Right Pointers in Each Node</h2><h3 id="解题思路-I-1"><a href="#解题思路-I-1" class="headerlink" title="解题思路 I"></a>解题思路 I</h3><blockquote>
<ul>
<li>使用一个<code>queue</code>进行BFS，然后依次进行连接构建；</li>
</ul>
</blockquote>
<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span></div><div class="line">&#123;</div><div class="line">public:</div><div class="line">    <span class="literal">void</span> connect(TreeLinkNode *root) </div><div class="line">    &#123;</div><div class="line">    	<span class="keyword">if</span>(root == NULL)</div><div class="line">    		<span class="keyword">return</span>;</div><div class="line">    	queue&lt;TreeLinkNode*&gt; que;</div><div class="line">    	que.push(root);</div><div class="line">    	<span class="keyword">while</span>(!que.empty())</div><div class="line">    	&#123;</div><div class="line">    		TreeLinkNode* p = que.front();</div><div class="line">            int len = que.size();</div><div class="line">    		<span class="keyword">for</span>(int i = <span class="number">0</span>; i &lt; len; ++i)</div><div class="line">    		&#123;</div><div class="line"></div><div class="line">                <span class="keyword">if</span><span class="function"><span class="params">(que.front()-&gt;left)</span> <span class="title">que</span>.<span class="title">push</span><span class="params">(que.front()-&gt;left)</span>;</span></div><div class="line">                <span class="title">if</span><span class="params">(que.front()-&gt;right)</span> <span class="title">que</span>.<span class="title">push</span><span class="params">(que.front()-&gt;right)</span>;</div><div class="line">                <span class="title">que</span>.<span class="title">pop</span><span class="params">()</span>;</div><div class="line">    			<span class="title">if</span><span class="params">(i &lt; len-<span class="number">1</span>)</span></div><div class="line">    			&#123;</div><div class="line">    				<span class="title">p</span>-&gt;next = que.front();</div><div class="line">                    p = p-&gt;next;</div><div class="line">    			&#125;     			</div><div class="line">    		&#125;</div><div class="line">    		p-&gt;next = NULL;</div><div class="line">    	&#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="解题思路-II-1"><a href="#解题思路-II-1" class="headerlink" title="解题思路 II"></a>解题思路 II</h3><blockquote>
<ul>
<li>遍历每一层进行连接即可；</li>
</ul>
</blockquote>
<h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">class Solution </div><div class="line">&#123;</div><div class="line">public:</div><div class="line">    void connect(TreeLinkNode *root) </div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(root == NULL) return;</div><div class="line">        TreeLinkNode* pre = root;</div><div class="line">        TreeLinkNode* cur = NULL;</div><div class="line">        <span class="function"><span class="title">while</span>(pre-&gt;</span>left)</div><div class="line">        &#123;</div><div class="line">            cur = pre;</div><div class="line">            <span class="keyword">while</span>(cur)</div><div class="line">            &#123;</div><div class="line">                <span class="function"><span class="title">cur</span>-&gt;</span><span class="function"><span class="title">left</span>-&gt;</span><span class="function"><span class="title">next</span> = cur-&gt;</span>right;</div><div class="line">                <span class="function"><span class="title">if</span>(cur-&gt;</span>next)</div><div class="line">                    <span class="function"><span class="title">cur</span>-&gt;</span><span class="function"><span class="title">right</span>-&gt;</span><span class="function"><span class="title">next</span> = cur-&gt;</span><span class="function"><span class="title">next</span>-&gt;</span>left;</div><div class="line">                <span class="function"><span class="title">cur</span> = cur-&gt;</span>next;</div><div class="line">            &#125;</div><div class="line">            <span class="function"><span class="title">pre</span> = pre-&gt;</span>left;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="117-Populating-Next-Right-Pointers-in-Each-Node-II"><a href="#117-Populating-Next-Right-Pointers-in-Each-Node-II" class="headerlink" title="117. Populating Next Right Pointers in Each Node II"></a>117. Populating Next Right Pointers in Each Node II</h2><h3 id="解题思路-I-2"><a href="#解题思路-I-2" class="headerlink" title="解题思路 I"></a>解题思路 I</h3><blockquote>
<ul>
<li>如116题，使用<code>queue</code>可以AC；</li>
</ul>
</blockquote>
<h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span></div><div class="line">&#123;</div><div class="line">public:</div><div class="line">    <span class="literal">void</span> connect(TreeLinkNode *root) </div><div class="line">    &#123;</div><div class="line">    	<span class="keyword">if</span>(root == NULL)</div><div class="line">    		<span class="keyword">return</span>;</div><div class="line">    	queue&lt;TreeLinkNode*&gt; que;</div><div class="line">    	que.push(root);</div><div class="line">    	<span class="keyword">while</span>(!que.empty())</div><div class="line">    	&#123;</div><div class="line">    		TreeLinkNode* p = que.front();</div><div class="line">            int len = que.size();</div><div class="line">    		<span class="keyword">for</span>(int i = <span class="number">0</span>; i &lt; len; ++i)</div><div class="line">    		&#123;</div><div class="line"></div><div class="line">                <span class="keyword">if</span><span class="function"><span class="params">(que.front()-&gt;left)</span> <span class="title">que</span>.<span class="title">push</span><span class="params">(que.front()-&gt;left)</span>;</span></div><div class="line">                <span class="title">if</span><span class="params">(que.front()-&gt;right)</span> <span class="title">que</span>.<span class="title">push</span><span class="params">(que.front()-&gt;right)</span>;</div><div class="line">                <span class="title">que</span>.<span class="title">pop</span><span class="params">()</span>;</div><div class="line">    			<span class="title">if</span><span class="params">(i &lt; len-<span class="number">1</span>)</span></div><div class="line">    			&#123;</div><div class="line">    				<span class="title">p</span>-&gt;next = que.front();</div><div class="line">                    p = p-&gt;next;</div><div class="line">    			&#125;     			</div><div class="line">    		&#125;</div><div class="line">    		p-&gt;next = NULL;</div><div class="line">    	&#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="解题思路-II-2"><a href="#解题思路-II-2" class="headerlink" title="解题思路 II"></a>解题思路 II</h3><blockquote>
<ul>
<li>使用指针的方法，遍历每一层进行树结构的构建；</li>
<li>使用一个指针<code>head</code>保存每一层头节点，使用指针<code>pre</code>保存上一个连接的节点，方便进行连接；</li>
<li>仍然使用指针<code>cur</code>保存上层节点，实现遍历；</li>
</ul>
</blockquote>
<h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h3><figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">class Solution </div><div class="line">&#123;</div><div class="line">public:</div><div class="line">    void connect(TreeLinkNode *root) </div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(root == NULL)</div><div class="line">            return;</div><div class="line">        TreeLinkNode* head = NULL;</div><div class="line">        TreeLinkNode* pre = NULL;</div><div class="line">        TreeLinkNode* cur = root;</div><div class="line">        <span class="keyword">while</span>(cur)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">while</span>(cur)</div><div class="line">            &#123;</div><div class="line">                <span class="function"><span class="title">if</span>(cur-&gt;</span>left)</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">if</span>(!head)</div><div class="line">                        <span class="function"><span class="title">head</span> = cur-&gt;</span>left;</div><div class="line">                    <span class="keyword">else</span></div><div class="line">                        <span class="function"><span class="title">pre</span>-&gt;</span><span class="function"><span class="title">next</span> = cur-&gt;</span>left;</div><div class="line">                    <span class="function"><span class="title">pre</span> = cur-&gt;</span>left;</div><div class="line">                &#125;</div><div class="line">                <span class="function"><span class="title">if</span>(cur-&gt;</span>right)</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">if</span>(!head)</div><div class="line">                        <span class="function"><span class="title">head</span> = cur-&gt;</span>right;</div><div class="line">                    <span class="keyword">else</span></div><div class="line">                        <span class="function"><span class="title">pre</span>-&gt;</span><span class="function"><span class="title">next</span> = cur-&gt;</span>right;</div><div class="line">                    <span class="function"><span class="title">pre</span> = cur-&gt;</span>right;</div><div class="line">                &#125;</div><div class="line">                <span class="function"><span class="title">cur</span> = cur-&gt;</span>next;</div><div class="line">            &#125;</div><div class="line">            cur = head;</div><div class="line">            head = pre = NULL;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="124-Binary-Tree-Maximum-Path-Sum"><a href="#124-Binary-Tree-Maximum-Path-Sum" class="headerlink" title="124. Binary Tree Maximum Path Sum"></a>124. Binary Tree Maximum Path Sum</h2><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<p>首先要维持一个最大值<code>res</code>，将其初始值设置为最小值；<br>使用辅助递归函数遍历所有的节点，返回以该节点为根节点的最大路径和，同时更新<code>res</code>的值；</p>
</blockquote>
<h3 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span></div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    int maxPathSum(<span class="type">TreeNode</span>* root) </div><div class="line">    &#123;</div><div class="line">    	int res = (<span class="number">1</span>&lt;&lt;<span class="number">31</span>);</div><div class="line">        <span class="keyword">if</span>(root == <span class="type">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        getMax(root, res);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    int getMax(<span class="type">TreeNode</span>* root, int &amp;res)</div><div class="line">    &#123;</div><div class="line">    	<span class="keyword">if</span>(root == <span class="type">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    	int <span class="keyword">left</span> = <span class="built_in">max</span>(<span class="number">0</span>, getMax(root-&gt;<span class="keyword">left</span>, res));</div><div class="line">    	int <span class="keyword">right</span> = <span class="built_in">max</span>(<span class="number">0</span>, getMax(root-&gt;<span class="keyword">right</span>, res));</div><div class="line">    	res = <span class="built_in">max</span>(res, <span class="keyword">left</span> + <span class="keyword">right</span> + root-&gt;val);</div><div class="line">    	<span class="keyword">return</span> root-&gt;val + <span class="built_in">max</span>(<span class="keyword">left</span>, <span class="keyword">right</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="129-Sum-Root-to-Leaf-Numbers"><a href="#129-Sum-Root-to-Leaf-Numbers" class="headerlink" title="129. Sum Root to Leaf Numbers"></a>129. Sum Root to Leaf Numbers</h2><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<p>仍然是使用搜索递归，计算每一条支路的加和最后返回到主函数；</p>
</blockquote>
<h3 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a>代码</h3><figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">class Solution </div><div class="line">&#123;</div><div class="line">public:</div><div class="line">    int sumNumbers(TreeNode* root) </div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(root == NULL) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">solve</span>(root, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">    int <span class="built_in">solve</span>(TreeNode* root, int res)</div><div class="line">    &#123;</div><div class="line">    	<span class="keyword">if</span>(root == NULL)</div><div class="line">    		<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    	<span class="keyword">if</span>(!root-&gt;<span class="built_in">left</span> &amp;&amp; !root-&gt;<span class="built_in">right</span>)    		</div><div class="line">    		<span class="keyword">return</span> res * <span class="number">10</span> + root-&gt;val;</div><div class="line">    	<span class="keyword">return</span> <span class="built_in">solve</span>(root-&gt;<span class="built_in">left</span>, res * <span class="number">10</span> + root-&gt;val) + <span class="built_in">solve</span>(root-&gt;<span class="built_in">right</span>, res * <span class="number">10</span>  + root-&gt;val);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="144-Binary-Tree-Preorder-Traversal"><a href="#144-Binary-Tree-Preorder-Traversal" class="headerlink" title="144. Binary Tree Preorder Traversal"></a>144. Binary Tree Preorder Traversal</h2><h3 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<p>考察树的非递归遍历；</p>
</blockquote>
<h3 id="代码-9"><a href="#代码-9" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span></div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; preorderTraversal(TreeNode* root) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</div><div class="line">        <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span> res;</div><div class="line">        <span class="built_in">stack</span>&lt;TreeNode*&gt; s;</div><div class="line">        TreeNode* p = root;</div><div class="line">        <span class="keyword">while</span>(p || !s.empty())</div><div class="line">        &#123;</div><div class="line">        	<span class="keyword">while</span>(p)</div><div class="line">        	&#123;</div><div class="line">        		res.push_back(p-&gt;val);</div><div class="line">        		s.push(p);</div><div class="line">        		p = p-&gt;left;</div><div class="line">        	&#125;</div><div class="line">        	<span class="keyword">if</span>(!s.empty())</div><div class="line">        	&#123;</div><div class="line">        		p = s.top();</div><div class="line">        		s.pop();</div><div class="line">        		p = p-&gt;right;</div><div class="line">        	&#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="145-Binary-Tree-Postorder-Traversal"><a href="#145-Binary-Tree-Postorder-Traversal" class="headerlink" title="145. Binary Tree Postorder Traversal"></a>145. Binary Tree Postorder Traversal</h2><h3 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<p>二叉树的后序遍历，使用非递归方法； </p>
<p><strong>方法一</strong>：设置<code>pre</code>和<code>cur</code>两个指针，通过判断<code>pre</code>和<code>cur</code>两个指针的属性和关系进行遍历；</p>
<p><strong>方法二</strong>：类似于先序遍历的非递归遍历，将节点按照<code>根节点-&gt;右子节点-&gt;左子节点</code>的顺序放到vector中，最后将vector逆序返回即可；</p>
</blockquote>
<h3 id="代码-10"><a href="#代码-10" class="headerlink" title="代码"></a>代码</h3><p><strong>方法一：</strong><br><figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">class Solution </div><div class="line">&#123;</div><div class="line">public:</div><div class="line">    vector&lt;int&gt; postorderTraversal(TreeNode* root) </div><div class="line">    &#123;</div><div class="line">    	vector&lt;int&gt; res;</div><div class="line">    	<span class="keyword">if</span>(root == NULL) <span class="keyword">return</span> res;</div><div class="line">        stack&lt;TreeNode*&gt; s;</div><div class="line">        TreeNode *pre = NULL;</div><div class="line">        TreeNode *cur = NULL;</div><div class="line">        s.push(root);</div><div class="line">        while(!s.empty())</div><div class="line">        &#123;</div><div class="line">        	cur = s.<span class="built_in">top</span>();</div><div class="line">        	<span class="keyword">if</span>((!cur-&gt;<span class="built_in">left</span> &amp;&amp; !cur-&gt;<span class="built_in">right</span>) </div><div class="line">        		|<span class="type">| (pre</span> &amp;&amp; (cur-&gt;<span class="built_in">left</span> == pre |<span class="type">| cur</span>-&gt;<span class="built_in">right</span> == pre)))</div><div class="line">        	&#123;</div><div class="line">        		res.push_back(cur-&gt;val);</div><div class="line">        		s.pop();</div><div class="line">        		pre = cur;</div><div class="line">        	&#125;</div><div class="line">        	<span class="keyword">else</span></div><div class="line">        	&#123;</div><div class="line">        	    <span class="keyword">if</span>(cur-&gt;<span class="built_in">right</span>) s.push(cur-&gt;<span class="built_in">right</span>);</div><div class="line">        		<span class="keyword">if</span>(cur-&gt;<span class="built_in">left</span>) s.push(cur-&gt;<span class="built_in">left</span>);</div><div class="line">        	&#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>方法二：</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span></div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; postorderTraversal(TreeNode* root) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</div><div class="line">        <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span> res;</div><div class="line">        <span class="built_in">stack</span>&lt;TreeNode*&gt; s;</div><div class="line">        TreeNode *cur = <span class="literal">NULL</span>;</div><div class="line">        s.push(root);</div><div class="line">        <span class="keyword">while</span>(!s.empty())</div><div class="line">        &#123;</div><div class="line">            cur = s.top();</div><div class="line">            s.pop();</div><div class="line">            res.push_back(cur-&gt;val);</div><div class="line">            <span class="keyword">if</span>(cur-&gt;left) s.push(cur-&gt;left);</div><div class="line">            <span class="keyword">if</span>(cur-&gt;right) s.push(cur-&gt;right);</div><div class="line">        &#125;</div><div class="line">        reverse(res.begin(), res.end());</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h2 id="173-Binary-Search-Tree-Iterator"><a href="#173-Binary-Search-Tree-Iterator" class="headerlink" title="173. Binary Search Tree Iterator"></a>173. Binary Search Tree Iterator</h2><h3 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<p>就是利用二叉树的中序遍历不断获取数据即可，二叉搜索树的中序遍历即为从小到大的有序遍历；</p>
</blockquote>
<h3 id="代码-11"><a href="#代码-11" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BSTIterator</span> </span></div><div class="line">&#123;</div><div class="line">	<span class="built_in">stack</span>&lt;TreeNode*&gt; s;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    BSTIterator(TreeNode *root) </div><div class="line">    &#123;</div><div class="line">        pushAll(root);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/** @return whether we have a next smallest number */</span></div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">hasNext</span><span class="params">()</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> !s.empty();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/** @return the next smallest number */</span></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">next</span><span class="params">()</span> </span></div><div class="line">    &#123;</div><div class="line">     	TreeNode* temp = s.top();</div><div class="line">     	s.pop();</div><div class="line">     	pushAll(temp-&gt;right);</div><div class="line">     	<span class="keyword">return</span> temp-&gt;val;   </div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">pushAll</span><span class="params">(TreeNode* node)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">for</span>(; node != <span class="literal">NULL</span>; s.push(node), node = node-&gt;left);</div><div class="line">	&#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="199-Binary-Tree-Right-Side-View"><a href="#199-Binary-Tree-Right-Side-View" class="headerlink" title="199. Binary Tree Right Side View"></a>199. Binary Tree Right Side View</h2><h3 id="解题思路-5"><a href="#解题思路-5" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<p><strong>方法一</strong>：使用一个<code>queue</code>去遍历每一层的节点，将最后一个节点保存到结果中；</p>
<p><strong>方法二</strong>：使用类似于先序遍历的方法，每次都先进行右子节点的操作，从而保证每一层最开始访问的节点必定是该层最右边的节点，且只将该节点保存到结果中；</p>
</blockquote>
<h3 id="代码-12"><a href="#代码-12" class="headerlink" title="代码"></a>代码</h3><p><strong>方法一</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span></div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; rightSideView(TreeNode* root) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</div><div class="line">        <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span> res;</div><div class="line">        <span class="built_in">queue</span>&lt;TreeNode*&gt; que;</div><div class="line">        TreeNode* cur = <span class="literal">NULL</span>;</div><div class="line">        que.push(root);</div><div class="line">        <span class="keyword">while</span>(!que.empty())</div><div class="line">        &#123;</div><div class="line">        	<span class="keyword">int</span> len = que.size();</div><div class="line">        	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</div><div class="line">        	&#123;</div><div class="line">        		cur = que.front();</div><div class="line">        		que.pop();</div><div class="line">        		<span class="keyword">if</span>(cur-&gt;left) que.push(cur-&gt;left);</div><div class="line">        		<span class="keyword">if</span>(cur-&gt;right) que.push(cur-&gt;right);</div><div class="line">        	&#125;</div><div class="line">        	res.push_back(cur-&gt;val);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>方法二</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span></div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; rightSideView(TreeNode* root) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</div><div class="line">        <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span> res;</div><div class="line">        solve(root, res, <span class="number">0</span>);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(TreeNode* root, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;res, <span class="keyword">int</span> depth)</span></span></div><div class="line">    &#123;</div><div class="line">    	<span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span>;</div><div class="line">    	<span class="keyword">if</span>(depth == res.size()) res.push_back(root-&gt;val);</div><div class="line">    	solve(root-&gt;right, res, depth+<span class="number">1</span>);</div><div class="line">    	solve(root-&gt;left, res, depth+<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h2 id="222-Count-Complete-Tree-Nodes"><a href="#222-Count-Complete-Tree-Nodes" class="headerlink" title="222. Count Complete Tree Nodes"></a>222. Count Complete Tree Nodes</h2><h3 id="解题思路-6"><a href="#解题思路-6" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<p>首先获取整个二叉树的高度为<code>h</code>，如果右子树的高度为<code>h-1</code>，则左子树是一个完全二叉树，反之右子树是一个完全二叉树。对于完全二叉树我们很容易计算他的节点数量，然后使用递归解决。</p>
</blockquote>
<h3 id="代码-13"><a href="#代码-13" class="headerlink" title="代码"></a>代码</h3><figure class="highlight zephir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span></div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">int</span> countNodes(TreeNode* root) </div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> h = getHeight(root);</div><div class="line">        <span class="keyword">return</span> h &lt; <span class="number">0</span> ? <span class="number">0</span> : getHeight(root-&gt;right) == h<span class="number">-1</span> ? (<span class="number">1</span>&lt;&lt;h) + countNodes(root-&gt;right) : (<span class="number">1</span>&lt;&lt;h<span class="number">-1</span>) + countNodes(root-&gt;left);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> getHeight(TreeNode* root)</div><div class="line">    &#123;</div><div class="line">    	<span class="keyword">return</span> root == <span class="keyword">NULL</span> ? <span class="number">-1</span> : <span class="number">1</span> + getHeight(root-&gt;left);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="226-Invert-Binary-Tree"><a href="#226-Invert-Binary-Tree" class="headerlink" title="226. Invert Binary Tree"></a>226. Invert Binary Tree</h2><h3 id="解题思路-7"><a href="#解题思路-7" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<p><strong>方法一</strong>：递归，分别计算左右子节点的invert，然后将左右子节点交换完成invert；</p>
<p><strong>方法二</strong>：使用栈结构，利用栈结构的FIFO性质，实现节点的反转，同时对每个节点都要交换左右子节点；</p>
</blockquote>
<h3 id="代码-14"><a href="#代码-14" class="headerlink" title="代码"></a>代码</h3><p><strong>方法一</strong><br><figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">class Solution </div><div class="line">&#123;</div><div class="line">public:</div><div class="line">    TreeNode* invertTree(TreeNode* root) </div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(root == NULL) <span class="keyword">return</span> NULL;</div><div class="line">    	root-&gt;<span class="built_in">left</span> = invertTree(root-&gt;<span class="built_in">left</span>);</div><div class="line">    	root-&gt;<span class="built_in">right</span> = invertTree(root-&gt;<span class="built_in">right</span>);</div><div class="line">    	<span class="built_in">swap</span>(root-&gt;<span class="built_in">left</span>, root-&gt;<span class="built_in">right</span>);</div><div class="line">        <span class="keyword">return</span> root;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>方法二</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span></div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    TreeNode* invertTree(TreeNode* root) </div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(root == <span class="keyword">NULL</span>) <span class="keyword">return</span> <span class="keyword">NULL</span>;</div><div class="line">    	stack&lt;TreeNode*&gt; s;</div><div class="line">    	s.push(root);</div><div class="line">    	<span class="keyword">while</span>(!s.<span class="keyword">empty</span>())</div><div class="line">    	&#123;</div><div class="line">    		TreeNode* cur = s.top();</div><div class="line">    		s.pop();</div><div class="line">    		<span class="keyword">if</span>(cur)</div><div class="line">    		&#123;</div><div class="line">	    		s.push(cur-&gt;left);</div><div class="line">	    		s.push(cur-&gt;right);</div><div class="line">	    		swap(cur-&gt;left, cur-&gt;right);</div><div class="line">	    	&#125;</div><div class="line">    	&#125;</div><div class="line">    	<span class="keyword">return</span> root;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h2 id="230-Kth-Smallest-Element-in-a-BST"><a href="#230-Kth-Smallest-Element-in-a-BST" class="headerlink" title="230. Kth Smallest Element in a BST"></a>230. Kth Smallest Element in a BST</h2><h3 id="解题思路-8"><a href="#解题思路-8" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<p>考察树的中序遍历，使用递归遍历和非递归遍历解决；</p>
</blockquote>
<h3 id="代码-15"><a href="#代码-15" class="headerlink" title="代码"></a>代码</h3><p><strong>递归方法</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span></div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">	<span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">	<span class="keyword">int</span> res;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">kthSmallest</span><span class="params">(TreeNode* root, <span class="keyword">int</span> k)</span> </span></div><div class="line">    &#123;</div><div class="line">    	inOrder(root, k);</div><div class="line">    	<span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(TreeNode* root, <span class="keyword">int</span> k)</span></span></div><div class="line">    &#123;</div><div class="line">    	<span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span>;</div><div class="line">    	inOrder(root-&gt;left, k);</div><div class="line">    	<span class="keyword">if</span>(++count == k)</div><div class="line">    	&#123;</div><div class="line">    		res = root-&gt;val;</div><div class="line">    		<span class="keyword">return</span>;</div><div class="line">    	&#125;</div><div class="line">    	inOrder(root-&gt;right, k);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>非递归</strong><br><figure class="highlight zephir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span></div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">int</span> kthSmallest(TreeNode* root, <span class="keyword">int</span> k) </div><div class="line">    &#123;</div><div class="line">    	stack&lt;TreeNode*&gt; s;</div><div class="line">    	<span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">    	TreeNode* p = root;</div><div class="line">    	<span class="keyword">while</span>(!s.<span class="keyword">empty</span>() || p)</div><div class="line">    	&#123;</div><div class="line">    		<span class="keyword">while</span>(p)</div><div class="line">    		&#123;</div><div class="line">    			s.push(p);</div><div class="line">    			p = p-&gt;left;</div><div class="line">    		&#125;</div><div class="line">    		p = s.top();</div><div class="line">    		s.pop();</div><div class="line">    		<span class="keyword">if</span>(++count == k)</div><div class="line">    			<span class="keyword">return</span> p-&gt;val;</div><div class="line">    		p = p-&gt;right;</div><div class="line">    	&#125;</div><div class="line">    	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h2 id="235-Lowest-Common-Ancestor-of-a-Binary-Search-Tree"><a href="#235-Lowest-Common-Ancestor-of-a-Binary-Search-Tree" class="headerlink" title="235. Lowest Common Ancestor of a Binary Search Tree"></a>235. Lowest Common Ancestor of a Binary Search Tree</h2><h3 id="解题思路-9"><a href="#解题思路-9" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<p>因为是二叉搜索树，所以需要判断<code>p</code>和<code>q</code>两个节点的值与<code>root</code>节点的关系，如果在<code>root</code>两边或者直接等于<code>root</code>则祖先节点就是<code>root</code>，否则，祖先节点就有可能<code>root-&gt;left</code>和<code>root-&gt;right</code>两个中再次求取；</p>
</blockquote>
<h3 id="代码-16"><a href="#代码-16" class="headerlink" title="代码"></a>代码</h3><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> <span class="type">Solution</span> </div><div class="line">&#123;</div><div class="line">public:</div><div class="line">    <span class="type">TreeNode</span>* lowestCommonAncestor(<span class="type">TreeNode</span>* root, <span class="type">TreeNode</span>* p, <span class="type">TreeNode</span>* q) </div><div class="line">    &#123;</div><div class="line">		<span class="keyword">while</span>((root-&gt;<span class="keyword">val</span> - p-&gt;<span class="keyword">val</span>) * (root-&gt;<span class="keyword">val</span> - q-&gt;<span class="keyword">val</span>) &gt; <span class="number">0</span>)</div><div class="line">			root = p-&gt;<span class="keyword">val</span> &lt; root-&gt;<span class="keyword">val</span> ? root-&gt;left : root-&gt;right;</div><div class="line">        return root;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="236-Lowest-Common-Ancestor-of-a-Binary-Tree"><a href="#236-Lowest-Common-Ancestor-of-a-Binary-Tree" class="headerlink" title="236. Lowest Common Ancestor of a Binary Tree"></a>236. Lowest Common Ancestor of a Binary Tree</h2><h3 id="解题思路-10"><a href="#解题思路-10" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<p>有点类似分治的思路，如果<code>root == p || root == q</code>直接返回<code>root</code>；</p>
<p>分别求取<code>lowestCommonAncestor(root-&gt;left, p, q)</code>和<code>lowestCommonAncestor(root-&gt;right, p, q);</code>，如果结果为<code>NULL</code>则证明<code>p</code>和<code>q</code>都不在该子树中，反之，则至少有一个在该子树中，然后继续讨论即可；</p>
</blockquote>
<h3 id="代码-17"><a href="#代码-17" class="headerlink" title="代码"></a>代码</h3><figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">class Solution </div><div class="line">&#123;</div><div class="line">public:</div><div class="line">    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) </div><div class="line">    &#123;</div><div class="line">    	<span class="keyword">if</span>(!root |<span class="type">| root</span> == p |<span class="type">| root</span> == q) <span class="keyword">return</span> root;</div><div class="line">    	TreeNode* <span class="built_in">left</span> = lowestCommonAncestor(root-&gt;<span class="built_in">left</span>, p, q);</div><div class="line">    	TreeNode* <span class="built_in">right</span> = lowestCommonAncestor(root-&gt;<span class="built_in">right</span>, p, q);</div><div class="line">    	<span class="keyword">return</span> !<span class="built_in">left</span> ? <span class="built_in">right</span> : !<span class="built_in">right</span> ? <span class="built_in">left</span> : root;   </div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="257-Binary-Tree-Paths"><a href="#257-Binary-Tree-Paths" class="headerlink" title="257. Binary Tree Paths"></a>257. Binary Tree Paths</h2><h3 id="解题思路-11"><a href="#解题思路-11" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<p>使用递归的思路，遍历每一条路径；</p>
</blockquote>
<h3 id="代码-18"><a href="#代码-18" class="headerlink" title="代码"></a>代码</h3><figure class="highlight sml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">class <span class="type">Solution</span> </div><div class="line">&#123;</div><div class="line">public:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; binaryTreePaths(<span class="type">TreeNode</span>* root) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; res;</div><div class="line">        <span class="keyword">if</span>(root == <span class="type">NULL</span>) return res;</div><div class="line">        dfs(res, root, <span class="string">""</span>);</div><div class="line">        return res;</div><div class="line">    &#125;</div><div class="line">    void dfs(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp;res, <span class="type">TreeNode</span>* root, <span class="built_in">string</span> str)</div><div class="line">    &#123;</div><div class="line">    	<span class="keyword">if</span>(!root-&gt;left &amp;&amp; !root-&gt;right)</div><div class="line">    	&#123;</div><div class="line">    		res.push_back(str+to_string(root-&gt;<span class="keyword">val</span>));</div><div class="line">    		return;</div><div class="line">    	&#125;</div><div class="line">    	<span class="keyword">if</span>(root-&gt;left) dfs(res, root-&gt;left, str+to_string(root-&gt;<span class="keyword">val</span>)+<span class="string">"-&gt;"</span>);</div><div class="line">    	<span class="keyword">if</span>(root-&gt;right) dfs(res, root-&gt;right, str+to_string(root-&gt;<span class="keyword">val</span>)+<span class="string">"-&gt;"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="297-Serialize-and-Deserialize-Binary-Tree"><a href="#297-Serialize-and-Deserialize-Binary-Tree" class="headerlink" title="297. Serialize and Deserialize Binary Tree"></a>297. Serialize and Deserialize Binary Tree</h2><h3 id="解题思路-12"><a href="#解题思路-12" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<p>详细思路请参考此<a href="https://discuss.leetcode.com/category/375/serialize-and-deserialize-binary-tree" target="_blank" rel="external">链接</a>！！</p>
</blockquote>
<h3 id="代码-19"><a href="#代码-19" class="headerlink" title="代码"></a>代码</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Codec</span> </span></div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">// Encodes a tree to a single string.</span></div><div class="line">    string serialize(TreeNode* root) </div><div class="line">    &#123;</div><div class="line">        ostringstream <span class="keyword">out</span>;</div><div class="line">        myserialize(root, <span class="keyword">out</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">out</span>.str();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// Decodes your encoded data to tree.</span></div><div class="line">    TreeNode* deserialize(string <span class="keyword">data</span>) </div><div class="line">    &#123;</div><div class="line">        istringstream <span class="keyword">is</span>(<span class="keyword">data</span>);</div><div class="line">        <span class="keyword">return</span> mydeserialize(<span class="keyword">is</span>);</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    void myserialize(TreeNode *root, ostringstream &amp;<span class="keyword">out</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(root)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">out</span> &lt;&lt; root-&gt;<span class="keyword">val</span> &lt;&lt; <span class="string">" "</span>;</div><div class="line">            myserialize(root-&gt;left, <span class="keyword">out</span>);</div><div class="line">            myserialize(root-&gt;right, <span class="keyword">out</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">out</span> &lt;&lt; <span class="string">"# "</span>;</div><div class="line">    &#125;</div><div class="line">    TreeNode* mydeserialize(istringstream &amp;<span class="keyword">data</span>)</div><div class="line">    &#123;</div><div class="line">        string <span class="keyword">val</span>;</div><div class="line">        <span class="keyword">data</span> &gt;&gt; <span class="keyword">val</span>;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">val</span> == <span class="string">"#"</span>) <span class="keyword">return</span> NULL;</div><div class="line">        TreeNode *root = new TreeNode(stoi(<span class="keyword">val</span>));</div><div class="line">        root-&gt;left = mydeserialize(<span class="keyword">data</span>);</div><div class="line">        root-&gt;right = mydeserialize(<span class="keyword">data</span>);</div><div class="line">        <span class="keyword">return</span> root;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="337-House-Robber-III"><a href="#337-House-Robber-III" class="headerlink" title="337. House Robber III"></a>337. House Robber III</h2><h3 id="解题思路-13"><a href="#解题思路-13" class="headerlink" title="解题思路"></a>解题思路</h3><p>详细解析请看这个<a href="https://discuss.leetcode.com/topic/39834/step-by-step-tackling-of-the-problem/3" target="_blank" rel="external">链接</a>！！</p>
<h3 id="代码-20"><a href="#代码-20" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span></div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">rob</span><span class="params">(TreeNode* root)</span> </span></div><div class="line">    &#123;</div><div class="line">    	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res = robSub(root);</div><div class="line">    	<span class="keyword">return</span> max(res[<span class="number">0</span>], res[<span class="number">1</span>]);    </div><div class="line">    &#125;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; robSub(TreeNode* root)</div><div class="line">    &#123;</div><div class="line">    	<span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">2</span>, <span class="number">0</span>);</div><div class="line">    	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; left = robSub(root-&gt;left);</div><div class="line">    	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; right = robSub(root-&gt;right);</div><div class="line">    	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res(<span class="number">2</span>, <span class="number">0</span>);</div><div class="line">    	res[<span class="number">0</span>] = max(left[<span class="number">0</span>], left[<span class="number">1</span>]) + max(right[<span class="number">0</span>], right[<span class="number">1</span>]);</div><div class="line">    	res[<span class="number">1</span>] = root-&gt;val + left[<span class="number">0</span>] + right[<span class="number">0</span>];</div><div class="line">    	<span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="404-Sum-of-Left-Leaves"><a href="#404-Sum-of-Left-Leaves" class="headerlink" title="404. Sum of Left Leaves"></a>404. Sum of Left Leaves</h2><h3 id="解题思路-14"><a href="#解题思路-14" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<p><strong>递归方法</strong>：如果左子节点是左叶子节点，则加和保存，否则迭代计算左子节点的<code>sumOfLeftLeaves</code>，对于右子节点，直接迭代计算<code>sumOfLeftLeaves</code>；</p>
<p><strong>非递归方法</strong>：使用一个<code>stack</code>对二叉树进行遍历，对于每个节点，判断其左子节点是否是叶子节点，如果是就加和保存，否则入栈，对于右子节点，只要不是叶子节点就统统入栈。</p>
</blockquote>
<h3 id="代码-21"><a href="#代码-21" class="headerlink" title="代码"></a>代码</h3><p><strong>递归</strong><br><figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">class Solution </div><div class="line">&#123;</div><div class="line">public:</div><div class="line">	int res = <span class="number">0</span>;</div><div class="line">    int sumOfLeftLeaves(TreeNode* root) </div><div class="line">    &#123;</div><div class="line">    	<span class="keyword">if</span>(root == NULL) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    	int res = <span class="number">0</span>;</div><div class="line">    	<span class="keyword">if</span>(root-&gt;<span class="built_in">left</span>)</div><div class="line">    	&#123;</div><div class="line">    		<span class="keyword">if</span>(!root-&gt;<span class="built_in">left</span>-&gt;<span class="built_in">left</span> &amp;&amp; !root-&gt;<span class="built_in">left</span>-&gt;<span class="built_in">right</span>)</div><div class="line">    			res += root-&gt;<span class="built_in">left</span>-&gt;val;</div><div class="line">    		<span class="keyword">else</span></div><div class="line">    			res += sumOfLeftLeaves(root-&gt;<span class="built_in">left</span>);</div><div class="line">    	&#125;</div><div class="line">    	res += sumOfLeftLeaves(root-&gt;<span class="built_in">right</span>);</div><div class="line">    	<span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>非递归</strong><br><figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">class Solution </div><div class="line">&#123;</div><div class="line">public:</div><div class="line">    int sumOfLeftLeaves(TreeNode* root) </div><div class="line">    &#123;</div><div class="line">    	int res = <span class="number">0</span>;</div><div class="line">    	<span class="keyword">if</span>(root == NULL) <span class="keyword">return</span> res;</div><div class="line">    	stack&lt;TreeNode*&gt; s;</div><div class="line">    	s.push(root);</div><div class="line">    	while(!s.empty())</div><div class="line">    	&#123;</div><div class="line">    		TreeNode* p = s.<span class="built_in">top</span>();</div><div class="line">    		s.pop();</div><div class="line">    		<span class="keyword">if</span>(p-&gt;<span class="built_in">left</span>)</div><div class="line">    		&#123;</div><div class="line">    			<span class="keyword">if</span>(!p-&gt;<span class="built_in">left</span>-&gt;<span class="built_in">left</span> &amp;&amp; !p-&gt;<span class="built_in">left</span>-&gt;<span class="built_in">right</span>)</div><div class="line">    				res += p-&gt;<span class="built_in">left</span>-&gt;val;</div><div class="line">    			<span class="keyword">else</span></div><div class="line">    				s.push(p-&gt;<span class="built_in">left</span>);</div><div class="line">    		&#125;</div><div class="line">    		<span class="keyword">if</span>(p-&gt;<span class="built_in">right</span>)</div><div class="line">    		&#123;</div><div class="line">    			<span class="keyword">if</span>(p-&gt;<span class="built_in">right</span>-&gt;<span class="built_in">left</span> |<span class="type">| p</span>-&gt;<span class="built_in">right</span>-&gt;<span class="built_in">right</span>)</div><div class="line">    				s.push(p-&gt;<span class="built_in">right</span>);</div><div class="line">    		&#125;</div><div class="line">    	&#125;</div><div class="line">    	<span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h2 id="449-Serialize-and-Deserialize-BST"><a href="#449-Serialize-and-Deserialize-BST" class="headerlink" title="449. Serialize and Deserialize BST"></a>449. Serialize and Deserialize BST</h2><h3 id="解题思路-15"><a href="#解题思路-15" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<p>因为是一个二叉搜索树，所以通过获取其前序遍历的数值组合就可以唯一的重新构建出原来的树结构，这里使用了<code>iostringstream</code>，方便进行序列化和反序列化。</p>
</blockquote>
<h3 id="代码-22"><a href="#代码-22" class="headerlink" title="代码"></a>代码</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Codec</span> </span></div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line"></div><div class="line">    <span class="comment">// Encodes a tree to a single string.</span></div><div class="line">    string serialize(TreeNode* root) </div><div class="line">    &#123;</div><div class="line">        ostringstream <span class="keyword">out</span>;</div><div class="line">        mySerialize(root, <span class="keyword">out</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">out</span>.str();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Decodes your encoded data to tree.</span></div><div class="line">    TreeNode* deserialize(string <span class="keyword">data</span>) </div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">data</span> == <span class="string">""</span>) <span class="keyword">return</span> NULL;</div><div class="line">        istringstream <span class="keyword">in</span>(<span class="keyword">data</span>);</div><div class="line">        <span class="keyword">return</span> myDeserialize(<span class="keyword">in</span>);</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">	void mySerialize(TreeNode* root, ostringstream &amp;<span class="keyword">out</span>)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(root == NULL) <span class="keyword">return</span>;</div><div class="line">		<span class="keyword">out</span> &lt;&lt; root-&gt;<span class="keyword">val</span> &lt;&lt; <span class="string">" "</span>;</div><div class="line">		mySerialize(root-&gt;left, <span class="keyword">out</span>);</div><div class="line">		mySerialize(root-&gt;right, <span class="keyword">out</span>);</div><div class="line">	&#125;</div><div class="line">	TreeNode* myDeserialize(istringstream &amp;<span class="keyword">in</span>)</div><div class="line">	&#123;</div><div class="line">		string <span class="keyword">val</span>;</div><div class="line">		<span class="keyword">in</span> &gt;&gt; <span class="keyword">val</span>;</div><div class="line">		TreeNode *root = new TreeNode(stoi(<span class="keyword">val</span>));</div><div class="line">		<span class="keyword">while</span>(<span class="keyword">in</span> &gt;&gt; <span class="keyword">val</span>)</div><div class="line">			buildTree(root, stoi(<span class="keyword">val</span>));</div><div class="line">		<span class="keyword">return</span> root;</div><div class="line">	&#125;</div><div class="line">	void buildTree(TreeNode* root, int n)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(root-&gt;<span class="keyword">val</span> &gt; n)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">if</span>(root-&gt;left == NULL)</div><div class="line">				root-&gt;left = new TreeNode(n);</div><div class="line">			<span class="keyword">else</span></div><div class="line">				buildTree(root-&gt;left, n);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span></div><div class="line">		&#123;</div><div class="line">			<span class="keyword">if</span>(root-&gt;right == NULL)</div><div class="line">				root-&gt;right = new TreeNode(n);</div><div class="line">			<span class="keyword">else</span></div><div class="line">				buildTree(root-&gt;right, n);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="450-Delete-Node-in-a-BST"><a href="#450-Delete-Node-in-a-BST" class="headerlink" title="450. Delete Node in a BST"></a>450. Delete Node in a BST</h2><h3 id="解题思路-16"><a href="#解题思路-16" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<p>只有当<code>root-&gt;val == key</code>的时候才执行删除操作，否则根据<code>key</code>的大小在左右子树中执行删除操作。</p>
<p>删除过程中，如果是叶子节点则直接返回<code>NULL</code>，否则取其左右子节点中不为<code>NULL</code>的作为新的根节点返回。</p>
</blockquote>
<h3 id="代码-23"><a href="#代码-23" class="headerlink" title="代码"></a>代码</h3><figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">class Solution </div><div class="line">&#123;</div><div class="line">public:</div><div class="line">    TreeNode* deleteNode(TreeNode* root, int key) </div><div class="line">    &#123;</div><div class="line">    	<span class="keyword">if</span>(root == NULL) <span class="keyword">return</span> NULL;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(root-&gt;val == key)</div><div class="line">        &#123;</div><div class="line">        	<span class="keyword">if</span>(root-&gt;<span class="built_in">right</span>)</div><div class="line">        	&#123;</div><div class="line">        		TreeNode* p = root-&gt;<span class="built_in">right</span>;</div><div class="line">        		while(p-&gt;<span class="built_in">left</span>) p = p-&gt;<span class="built_in">left</span>;</div><div class="line">        		p-&gt;<span class="built_in">left</span> = root-&gt;<span class="built_in">left</span>;</div><div class="line">        		<span class="keyword">return</span> root-&gt;<span class="built_in">right</span>;</div><div class="line">        	&#125;</div><div class="line">        	<span class="keyword">else</span> <span class="keyword">if</span>(root-&gt;<span class="built_in">left</span>)</div><div class="line">        		<span class="keyword">return</span> root-&gt;<span class="built_in">left</span>;</div><div class="line">        	<span class="keyword">else</span> <span class="keyword">return</span> NULL;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(root-&gt;val &gt; key)</div><div class="line">        	root-&gt;<span class="built_in">left</span> = deleteNode(root-&gt;<span class="built_in">left</span>, key);</div><div class="line">        <span class="keyword">if</span>(root-&gt;val &lt; key)</div><div class="line">        	root-&gt;<span class="built_in">right</span> = deleteNode(root-&gt;<span class="built_in">right</span>, key);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> root;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文包含如下题目：&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/flatten-binary-tree-to-linked-list/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;114. Flatten Binary Tree to Linked List&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/populating-next-right-pointers-in-each-node/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;116. Populating Next Right Pointers in Each Node&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/populating-next-right-pointers-in-each-node-ii/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;117. Populating Next Right Pointers in Each Node II&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/binary-tree-maximum-path-sum/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;124. Binary Tree Maximum Path Sum&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/sum-root-to-leaf-numbers/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;129. Sum Root to Leaf Numbers&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/binary-tree-preorder-traversal/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;144. Binary Tree Preorder Traversal&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/binary-tree-postorder-traversal/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;145. Binary Tree Postorder Traversal&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/binary-search-tree-iterator/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;173. Binary Search Tree Iterator&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/binary-tree-right-side-view/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;199. Binary Tree Right Side View&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/count-complete-tree-nodes/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;222. Count Complete Tree Nodes&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/invert-binary-tree/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;226. Invert Binary Tree&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/kth-smallest-element-in-a-bst/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;230. Kth Smallest Element in a BST&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;235. Lowest Common Ancestor of a Binary Search Tree&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;236. Lowest Common Ancestor of a Binary Tree&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/binary-tree-paths/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;257. Binary Tree Paths&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/serialize-and-deserialize-binary-tree/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;297. Serialize and Deserialize Binary Tree&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/house-robber-iii/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;337. House Robber III&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/sum-of-left-leaves/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;404. Sum of Left Leaves&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/serialize-and-deserialize-bst/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;449. Serialize and Deserialize BST&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/delete-node-in-a-bst/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;450. Delete Node in a BST&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://haoyuanliu.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://haoyuanliu.github.io/tags/LeetCode/"/>
    
      <category term="Tree" scheme="http://haoyuanliu.github.io/tags/Tree/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode Tree I</title>
    <link href="http://haoyuanliu.github.io/2017/01/05/LeetCode-Tree-I/"/>
    <id>http://haoyuanliu.github.io/2017/01/05/LeetCode-Tree-I/</id>
    <published>2017-01-05T11:01:56.000Z</published>
    <updated>2017-07-01T08:19:25.159Z</updated>
    
    <content type="html"><![CDATA[<p>本文包含的题目有：</p>
<p><a href="https://leetcode.com/problems/binary-tree-inorder-traversal/" target="_blank" rel="external">94. Binary Tree Inorder Traversal</a><br><a href="https://leetcode.com/problems/unique-binary-search-trees-ii/" target="_blank" rel="external">95. Unique Binary Search Trees II</a><br><a href="https://leetcode.com/problems/unique-binary-search-trees/" target="_blank" rel="external">96. Unique Binary Search Trees</a><br><a href="https://leetcode.com/problems/validate-binary-search-tree/" target="_blank" rel="external">98. Validate Binary Search Tree</a><br><a href="https://leetcode.com/problems/recover-binary-search-tree/" target="_blank" rel="external">99. Recover Binary Search Tree</a><br><a href="https://leetcode.com/problems/same-tree/" target="_blank" rel="external">100. Same Tree</a><br><a href="https://leetcode.com/problems/symmetric-tree/" target="_blank" rel="external">101. Symmetric Tree</a><br><a href="https://leetcode.com/problems/binary-tree-level-order-traversal/" target="_blank" rel="external">102. Binary Tree Level Order Traversal</a><br><a href="https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/" target="_blank" rel="external">103. Binary Tree Zigzag Level Order Traversal</a><br><a href="https://leetcode.com/problems/maximum-depth-of-binary-tree/" target="_blank" rel="external">104. Maximum Depth of Binary Tree</a><br><a href="https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/" target="_blank" rel="external">105. Construct Binary Tree from Preorder and Inorder Traversal</a><br><a href="https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/" target="_blank" rel="external">106. Construct Binary Tree from Inorder and Postorder Traversal</a><br><a href="https://leetcode.com/problems/binary-tree-level-order-traversal-ii/" target="_blank" rel="external">107. Binary Tree Level Order Traversal II</a><br><a href="https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/" target="_blank" rel="external">108. Convert Sorted Array to Binary Search Tree</a><br><a href="https://leetcode.com/problems/balanced-binary-tree/" target="_blank" rel="external">110. Balanced Binary Tree</a><br><a href="https://leetcode.com/problems/minimum-depth-of-binary-tree/" target="_blank" rel="external">111. Minimum Depth of Binary Tree</a><br><a href="https://leetcode.com/problems/path-sum/" target="_blank" rel="external">112. Path Sum</a><br><a href="https://leetcode.com/problems/path-sum-ii/" target="_blank" rel="external">113. Path Sum II</a><br><a href="https://leetcode.com/problems/path-sum-iii/" target="_blank" rel="external">437. Path Sum III</a></p>
<a id="more"></a>
<h2 id="94-Binary-Tree-Inorder-Traversal"><a href="#94-Binary-Tree-Inorder-Traversal" class="headerlink" title="94. Binary Tree Inorder Traversal"></a>94. Binary Tree Inorder Traversal</h2><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>二叉树的中序遍历；</li>
</ul>
</blockquote>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; inorderTraversal(TreeNode* root)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</div><div class="line">        midOrder(res, root);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">midOrder</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;res, TreeNode *root)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(root)</div><div class="line">        &#123;</div><div class="line">            midOrder(res, root-&gt;left);</div><div class="line">            res.push_back(root-&gt;val);</div><div class="line">            midOrder(res, root-&gt;right);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="95-Unique-Binary-Search-Trees-II"><a href="#95-Unique-Binary-Search-Trees-II" class="headerlink" title="95. Unique Binary Search Trees II"></a>95. Unique Binary Search Trees II</h2><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>使用分治的方法解决；</li>
</ul>
</blockquote>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;TreeNode*&gt; generateTrees(<span class="keyword">int</span> n)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;TreeNode*&gt; res;</div><div class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">        <span class="keyword">return</span> getTree(<span class="number">1</span>, n);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">vector</span>&lt;TreeNode*&gt; getTree(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;TreeNode*&gt; res;</div><div class="line">        <span class="keyword">if</span>(start &gt; end)</div><div class="line">        &#123;</div><div class="line">            res.push_back(<span class="literal">NULL</span>);</div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(start == end)</div><div class="line">        &#123;</div><div class="line">            res.push_back(<span class="keyword">new</span> TreeNode(start));</div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = start; i &lt;= end; ++i)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">vector</span>&lt;TreeNode*&gt; left = getTree(start, i<span class="number">-1</span>);</div><div class="line">            <span class="built_in">vector</span>&lt;TreeNode*&gt; right = getTree(i+<span class="number">1</span>, end);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> l : left)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> r : right)</div><div class="line">                &#123;</div><div class="line">                    TreeNode* root = <span class="keyword">new</span> TreeNode(i);</div><div class="line">                    root-&gt;left = l;</div><div class="line">                    root-&gt;right = r;</div><div class="line">                    res.push_back(root);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="96-Unique-Binary-Search-Trees"><a href="#96-Unique-Binary-Search-Trees" class="headerlink" title="96. Unique Binary Search Trees"></a>96. Unique Binary Search Trees</h2><h3 id="解题思路I"><a href="#解题思路I" class="headerlink" title="解题思路I"></a>解题思路I</h3><blockquote>
<ul>
<li>使用DP动态规划，每添加一个新节点，首先保持已有的树结构不变，则新节点只有两个位置可以放置，从而有：<code>res[i] += res[i-1] * 2</code>;</li>
<li>如果将已有的树结构拆开，则只能拆成两个部分，前一部分的右子节点为新节点，新节点的左子节点为右半部分，从而有：<code>res[i] += res[j] * res[i-j-1]</code>；</li>
</ul>
</blockquote>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span></div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numTrees</span><span class="params">(<span class="keyword">int</span> n)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res(n+<span class="number">1</span>, <span class="number">0</span>);</div><div class="line">        res[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">        res[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">        res[<span class="number">2</span>] = <span class="number">2</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= n; ++i)</div><div class="line">        &#123;</div><div class="line">        	res[i] += res[i<span class="number">-1</span>] * <span class="number">2</span>;</div><div class="line">        	<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i<span class="number">-1</span>; ++j)</div><div class="line">        	&#123;</div><div class="line">        		res[i] += res[j] * res[i-j<span class="number">-1</span>];</div><div class="line">        	&#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res[n];</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="解题思路II"><a href="#解题思路II" class="headerlink" title="解题思路II"></a>解题思路II</h3><blockquote>
<ul>
<li>继续延续上述DP的思路，将<code>res[i-1] * 2</code>转变为<code>res[0] * res[i-1]</code> + <code>res[i-1] * res[0]</code>，然后更新原来的代码，更加简洁；</li>
</ul>
</blockquote>
<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span></div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numTrees</span><span class="params">(<span class="keyword">int</span> n)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res(n+<span class="number">1</span>, <span class="number">0</span>);</div><div class="line">        res[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">        res[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)</div><div class="line">        &#123;</div><div class="line">        	<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; ++j)</div><div class="line">        	&#123;</div><div class="line">        		res[i] += res[j] * res[i-j<span class="number">-1</span>];</div><div class="line">        	&#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res[n];</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="98-Validate-Binary-Search-Tree"><a href="#98-Validate-Binary-Search-Tree" class="headerlink" title="98. Validate Binary Search Tree"></a>98. Validate Binary Search Tree</h2><h3 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>仍然是使用中序遍历，维持一个pre变量，确保每一个<code>cur &gt; pre</code>即可；</li>
</ul>
</blockquote>
<h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span></div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    bool isValidBST(TreeNode* root) </div><div class="line">    &#123;</div><div class="line">    	TreeNode* pre = NULL;</div><div class="line">    	<span class="keyword">return</span> midOrder(root, pre);</div><div class="line">    &#125;</div><div class="line">    bool midOrder(TreeNode* root, TreeNode* &amp;pre)</div><div class="line">    &#123;</div><div class="line">    	<span class="keyword">if</span>(root)</div><div class="line">    	&#123;</div><div class="line">    		<span class="keyword">if</span>(!midOrder(root-&gt;left, pre))</div><div class="line">    			<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    		<span class="keyword">if</span>(pre &amp;&amp; root-&gt;<span class="keyword">val</span> &lt;= pre-&gt;<span class="keyword">val</span>) </div><div class="line">    			<span class="keyword">return</span> <span class="literal">false</span>; </div><div class="line">    		pre = root;</div><div class="line">    		<span class="keyword">if</span>(!midOrder(root-&gt;right, pre))</div><div class="line">    			<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    	&#125;</div><div class="line">    	<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="99-Recover-Binary-Search-Tree"><a href="#99-Recover-Binary-Search-Tree" class="headerlink" title="99. Recover Binary Search Tree"></a>99. Recover Binary Search Tree</h2><h3 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>仍然是中序遍历，遍历一遍，找出乱序的两个节点即可；</li>
</ul>
</blockquote>
<h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">class Solution </div><div class="line">&#123;</div><div class="line">public:</div><div class="line">	TreeNode* <span class="built_in">left</span> = NULL;</div><div class="line">    TreeNode* <span class="built_in">right</span> = NULL;</div><div class="line">    TreeNode* pre = new TreeNode((<span class="number">1</span>&lt;&lt;<span class="number">31</span>));</div><div class="line">    void recoverTree(TreeNode* root) </div><div class="line">    &#123;</div><div class="line">    	</div><div class="line">        midOrder(root);</div><div class="line">        <span class="built_in">swap</span>(<span class="built_in">left</span>-&gt;val, <span class="built_in">right</span>-&gt;val);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    void midOrder(TreeNode* root)</div><div class="line">    &#123;</div><div class="line">    	<span class="keyword">if</span>(root)</div><div class="line">    	&#123;</div><div class="line">    		midOrder(root-&gt;<span class="built_in">left</span>);</div><div class="line">    		<span class="keyword">if</span>(!<span class="built_in">left</span> &amp;&amp; pre-&gt;val &gt;= root-&gt;val)</div><div class="line">    			<span class="built_in">left</span> = pre;</div><div class="line">    		<span class="keyword">if</span>(<span class="built_in">left</span> &amp;&amp; pre-&gt;val &gt;= root-&gt;val)</div><div class="line">    			<span class="built_in">right</span> = root;</div><div class="line">    		pre = root;</div><div class="line">    		midOrder(root-&gt;<span class="built_in">right</span>);</div><div class="line">    	&#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="100-Same-Tree"><a href="#100-Same-Tree" class="headerlink" title="100. Same Tree"></a>100. Same Tree</h2><h3 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>这道题就迭代去比较就可以了， 注意两个都是<code>NULL</code>的情况；</li>
</ul>
</blockquote>
<h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h3><figure class="highlight zephir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span></div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">bool</span> isSameTree(TreeNode* p, TreeNode* q) </div><div class="line">    &#123;</div><div class="line">    	<span class="keyword">if</span>(p == q)</div><div class="line">    		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">		<span class="keyword">if</span>(p &amp;&amp; q &amp;&amp; p-&gt;val == q-&gt;val)</div><div class="line">			<span class="keyword">return</span> isSameTree(p-&gt;left, q-&gt;left) &amp;&amp; isSameTree(p-&gt;right, q-&gt;right);</div><div class="line">		<span class="keyword">else</span></div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;        </div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="101-Symmetric-Tree"><a href="#101-Symmetric-Tree" class="headerlink" title="101. Symmetric Tree"></a>101. Symmetric Tree</h2><h3 id="解题思路-5"><a href="#解题思路-5" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>按照对称的位置去比较；</li>
</ul>
</blockquote>
<h3 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h3><figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">class Solution </div><div class="line">&#123;</div><div class="line">public:</div><div class="line">    bool isSymmetric(TreeNode* root)</div><div class="line">    &#123;</div><div class="line">    	<span class="keyword">if</span>(root == NULL)</div><div class="line">    		<span class="keyword">return</span> true;</div><div class="line">        <span class="keyword">return</span> isTheSame(root-&gt;<span class="built_in">left</span>, root-&gt;<span class="built_in">right</span>);</div><div class="line">    &#125;</div><div class="line">	bool isTheSame(TreeNode* <span class="built_in">left</span>, TreeNode* <span class="built_in">right</span>)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(<span class="built_in">left</span> == NULL |<span class="type">| right</span> == NULL)</div><div class="line">			<span class="keyword">return</span> <span class="built_in">left</span> == <span class="built_in">right</span>;</div><div class="line">		<span class="keyword">if</span>(<span class="built_in">left</span>-&gt;val != <span class="built_in">right</span>-&gt;val)</div><div class="line">			<span class="keyword">return</span> false;</div><div class="line">		<span class="keyword">return</span> isTheSame(<span class="built_in">left</span>-&gt;<span class="built_in">left</span>, <span class="built_in">right</span>-&gt;<span class="built_in">right</span>) &amp;&amp; isTheSame(<span class="built_in">left</span>-&gt;<span class="built_in">right</span>, <span class="built_in">right</span>-&gt;<span class="built_in">left</span>);</div><div class="line">	&#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="102-Binary-Tree-Level-Order-Traversal"><a href="#102-Binary-Tree-Level-Order-Traversal" class="headerlink" title="102. Binary Tree Level Order Traversal"></a>102. Binary Tree Level Order Traversal</h2><h3 id="解题思路-6"><a href="#解题思路-6" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>使用一个<code>queue</code>进行广度优先搜索；</li>
</ul>
</blockquote>
<h3 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span></div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; levelOrder(TreeNode* root) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; res;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; temp;</div><div class="line">        <span class="keyword">if</span>(root == <span class="literal">NULL</span>)</div><div class="line">        	<span class="keyword">return</span> res;</div><div class="line">        <span class="built_in">queue</span>&lt;TreeNode*&gt; que;</div><div class="line">        que.push(root);</div><div class="line"></div><div class="line">        <span class="keyword">while</span>(!que.empty())</div><div class="line">        &#123;</div><div class="line">        	temp.clear();</div><div class="line">        	<span class="keyword">int</span> len = que.size();</div><div class="line">        	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</div><div class="line">        	&#123;</div><div class="line">        		temp.push_back(que.front()-&gt;val);</div><div class="line">        		<span class="keyword">if</span>(que.front()-&gt;left)</div><div class="line">        			que.push(que.front()-&gt;left);</div><div class="line">        		<span class="keyword">if</span>(que.front()-&gt;right)</div><div class="line">        			que.push(que.front()-&gt;right);</div><div class="line">        		que.pop();</div><div class="line">        	&#125;</div><div class="line">        	res.push_back(temp);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="103-Binary-Tree-Zigzag-Level-Order-Traversal"><a href="#103-Binary-Tree-Zigzag-Level-Order-Traversal" class="headerlink" title="103. Binary Tree Zigzag Level Order Traversal"></a>103. Binary Tree Zigzag Level Order Traversal</h2><h3 id="解题思路-7"><a href="#解题思路-7" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>仍然按照上述思路进行，使用一个<code>queue</code>保存每一层的数据，这里注意在偶数层进行翻转即可；</li>
</ul>
</blockquote>
<h3 id="代码-9"><a href="#代码-9" class="headerlink" title="代码"></a>代码</h3><figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span></div><div class="line">&#123;</div><div class="line">public:</div><div class="line">    vector&lt;vector&lt;int&gt;&gt; zigzagLevelOrder(TreeNode* root) </div><div class="line">    &#123;</div><div class="line">		vector&lt;vector&lt;int&gt;&gt; res;</div><div class="line">		vector&lt;int&gt; temp;</div><div class="line">		queue&lt;TreeNode*&gt; que;</div><div class="line">		<span class="keyword">if</span>(root == NULL)</div><div class="line">			<span class="keyword">return</span> res;</div><div class="line">		int count = <span class="number">0</span>;</div><div class="line">		que.push(root);</div><div class="line">		<span class="keyword">while</span>(!que.empty())</div><div class="line">		&#123;</div><div class="line">			temp.clear();</div><div class="line">			int len = que.size();</div><div class="line">			<span class="keyword">for</span>(int i = <span class="number">0</span>; i &lt; len; ++i)</div><div class="line">			&#123;</div><div class="line">				<span class="keyword">if</span><span class="function"><span class="params">(que.front()-&gt;left)</span></span></div><div class="line">					<span class="title">que</span>.<span class="title">push</span><span class="params">(que.front()-&gt;left)</span>;</div><div class="line">				<span class="title">if</span><span class="params">(que.front()-&gt;right)</span></div><div class="line">					<span class="title">que</span>.<span class="title">push</span><span class="params">(que.front()-&gt;right)</span>;</div><div class="line">				<span class="title">temp</span>.<span class="title">push_back</span><span class="params">(que.front()-&gt;val)</span>;</div><div class="line">				<span class="title">que</span>.<span class="title">pop</span><span class="params">()</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="title">if</span><span class="params">((count++)&amp;<span class="number">1</span>)</span></div><div class="line">				<span class="title">reverse</span><span class="params">(temp.begin(), temp.end())</span>;</div><div class="line">			<span class="title">res</span>.<span class="title">push_back</span><span class="params">(temp)</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="title">return</span> <span class="title">res</span>;        </div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="104-Maximum-Depth-of-Binary-Tree"><a href="#104-Maximum-Depth-of-Binary-Tree" class="headerlink" title="104. Maximum Depth of Binary Tree"></a>104. Maximum Depth of Binary Tree</h2><h3 id="解题思路-8"><a href="#解题思路-8" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>使用一个递归来解决；</li>
</ul>
</blockquote>
<h3 id="代码-10"><a href="#代码-10" class="headerlink" title="代码"></a>代码</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span></div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    int maxDepth(<span class="type">TreeNode</span>* root) </div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(root)</div><div class="line">    		<span class="keyword">return</span> <span class="number">1</span> + <span class="built_in">max</span>(maxDepth(root-&gt;<span class="keyword">left</span>), maxDepth(root-&gt;<span class="keyword">right</span>));</div><div class="line">    	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="105-Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal"><a href="#105-Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal" class="headerlink" title="105. Construct Binary Tree from Preorder and Inorder Traversal"></a>105. Construct Binary Tree from Preorder and Inorder Traversal</h2><h3 id="解题思路-9"><a href="#解题思路-9" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>由中序遍历和先序遍历来构建树结构；</li>
</ul>
</blockquote>
<h3 id="代码-11"><a href="#代码-11" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span></div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">TreeNode* <span class="title">buildTree</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; preorder, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; inorder)</span> </span></div><div class="line">    &#123;</div><div class="line"></div><div class="line">     	  TreeNode* root = solve(preorder, inorder, <span class="number">0</span>, preorder.size(), <span class="number">0</span>, preorder.size());</div><div class="line">     	  <span class="keyword">return</span> root;</div><div class="line">    &#125;</div><div class="line">    <span class="function">TreeNode* <span class="title">solve</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;preorder, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;inorder, <span class="keyword">int</span> start, <span class="keyword">int</span> end, <span class="keyword">int</span> s, <span class="keyword">int</span> e)</span></span></div><div class="line">    &#123;</div><div class="line">    	<span class="keyword">if</span>(end == start || end &lt; start)</div><div class="line">    		<span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    	<span class="keyword">if</span>(end - start == <span class="number">1</span>)</div><div class="line">    	&#123;</div><div class="line">    		<span class="keyword">return</span> <span class="keyword">new</span> TreeNode(preorder[start]);</div><div class="line">    	&#125;</div><div class="line">    	<span class="keyword">else</span></div><div class="line">    	&#123;</div><div class="line">    		TreeNode* res = <span class="keyword">new</span> TreeNode(preorder[start]);</div><div class="line">    		<span class="keyword">int</span> mid;</div><div class="line">    		<span class="keyword">for</span>(<span class="keyword">int</span> i = s; i &lt; e; ++i)</div><div class="line">    		&#123;</div><div class="line">    			<span class="keyword">if</span>(inorder[i] == preorder[start])</div><div class="line">    			&#123;</div><div class="line">    				mid = i;</div><div class="line">    				<span class="keyword">break</span>;</div><div class="line">    			&#125;</div><div class="line">    		&#125;</div><div class="line">    		res-&gt;left = solve(preorder, inorder, start+<span class="number">1</span>, start+mid-s+<span class="number">1</span>, s, mid);</div><div class="line">    		res-&gt;right = solve(preorder, inorder, start+mid-s+<span class="number">1</span>, end, mid+<span class="number">1</span>, e);</div><div class="line">    		<span class="keyword">return</span> res;</div><div class="line">    	&#125;</div><div class="line">    	<span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="106-Construct-Binary-Tree-from-Inorder-and-Postorder-Traversal"><a href="#106-Construct-Binary-Tree-from-Inorder-and-Postorder-Traversal" class="headerlink" title="106. Construct Binary Tree from Inorder and Postorder Traversal"></a>106. Construct Binary Tree from Inorder and Postorder Traversal</h2><h3 id="解题思路-10"><a href="#解题思路-10" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>中序遍历和后序遍历构建树结构，使用<code>unordered_map</code>进行辅助存储；</li>
</ul>
</blockquote>
<h3 id="代码-12"><a href="#代码-12" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span></div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; m;</div><div class="line">    <span class="function">TreeNode* <span class="title">buildTree</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; inorder, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; postorder)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; inorder.size(); ++i)</div><div class="line">        	m[inorder[i]] = i;</div><div class="line">        <span class="keyword">return</span> solve(inorder, postorder, <span class="number">0</span>, inorder.size(), <span class="number">0</span>, inorder.size());</div><div class="line">    &#125;</div><div class="line">    <span class="function">TreeNode *<span class="title">solve</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;inorder, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; postorder, <span class="keyword">int</span> s1, <span class="keyword">int</span> e1, <span class="keyword">int</span> s2, <span class="keyword">int</span> e2)</span></span></div><div class="line">    &#123;</div><div class="line">    	<span class="keyword">if</span>(e1 == s1 || e1 &lt; s1)</div><div class="line">    		<span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    	<span class="keyword">if</span>(e1 - s1 == <span class="number">1</span>)</div><div class="line">    		<span class="keyword">return</span> <span class="keyword">new</span> TreeNode(inorder[s1]);</div><div class="line">    	<span class="keyword">int</span> mid = m[postorder[e2<span class="number">-1</span>]];</div><div class="line">    	TreeNode* root = <span class="keyword">new</span> TreeNode(postorder[e2<span class="number">-1</span>]);</div><div class="line">    	root-&gt;left = solve(inorder, postorder, s1, mid, s2, s2+mid-s1);</div><div class="line">    	root-&gt;right = solve(inorder, postorder, mid+<span class="number">1</span>, e1, s2+mid-s1, e2<span class="number">-1</span>);</div><div class="line">    	<span class="keyword">return</span> root;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="107-Binary-Tree-Level-Order-Traversal-II"><a href="#107-Binary-Tree-Level-Order-Traversal-II" class="headerlink" title="107. Binary Tree Level Order Traversal II"></a>107. Binary Tree Level Order Traversal II</h2><h3 id="解题思路-11"><a href="#解题思路-11" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>跟之前的题目一样，最后进行一下翻转就可以了；</li>
</ul>
</blockquote>
<h3 id="代码-13"><a href="#代码-13" class="headerlink" title="代码"></a>代码</h3><figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span></div><div class="line">&#123;</div><div class="line">public:</div><div class="line">    vector&lt;vector&lt;int&gt;&gt; levelOrderBottom(TreeNode* root) </div><div class="line">    &#123;</div><div class="line">        vector&lt;vector&lt;int&gt;&gt; res;</div><div class="line">        vector&lt;int&gt; temp;</div><div class="line">        <span class="keyword">if</span>(root == NULL)</div><div class="line">        	<span class="keyword">return</span> res;</div><div class="line">        queue&lt;TreeNode*&gt; que;</div><div class="line">        que.push(root);</div><div class="line">        <span class="keyword">while</span>(!que.empty())</div><div class="line">        &#123;</div><div class="line">        	temp.clear();</div><div class="line">        	int len = que.size();</div><div class="line">        	<span class="keyword">for</span>(int i = <span class="number">0</span>; i &lt; len; ++i)</div><div class="line">        	&#123;</div><div class="line">        		<span class="keyword">if</span><span class="function"><span class="params">(que.front()-&gt;left)</span></span></div><div class="line">        			<span class="title">que</span>.<span class="title">push</span><span class="params">(que.front()-&gt;left)</span>;</div><div class="line">        		<span class="title">if</span><span class="params">(que.front()-&gt;right)</span></div><div class="line">        			<span class="title">que</span>.<span class="title">push</span><span class="params">(que.front()-&gt;right)</span>;</div><div class="line">        		<span class="title">temp</span>.<span class="title">push_back</span><span class="params">(que.front()-&gt;val)</span>;</div><div class="line">        		<span class="title">que</span>.<span class="title">pop</span><span class="params">()</span>;</div><div class="line">        	&#125;</div><div class="line">        	<span class="title">res</span>.<span class="title">push_back</span><span class="params">(temp)</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="title">reverse</span><span class="params">(res.begin(), res.end())</span>;</div><div class="line">        <span class="title">return</span> <span class="title">res</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="108-Convert-Sorted-Array-to-Binary-Search-Tree"><a href="#108-Convert-Sorted-Array-to-Binary-Search-Tree" class="headerlink" title="108. Convert Sorted Array to Binary Search Tree"></a>108. Convert Sorted Array to Binary Search Tree</h2><h3 id="解题思路-12"><a href="#解题思路-12" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>使用分治的思想去构建，每次首先构建中间节点即可；</li>
</ul>
</blockquote>
<h3 id="代码-14"><a href="#代码-14" class="headerlink" title="代码"></a>代码</h3><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    TreeNode* sortedArrayToBST(vector&lt;<span class="built_in">int</span>&gt;&amp; nums) </div><div class="line">    &#123;</div><div class="line">        return solve(nums, <span class="number">0</span>, nums.size());</div><div class="line">    &#125;</div><div class="line">    TreeNode* solve(vector&lt;<span class="built_in">int</span>&gt; &amp;nums, <span class="built_in">int</span> start, <span class="built_in">int</span> <span class="keyword">end</span>)</div><div class="line">    &#123;</div><div class="line">    	<span class="keyword">if</span>(start == <span class="keyword">end</span> || start &gt; <span class="keyword">end</span>)</div><div class="line">    		return <span class="literal">NULL</span>;</div><div class="line">    	<span class="keyword">if</span>(<span class="keyword">end</span> - start == <span class="number">1</span>)</div><div class="line">    		return <span class="keyword">new</span> TreeNode(nums[start]);</div><div class="line">    	<span class="built_in">int</span> <span class="built_in">mid</span> = (start + <span class="keyword">end</span>) / <span class="number">2</span>;</div><div class="line">    	TreeNode* root = <span class="keyword">new</span> TreeNode(nums[<span class="built_in">mid</span>]);</div><div class="line">    	root-&gt;<span class="built_in">left</span> = solve(nums, start, <span class="built_in">mid</span>);</div><div class="line">    	root-&gt;<span class="built_in">right</span> = solve(nums, <span class="built_in">mid</span>+<span class="number">1</span>, <span class="keyword">end</span>);</div><div class="line">    	return root;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="110-Balanced-Binary-Tree"><a href="#110-Balanced-Binary-Tree" class="headerlink" title="110. Balanced Binary Tree"></a>110. Balanced Binary Tree</h2><h3 id="解题思路I-1"><a href="#解题思路I-1" class="headerlink" title="解题思路I"></a>解题思路I</h3><blockquote>
<ul>
<li>遍历每一个节点，检查是否平衡；</li>
</ul>
</blockquote>
<h3 id="代码-15"><a href="#代码-15" class="headerlink" title="代码"></a>代码</h3><figure class="highlight zephir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span></div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">bool</span> isBalanced(TreeNode* root) </div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(root == <span class="keyword">NULL</span>)</div><div class="line">        	<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">if</span>(abs(getHeight(root-&gt;left) - getHeight(root-&gt;right)) &gt; <span class="number">1</span>)</div><div class="line">        	<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        	<span class="keyword">return</span> isBalanced(root-&gt;left) &amp;&amp;  isBalanced(root-&gt;right);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> getHeight(TreeNode* root)</div><div class="line">    &#123;</div><div class="line">    	<span class="keyword">if</span>(root == <span class="keyword">NULL</span>)</div><div class="line">    		<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    	<span class="keyword">return</span> <span class="number">1</span> + max(getHeight(root-&gt;left), getHeight(root-&gt;right));</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="解题思路II-1"><a href="#解题思路II-1" class="headerlink" title="解题思路II"></a>解题思路II</h3><blockquote>
<ul>
<li>使用DFS进行深度搜索，每次搜索返回树的高度，如果平衡就返回实际高度值，否则返回<code>-1</code>，最后进行判断即可；</li>
</ul>
</blockquote>
<h3 id="代码-16"><a href="#代码-16" class="headerlink" title="代码"></a>代码</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span></div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    bool isBalanced(<span class="type">TreeNode</span>* root) </div><div class="line">    &#123;</div><div class="line">    	<span class="keyword">return</span> getHeight(root) != -<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    int getHeight(<span class="type">TreeNode</span>* root)</div><div class="line">    &#123;</div><div class="line">    	<span class="keyword">if</span>(root == <span class="type">NULL</span>)</div><div class="line">    		<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    	int <span class="keyword">left</span> = getHeight(root-&gt;<span class="keyword">left</span>);</div><div class="line">    	<span class="keyword">if</span>(<span class="keyword">left</span> == -<span class="number">1</span>) <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">    	int <span class="keyword">right</span> = getHeight(root-&gt;<span class="keyword">right</span>);</div><div class="line">    	<span class="keyword">if</span>(<span class="keyword">right</span> == -<span class="number">1</span>) <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line"></div><div class="line">    	<span class="keyword">if</span>(<span class="built_in">abs</span>(<span class="keyword">left</span> - <span class="keyword">right</span>) &gt; <span class="number">1</span>) <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line"></div><div class="line">    	<span class="keyword">return</span> <span class="built_in">max</span>(<span class="keyword">left</span>, <span class="keyword">right</span>) + <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="111-Minimum-Depth-of-Binary-Tree"><a href="#111-Minimum-Depth-of-Binary-Tree" class="headerlink" title="111. Minimum Depth of Binary Tree"></a>111. Minimum Depth of Binary Tree</h2><h3 id="解题思路-13"><a href="#解题思路-13" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>简单题，但是有点小麻烦，弄清楚边界问题，只有<code>!root-&gt;left &amp;&amp; !root-&gt;right</code>才可以结束遍历，有一个子节点不为<code>NULL</code>就需要继续计算，两个均不为<code>NULL</code>则取较小的一个；</li>
</ul>
</blockquote>
<h3 id="代码-17"><a href="#代码-17" class="headerlink" title="代码"></a>代码</h3><figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">class Solution </div><div class="line">&#123;</div><div class="line">public:</div><div class="line">    int minDepth(TreeNode* root) </div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(root == NULL)</div><div class="line">    	    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    	<span class="keyword">if</span>(!root-&gt;<span class="built_in">left</span> &amp;&amp; !root-&gt;<span class="built_in">right</span>)</div><div class="line">    		<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    	<span class="keyword">else</span> <span class="keyword">if</span>(root-&gt;<span class="built_in">left</span> &amp;&amp; !root-&gt;<span class="built_in">right</span>)</div><div class="line">    	    <span class="keyword">return</span> <span class="number">1</span> + minDepth(root-&gt;<span class="built_in">left</span>);</div><div class="line">    	<span class="keyword">else</span> <span class="keyword">if</span>(!root-&gt;<span class="built_in">left</span> &amp;&amp; root-&gt;<span class="built_in">right</span>)</div><div class="line">    	    <span class="keyword">return</span> <span class="number">1</span> + minDepth(root-&gt;<span class="built_in">right</span>);</div><div class="line">    	<span class="keyword">return</span> <span class="number">1</span> + min(minDepth(root-&gt;<span class="built_in">left</span>), minDepth(root-&gt;<span class="built_in">right</span>));</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="112-Path-Sum"><a href="#112-Path-Sum" class="headerlink" title="112. Path Sum"></a>112. Path Sum</h2><h3 id="解题思路-14"><a href="#解题思路-14" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>遍历每一条路径，检查是否有符合要求的结果；</li>
<li>注意这里需要判断左右子树是不是为<code>NULL</code>，即当前节点是不是叶子节点，然后分情况进行讨论；</li>
</ul>
</blockquote>
<h3 id="代码-18"><a href="#代码-18" class="headerlink" title="代码"></a>代码</h3><figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">class Solution </div><div class="line">&#123;</div><div class="line">public:</div><div class="line">    bool hasPathSum(TreeNode* root, int <span class="built_in">sum</span>) </div><div class="line">    &#123;</div><div class="line">    	<span class="keyword">if</span>(root == NULL)</div><div class="line">    		<span class="keyword">return</span> false;</div><div class="line">    	<span class="keyword">return</span> <span class="built_in">solve</span>(root, <span class="number">0</span>, <span class="built_in">sum</span>);</div><div class="line">    &#125;</div><div class="line">    bool <span class="built_in">solve</span>(TreeNode* root, int <span class="built_in">sum</span>, int target)</div><div class="line">    &#123;</div><div class="line">    	<span class="keyword">if</span>(!root-&gt;<span class="built_in">left</span> &amp;&amp; !root-&gt;<span class="built_in">right</span>)</div><div class="line">    		<span class="keyword">return</span> <span class="built_in">sum</span>+root-&gt;val == target;</div><div class="line">    	<span class="keyword">else</span> <span class="keyword">if</span>(root-&gt;<span class="built_in">left</span> &amp;&amp; !root-&gt;<span class="built_in">right</span>)</div><div class="line">    		<span class="keyword">return</span> <span class="built_in">solve</span>(root-&gt;<span class="built_in">left</span>, <span class="built_in">sum</span>+root-&gt;val, target);</div><div class="line">    	<span class="keyword">else</span> <span class="keyword">if</span>(!root-&gt;<span class="built_in">left</span> &amp;&amp; root-&gt;<span class="built_in">right</span>)</div><div class="line">    		<span class="keyword">return</span> <span class="built_in">solve</span>(root-&gt;<span class="built_in">right</span>, <span class="built_in">sum</span>+root-&gt;val, target);</div><div class="line">    	<span class="keyword">return</span> <span class="built_in">solve</span>(root-&gt;<span class="built_in">left</span>, <span class="built_in">sum</span>+root-&gt;val, target) |<span class="type">| solve</span>(root-&gt;<span class="built_in">right</span>, <span class="built_in">sum</span>+root-&gt;val, target);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="113-Path-Sum-II"><a href="#113-Path-Sum-II" class="headerlink" title="113. Path Sum II"></a>113. Path Sum II</h2><h3 id="解题思路-15"><a href="#解题思路-15" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>采用递归和回溯的方式，遍历各个分支，如果符合要求就保存；</li>
</ul>
</blockquote>
<h3 id="代码-19"><a href="#代码-19" class="headerlink" title="代码"></a>代码</h3><figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">class Solution </div><div class="line">&#123;</div><div class="line">public:</div><div class="line">    vector&lt;vector&lt;int&gt;&gt; pathSum(TreeNode* root, int <span class="built_in">sum</span>) </div><div class="line">    &#123;</div><div class="line">        vector&lt;vector&lt;int&gt;&gt; res;</div><div class="line">        vector&lt;int&gt; temp;</div><div class="line">        <span class="keyword">if</span>(root == NULL)</div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">        <span class="built_in">solve</span>(res, temp, root, <span class="built_in">sum</span>);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">    void <span class="built_in">solve</span>(vector&lt;vector&lt;int&gt;&gt; &amp;res, vector&lt;int&gt; &amp;temp, TreeNode* root, int <span class="built_in">sum</span>)</div><div class="line">    &#123;</div><div class="line">    	<span class="keyword">if</span>(!root-&gt;<span class="built_in">left</span> &amp;&amp; !root-&gt;<span class="built_in">right</span>)</div><div class="line">    	&#123;</div><div class="line">    		<span class="keyword">if</span>(root-&gt;val == <span class="built_in">sum</span>)</div><div class="line">    		&#123;</div><div class="line">	    		temp.push_back(root-&gt;val);</div><div class="line">	    		res.push_back(temp);</div><div class="line">	    		temp.erase(temp.<span class="keyword">end</span>()<span class="number">-1</span>);</div><div class="line">	    	&#125;</div><div class="line">	    	<span class="keyword">return</span>;</div><div class="line">    	&#125;</div><div class="line">    	<span class="keyword">if</span>(root-&gt;<span class="built_in">left</span>)</div><div class="line">    	&#123;</div><div class="line">    		temp.push_back(root-&gt;val);</div><div class="line">    		<span class="built_in">solve</span>(res, temp, root-&gt;<span class="built_in">left</span>, <span class="built_in">sum</span>-root-&gt;val);</div><div class="line">    		temp.erase(temp.<span class="keyword">end</span>()<span class="number">-1</span>);</div><div class="line">    	&#125;</div><div class="line">    	<span class="keyword">if</span>(root-&gt;<span class="built_in">right</span>)</div><div class="line">    	&#123;</div><div class="line">    		temp.push_back(root-&gt;val);</div><div class="line">    		<span class="built_in">solve</span>(res, temp, root-&gt;<span class="built_in">right</span>, <span class="built_in">sum</span>-root-&gt;val);</div><div class="line">    		temp.erase(temp.<span class="keyword">end</span>()<span class="number">-1</span>);</div><div class="line">    	&#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="437-Path-Sum-III"><a href="#437-Path-Sum-III" class="headerlink" title="437. Path Sum III"></a>437. Path Sum III</h2><h3 id="解题思路-16"><a href="#解题思路-16" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>确定一个起始点，然后检查以该起始点开始有多少个分支符合要求，最后进行累加；</li>
<li>确定起点之后，只能在后面一直追加，如果已经计算得到了所求的sum值，在其后继续追加节点，如果追加节点的和为0的话也满足要求，此时计数继续加一；</li>
</ul>
</blockquote>
<h3 id="代码-20"><a href="#代码-20" class="headerlink" title="代码"></a>代码</h3><figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">class Solution</div><div class="line">&#123;</div><div class="line">public:</div><div class="line">    int pathSum(TreeNode* root, int <span class="built_in">sum</span>)</div><div class="line">    &#123;</div><div class="line">    	<span class="keyword">if</span>(root == NULL)</div><div class="line">    		<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">solve</span>(root, <span class="built_in">sum</span>, <span class="number">0</span>) + pathSum(root-&gt;<span class="built_in">left</span>, <span class="built_in">sum</span>) + pathSum(root-&gt;<span class="built_in">right</span>, <span class="built_in">sum</span>);</div><div class="line">    &#125;</div><div class="line">    int <span class="built_in">solve</span>(TreeNode* root, int target, int <span class="built_in">sum</span>)</div><div class="line">    &#123;</div><div class="line">    	<span class="keyword">if</span>(root == NULL)</div><div class="line">    		<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    	<span class="keyword">if</span>(<span class="built_in">sum</span> + root-&gt;val == target)</div><div class="line">    		<span class="keyword">return</span> <span class="number">1</span> + <span class="built_in">solve</span>(root-&gt;<span class="built_in">left</span>, <span class="number">0</span>, <span class="number">0</span>) + <span class="built_in">solve</span>(root-&gt;<span class="built_in">right</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">    	<span class="keyword">return</span> <span class="built_in">solve</span>(root-&gt;<span class="built_in">left</span>, target, <span class="built_in">sum</span>+root-&gt;val) + <span class="built_in">solve</span>(root-&gt;<span class="built_in">right</span>, target, <span class="built_in">sum</span>+root-&gt;val);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文包含的题目有：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/binary-tree-inorder-traversal/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;94. Binary Tree Inorder Traversal&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/unique-binary-search-trees-ii/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;95. Unique Binary Search Trees II&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/unique-binary-search-trees/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;96. Unique Binary Search Trees&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/validate-binary-search-tree/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;98. Validate Binary Search Tree&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/recover-binary-search-tree/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;99. Recover Binary Search Tree&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/same-tree/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;100. Same Tree&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/symmetric-tree/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;101. Symmetric Tree&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/binary-tree-level-order-traversal/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;102. Binary Tree Level Order Traversal&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;103. Binary Tree Zigzag Level Order Traversal&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/maximum-depth-of-binary-tree/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;104. Maximum Depth of Binary Tree&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;105. Construct Binary Tree from Preorder and Inorder Traversal&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;106. Construct Binary Tree from Inorder and Postorder Traversal&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/binary-tree-level-order-traversal-ii/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;107. Binary Tree Level Order Traversal II&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;108. Convert Sorted Array to Binary Search Tree&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/balanced-binary-tree/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;110. Balanced Binary Tree&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/minimum-depth-of-binary-tree/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;111. Minimum Depth of Binary Tree&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/path-sum/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;112. Path Sum&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/path-sum-ii/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;113. Path Sum II&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/path-sum-iii/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;437. Path Sum III&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://haoyuanliu.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://haoyuanliu.github.io/tags/LeetCode/"/>
    
      <category term="Tree" scheme="http://haoyuanliu.github.io/tags/Tree/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu14.04系统Chromium安装Adobe Flash插件</title>
    <link href="http://haoyuanliu.github.io/2017/01/04/Ubuntu14-04%E7%B3%BB%E7%BB%9FChromium%E5%AE%89%E8%A3%85Adobe-Flash%E6%8F%92%E4%BB%B6/"/>
    <id>http://haoyuanliu.github.io/2017/01/04/Ubuntu14-04系统Chromium安装Adobe-Flash插件/</id>
    <published>2017-01-04T06:12:41.000Z</published>
    <updated>2017-07-01T08:19:25.158Z</updated>
    
    <content type="html"><![CDATA[<p>经历了好几次重装Ubuntu系统，每次安装都需要配置一大堆东西，对于一个几乎放弃了windows系统的人来说，每次重装系统的第一件事就是安装一个Chromium浏览器，谁让我的所有收藏夹都在Chromium账号中。然而每次安装Chromium的Flash插件都需要去网上查找各种教程，每次都要搞好久才能弄好，这次专门记录一下，以便以后需要时用到。</p>
<a id="more"></a>
<h2 id="下载插件"><a href="#下载插件" class="headerlink" title="下载插件"></a>下载插件</h2><p>首先是下载Adobe Flash插件，下载链接如下：<br><a href="https://get.adobe.com/cn/flashplayer/?no_redirect" target="_blank" rel="external">下载Adobe Flash</a><br>网页会自动检测你所用系统的信息，然后需要点选一下下载插件的压缩格式，一般.tar.gz格式的即可；</p>
<h2 id="添加插件"><a href="#添加插件" class="headerlink" title="添加插件"></a>添加插件</h2><p>首先将压缩包解压：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar -xvf xxx<span class="selector-class">.tar</span><span class="selector-class">.gz</span></div></pre></td></tr></table></figure></p>
<p>然后将解压目录中的<code>libpepflashplayer.so</code>复制到<code>/usr/lib/chromium-browser/plugins</code>中去；<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo cp libpepflashplayer.so /usr/<span class="class"><span class="keyword">lib</span>/<span class="title">chromium</span>-<span class="title">browser</span>/<span class="title">plugins</span></span></div></pre></td></tr></table></figure></p>
<h2 id="更改配置"><a href="#更改配置" class="headerlink" title="更改配置"></a>更改配置</h2><p>修改<code>/etc/chromium-browser/default</code>文件中的配置：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo gedit /etc/chromium-browser<span class="built_in">/default</span></div><div class="line"></div><div class="line"><span class="comment">#在打开的文件中输入以下内容</span></div><div class="line"><span class="attribute">CHROMIUM_FLAGS</span>=<span class="string">"--ppapi-flash-path=/usr/lib/chromium-browser/plugins/libpepflashplayer.so --ppapi-flash-version= XXXX"</span></div></pre></td></tr></table></figure></p>
<p>其中<code>XXXX</code>表示你所使用的Adobe Flash的插件版本，比如下图中的版本即为：24.0.0.186。<br><img src="https://raw.githubusercontent.com/haoyuanliu/blog_pic/master/2017/01-04/2017-01-04-Adobe-Flash.png" alt="Adobe Flash"></p>
<h2 id="新版浏览器启动flash插件"><a href="#新版浏览器启动flash插件" class="headerlink" title="新版浏览器启动flash插件"></a>新版浏览器启动flash插件</h2><p>新版Chromium浏览器将flash和pdf等功能集成到了<code>setting</code>选项中，在<code>setting</code>栏目中搜索<code>flash</code>关键字，在<code>content setting</code>中的<code>flash</code>设置中选择<code>Allow sites to run Flahs</code>即可。如下图所示：<br><img src="https://raw.githubusercontent.com/haoyuanliu/blog_pic/master/2017/05-29/2017-05-29-Chromium-Setting-Flash.png" alt="Chromium-Setting-Flash"></p>
<h2 id="老版启动插件"><a href="#老版启动插件" class="headerlink" title="老版启动插件"></a>老版启动插件</h2><p>老版本的Chromium浏览器启动flash插件输入<code>chrome://plugins/</code>启动即可，如下：<br>打开Chromium浏览器，地址栏输入：<code>chrome://plugins/</code>， 启用Adobe插件即可；<br>如下图所示（图中显示的是我以前安装的老版本），这样在Ubuntu系统下也可以愉快的听音乐和看视频了！<br><img src="https://raw.githubusercontent.com/haoyuanliu/blog_pic/master/2017/01-04/2017-01-04-Chromium-Plugins.png" alt="Chromium Plugins"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;经历了好几次重装Ubuntu系统，每次安装都需要配置一大堆东西，对于一个几乎放弃了windows系统的人来说，每次重装系统的第一件事就是安装一个Chromium浏览器，谁让我的所有收藏夹都在Chromium账号中。然而每次安装Chromium的Flash插件都需要去网上查找各种教程，每次都要搞好久才能弄好，这次专门记录一下，以便以后需要时用到。&lt;/p&gt;
    
    </summary>
    
      <category term="Ubuntu" scheme="http://haoyuanliu.github.io/categories/Ubuntu/"/>
    
    
      <category term="Ubuntu" scheme="http://haoyuanliu.github.io/tags/Ubuntu/"/>
    
      <category term="Adobe Flash" scheme="http://haoyuanliu.github.io/tags/Adobe-Flash/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode LinkList</title>
    <link href="http://haoyuanliu.github.io/2016/12/31/LeetCode-LinkList/"/>
    <id>http://haoyuanliu.github.io/2016/12/31/LeetCode-LinkList/</id>
    <published>2016-12-31T11:43:29.000Z</published>
    <updated>2017-07-01T08:19:25.158Z</updated>
    
    <content type="html"><![CDATA[<p>本文包含如下题目：<br><a href="https://leetcode.com/problems/add-two-numbers/" target="_blank" rel="external">2. Add Two Numbers</a><br><a href="https://leetcode.com/problems/remove-nth-node-from-end-of-list/" target="_blank" rel="external">19. Remove Nth Node From End of List</a><br><a href="https://leetcode.com/problems/merge-two-sorted-lists/" target="_blank" rel="external">21. Merge Two Sorted Lists</a><br><a href="https://leetcode.com/problems/merge-k-sorted-lists/" target="_blank" rel="external">23. Merge k Sorted Lists</a><br><a href="https://leetcode.com/problems/swap-nodes-in-pairs/" target="_blank" rel="external">24. Swap Nodes in Pairs</a><br><a href="https://leetcode.com/problems/reverse-nodes-in-k-group/" target="_blank" rel="external">25. Reverse Nodes in k-Group</a><br><a href="https://leetcode.com/problems/rotate-list/" target="_blank" rel="external">61. Rotate List</a><br><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-list-ii/" target="_blank" rel="external">82. Remove Duplicates from Sorted List II</a><br><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-list/" target="_blank" rel="external">83. Remove Duplicates from Sorted List</a><br><a href="https://leetcode.com/problems/partition-list/" target="_blank" rel="external">86. Partition List</a><br><a href="https://leetcode.com/problems/reverse-linked-list-ii/" target="_blank" rel="external">92. Reverse Linked List II</a><br><a href="https://leetcode.com/problems/convert-sorted-list-to-binary-search-tree/" target="_blank" rel="external">109. Convert Sorted List to Binary Search Tree</a><br><a href="https://leetcode.com/problems/copy-list-with-random-pointer/" target="_blank" rel="external">138. Copy List with Random Pointer</a><br><a href="https://leetcode.com/problems/linked-list-cycle/" target="_blank" rel="external">141. Linked List Cycle</a><br><a href="https://leetcode.com/problems/linked-list-cycle-ii/" target="_blank" rel="external">142. Linked List Cycle II</a><br><a href="https://leetcode.com/problems/reorder-list/" target="_blank" rel="external">143. Reorder List</a><br><a href="https://leetcode.com/problems/intersection-of-two-linked-lists/" target="_blank" rel="external">160. Intersection of Two Linked Lists</a><br><a href="https://leetcode.com/problems/remove-linked-list-elements/" target="_blank" rel="external">203. Remove Linked List Elements</a><br><a href="https://leetcode.com/problems/reverse-linked-list/" target="_blank" rel="external">206. Reverse Linked List</a><br><a href="https://leetcode.com/problems/palindrome-linked-list/" target="_blank" rel="external">234. Palindrome Linked List</a><br><a href="https://leetcode.com/problems/delete-node-in-a-linked-list/" target="_blank" rel="external">237. Delete Node in a Linked List</a><br><a href="https://leetcode.com/problems/odd-even-linked-list/" target="_blank" rel="external">328. Odd Even Linked List</a><br><a href="https://leetcode.com/problems/add-two-numbers-ii/" target="_blank" rel="external">445. Add Two Numbers II</a></p>
<a id="more"></a>
<h2 id="2-Add-Two-Numbers"><a href="#2-Add-Two-Numbers" class="headerlink" title="2. Add Two Numbers"></a>2. Add Two Numbers</h2><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>直接新建一个链表，然后进行加法运算即可；</li>
</ul>
</blockquote>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight zephir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span></div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2)</div><div class="line">    &#123;</div><div class="line">        ListNode *head = <span class="keyword">new</span> ListNode(<span class="number">-1</span>);</div><div class="line">        ListNode *p = head;</div><div class="line">        <span class="keyword">int</span> carry = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> a, b, c;</div><div class="line">        <span class="keyword">while</span>(l1 || l2)</div><div class="line">        &#123;</div><div class="line">            a = b = c = <span class="number">0</span>;</div><div class="line">            <span class="keyword">if</span>(l1)</div><div class="line">            &#123;</div><div class="line">                a = l1-&gt;val;</div><div class="line">                l1 = l1-&gt;next;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(l2)</div><div class="line">            &#123;</div><div class="line">                b = l2-&gt;val;</div><div class="line">                l2 = l2-&gt;next;</div><div class="line">            &#125;</div><div class="line">            c = a + b + carry;</div><div class="line">            p-&gt;next = <span class="keyword">new</span> ListNode(c % <span class="number">10</span>);</div><div class="line">            carry = c / <span class="number">10</span>;</div><div class="line">            p = p-&gt;next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(carry == <span class="number">1</span>)</div><div class="line">        &#123;</div><div class="line">            p-&gt;next = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> head-&gt;next;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="19-Remove-Nth-Node-From-End-of-List"><a href="#19-Remove-Nth-Node-From-End-of-List" class="headerlink" title="19. Remove Nth Node From End of List"></a>19. Remove Nth Node From End of List</h2><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>使用两个指针a, b，a先定位到从左边开始第n个，然后b在链表头部和a同时进行遍历，a到尾部的时候b也就正好取到了所求结果；</li>
</ul>
</blockquote>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">class Solution</div><div class="line">&#123;</div><div class="line">    <span class="symbol">public:</span></div><div class="line">        ListNode* removeNthFromEnd(ListNode* head, int n)</div><div class="line">        &#123;</div><div class="line">            ListNode *root = new ListNode(<span class="number">0</span>);</div><div class="line">            root-&gt;<span class="keyword">next</span> = head;</div><div class="line">            ListNode *p, *c;</div><div class="line">            p = c = root;</div><div class="line">            <span class="keyword">for</span>(int i = <span class="number">0</span>; i &lt; n+<span class="number">1</span>; ++i)</div><div class="line">                c = c-&gt;<span class="keyword">next</span>;</div><div class="line">            <span class="keyword">while</span>(c)</div><div class="line">            &#123;</div><div class="line">                p = p-&gt;<span class="keyword">next</span>;</div><div class="line">                c = c-&gt;<span class="keyword">next</span>;</div><div class="line">            &#125;</div><div class="line">            p-&gt;<span class="keyword">next</span> = p-&gt;<span class="keyword">next</span>-&gt;<span class="keyword">next</span>;</div><div class="line">            <span class="keyword">return</span> root-&gt;<span class="keyword">next</span>;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="21-Merge-Two-Sorted-Lists"><a href="#21-Merge-Two-Sorted-Lists" class="headerlink" title="21. Merge Two Sorted Lists"></a>21. Merge Two Sorted Lists</h2><h3 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>归并排序的merge算法；</li>
</ul>
</blockquote>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">class Solution</div><div class="line">&#123;</div><div class="line">    public:</div><div class="line">        ListNode* mergeTwoLists(ListNode* l1, ListNode* l2)</div><div class="line">        &#123;</div><div class="line">            ListNode* head = new ListNode(<span class="number">0</span>);</div><div class="line">            ListNode* p = head;</div><div class="line">            <span class="keyword">while</span>(l1 &amp;&amp; l2)</div><div class="line">            &#123;</div><div class="line">                <span class="function"><span class="title">if</span>(l1-&gt;</span><span class="function"><span class="title">val</span> &gt; l2-&gt;</span>val)</div><div class="line">                &#123;</div><div class="line">                    <span class="function"><span class="title">p</span>-&gt;</span><span class="function"><span class="title">next</span> = new ListNode(l2-&gt;</span>val);</div><div class="line">                    <span class="function"><span class="title">p</span> = p-&gt;</span>next;</div><div class="line">                    <span class="function"><span class="title">l2</span> = l2-&gt;</span>next;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                &#123;</div><div class="line">                    <span class="function"><span class="title">p</span>-&gt;</span><span class="function"><span class="title">next</span> = new ListNode(l1-&gt;</span>val);</div><div class="line">                    <span class="function"><span class="title">p</span> = p-&gt;</span>next;</div><div class="line">                    <span class="function"><span class="title">l1</span> = l1-&gt;</span>next;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(l1)</div><div class="line">                <span class="function"><span class="title">p</span>-&gt;</span>next = l1;</div><div class="line">            <span class="keyword">if</span>(l2)</div><div class="line">                <span class="function"><span class="title">p</span>-&gt;</span>next = l2;</div><div class="line"></div><div class="line">            <span class="function"><span class="title">return</span> head-&gt;</span>next;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="23-Merge-k-Sorted-Lists"><a href="#23-Merge-k-Sorted-Lists" class="headerlink" title="23. Merge k Sorted Lists"></a>23. Merge k Sorted Lists</h2><h3 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>二分法进行排序；</li>
</ul>
</blockquote>
<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution</div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        ListNode* mergeKLists(vector&lt;ListNode*&gt;&amp; lists)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">int</span> <span class="built_in">len</span> = lists.size();</div><div class="line">            <span class="keyword">if</span>(<span class="built_in">len</span> == <span class="number">0</span>)</div><div class="line">                return <span class="literal">NULL</span>;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">len</span> == <span class="number">1</span>)</div><div class="line">                return lists[<span class="number">0</span>];</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">len</span> == <span class="number">2</span>)</div><div class="line">                return mergeTwoLists(lists[<span class="number">0</span>], lists[<span class="number">1</span>]);</div><div class="line">            vector&lt;ListNode*&gt; <span class="built_in">left</span>(lists.begin(), lists.begin() + <span class="built_in">len</span>/<span class="number">2</span>);</div><div class="line">            vector&lt;ListNode*&gt; <span class="built_in">right</span>(lists.begin()+<span class="built_in">len</span>/<span class="number">2</span>, lists.<span class="keyword">end</span>());</div><div class="line">            return mergeTwoLists(mergeKLists(<span class="built_in">left</span>), mergeKLists(<span class="built_in">right</span>));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        ListNode* mergeTwoLists(ListNode* l1, ListNode* l2)</div><div class="line">        &#123;</div><div class="line">            ListNode* head = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</div><div class="line">            ListNode* p = head;</div><div class="line">            <span class="keyword">while</span>(l1 &amp;&amp; l2)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(l1-&gt;val &gt; l2-&gt;val)</div><div class="line">                &#123;</div><div class="line">                    p-&gt;<span class="keyword">next</span> = <span class="keyword">new</span> ListNode(l2-&gt;val);</div><div class="line">                    p = p-&gt;<span class="keyword">next</span>;</div><div class="line">                    l2 = l2-&gt;<span class="keyword">next</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                &#123;</div><div class="line">                    p-&gt;<span class="keyword">next</span> = <span class="keyword">new</span> ListNode(l1-&gt;val);</div><div class="line">                    p = p-&gt;<span class="keyword">next</span>;</div><div class="line">                    l1 = l1-&gt;<span class="keyword">next</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(l1)</div><div class="line">                p-&gt;<span class="keyword">next</span> = l1;</div><div class="line">            <span class="keyword">if</span>(l2)</div><div class="line">                p-&gt;<span class="keyword">next</span> = l2;</div><div class="line"></div><div class="line">            return head-&gt;<span class="keyword">next</span>;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="24-Swap-Nodes-in-Pairs"><a href="#24-Swap-Nodes-in-Pairs" class="headerlink" title="24. Swap Nodes in Pairs"></a>24. Swap Nodes in Pairs</h2><h3 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>这个考的链表的基本操作吧；</li>
</ul>
</blockquote>
<h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">class Solution</div><div class="line">&#123;</div><div class="line">    <span class="symbol">public:</span></div><div class="line">        ListNode* swapPairs(ListNode* head)</div><div class="line">        &#123;</div><div class="line">            if(!head &amp;&amp; !head-&gt;<span class="keyword">next</span>)</div><div class="line">                <span class="keyword">return</span> head;</div><div class="line">            ListNode* root = new ListNode(<span class="number">0</span>);</div><div class="line">            root-&gt;<span class="keyword">next</span> = head;</div><div class="line">            ListNode *p, *c;</div><div class="line">            p = root;</div><div class="line">            c = root-&gt;<span class="keyword">next</span>-&gt;<span class="keyword">next</span>;</div><div class="line">            <span class="keyword">while</span>(c)</div><div class="line">            &#123;</div><div class="line">                p-&gt;<span class="keyword">next</span>-&gt;<span class="keyword">next</span> = c-&gt;<span class="keyword">next</span>;</div><div class="line">                c-&gt;<span class="keyword">next</span> = p-&gt;<span class="keyword">next</span>;</div><div class="line">                p-&gt;<span class="keyword">next</span> = c;</div><div class="line">                p = p-&gt;<span class="keyword">next</span>-&gt;<span class="keyword">next</span>;</div><div class="line">                if(p-&gt;<span class="keyword">next</span>)</div><div class="line">                    c = p-&gt;<span class="keyword">next</span>-&gt;<span class="keyword">next</span>;</div><div class="line">                else</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> root-&gt;<span class="keyword">next</span>;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="25-Reverse-Nodes-in-k-Group"><a href="#25-Reverse-Nodes-in-k-Group" class="headerlink" title="25. Reverse Nodes in k-Group"></a>25. Reverse Nodes in k-Group</h2><h3 id="解题思路-5"><a href="#解题思路-5" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>首先维持一个len数值，通过len与k的比较判断是否需要reverse；</li>
<li>reverse就和上一题一样了，基本操作；</li>
</ul>
</blockquote>
<h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution</div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        ListNode* reverseKGroup(ListNode* head, <span class="keyword">int</span> k)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> len = getLen(head);</div><div class="line">            <span class="keyword">if</span>(len &lt; k || k == <span class="number">1</span>)</div><div class="line">                <span class="keyword">return</span> head;</div><div class="line">            ListNode *root = <span class="keyword">new</span> ListNode(-<span class="number">1</span>);</div><div class="line">            ListNode *p = root;</div><div class="line">            ListNode *p1 = head;</div><div class="line">            ListNode *p2 = head;</div><div class="line">            <span class="keyword">while</span>(len &gt;= k)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; ++i)</div><div class="line">                &#123;</div><div class="line">                    p2 = p1-&gt;<span class="keyword">next</span>;</div><div class="line">                    p1-&gt;<span class="keyword">next</span> = p-&gt;<span class="keyword">next</span>;</div><div class="line">                    p-&gt;<span class="keyword">next</span> = p1;</div><div class="line">                    p1 = p2;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">while</span>(p-&gt;<span class="keyword">next</span>)</div><div class="line">                    p = p-&gt;<span class="keyword">next</span>;</div><div class="line">                len -= k;</div><div class="line">                <span class="keyword">if</span>(len &lt; k)</div><div class="line">                &#123;</div><div class="line">                    p-&gt;<span class="keyword">next</span> = p1;</div><div class="line">                    <span class="keyword">return</span> root-&gt;<span class="keyword">next</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> root-&gt;<span class="keyword">next</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> getLen(ListNode *head)</div><div class="line">        &#123;</div><div class="line">            ListNode *p = head;</div><div class="line">            <span class="keyword">int</span> <span class="keyword">count</span> = <span class="number">0</span>;</div><div class="line">            <span class="keyword">while</span>(p)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">count</span>++;</div><div class="line">                p = p-&gt;<span class="keyword">next</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">count</span>;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="61-Rotate-List"><a href="#61-Rotate-List" class="headerlink" title="61. Rotate List"></a>61. Rotate List</h2><h3 id="解题思路-6"><a href="#解题思路-6" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>构建循环链表，然后rotate再断开，这里注意使用%求余进行计算；</li>
</ul>
</blockquote>
<h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h3><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution</div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        ListNode* rotateRight(ListNode *head, <span class="built_in">int</span> k)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(head == <span class="literal">NULL</span>)</div><div class="line">                return <span class="literal">NULL</span>;</div><div class="line">            ListNode *res;</div><div class="line">            ListNode *p = head;</div><div class="line">            <span class="built_in">int</span> <span class="built_in">len</span> = <span class="number">1</span>;</div><div class="line">            <span class="keyword">while</span>(p-&gt;<span class="keyword">next</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="built_in">len</span>++;</div><div class="line">                p = p-&gt;<span class="keyword">next</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            k %= <span class="built_in">len</span>;</div><div class="line">            <span class="keyword">if</span>(k == <span class="number">0</span>)</div><div class="line">                return head;</div><div class="line">            </div><div class="line">            p-&gt;<span class="keyword">next</span> = head;</div><div class="line">            <span class="keyword">while</span>(p)</div><div class="line">            &#123;</div><div class="line">                p = p-&gt;<span class="keyword">next</span>;</div><div class="line">                <span class="built_in">len</span>--;</div><div class="line">                <span class="keyword">if</span>(<span class="built_in">len</span> == k)</div><div class="line">                &#123;</div><div class="line">                    res = p-&gt;<span class="keyword">next</span>;</div><div class="line">                    p-&gt;<span class="keyword">next</span> = <span class="literal">NULL</span>;</div><div class="line">                    break;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            return res;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="82-Remove-Duplicates-from-Sorted-List-II"><a href="#82-Remove-Duplicates-from-Sorted-List-II" class="headerlink" title="82. Remove Duplicates from Sorted List II"></a>82. Remove Duplicates from Sorted List II</h2><h3 id="解题思路-7"><a href="#解题思路-7" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>第一次检测得到的节点<code>cur</code>可以保证其与前置节点不重复，此时将其设为待选节点置为<code>pre-&gt;next = cur</code>，再次循环，如果位置仍不改变<code>pre-&gt;next == cur</code>，则其后也没有重复节点，执行<code>pre = pre-&gt;next</code>即可；</li>
</ul>
</blockquote>
<h3 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">class Solution</div><div class="line">&#123;</div><div class="line">    <span class="symbol">public:</span></div><div class="line">        ListNode *deleteDuplicates(ListNode* head)</div><div class="line">        &#123;</div><div class="line">            if(head == NULL)</div><div class="line">                <span class="keyword">return</span> head;</div><div class="line">            ListNode *root = new ListNode((<span class="number">1</span>&lt;&lt;<span class="number">31</span>));</div><div class="line">            root-&gt;<span class="keyword">next</span> = head;</div><div class="line">            ListNode *cur = head;</div><div class="line">            ListNode *pre = root;</div><div class="line">            <span class="keyword">while</span>(cur)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">while</span>(cur-&gt;<span class="keyword">next</span> &amp;&amp; cur-&gt;val == cur-&gt;<span class="keyword">next</span>-&gt;val)</div><div class="line">                    cur = cur-&gt;<span class="keyword">next</span>;</div><div class="line">                if(pre-&gt;<span class="keyword">next</span> == cur)</div><div class="line">                    pre = pre-&gt;<span class="keyword">next</span>;</div><div class="line">                else</div><div class="line">                    pre-&gt;<span class="keyword">next</span> = cur-&gt;<span class="keyword">next</span>;</div><div class="line">                cur = cur-&gt;<span class="keyword">next</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> root-&gt;<span class="keyword">next</span>;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="83-Remove-Duplicates-from-Sorted-List"><a href="#83-Remove-Duplicates-from-Sorted-List" class="headerlink" title="83. Remove Duplicates from Sorted List"></a>83. Remove Duplicates from Sorted List</h2><h3 id="解题思路-8"><a href="#解题思路-8" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>简单题</li>
</ul>
</blockquote>
<h3 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a>代码</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">class Solution</div><div class="line">&#123;</div><div class="line">    <span class="symbol">public:</span></div><div class="line">        ListNode *deleteDuplicates(ListNode *head)</div><div class="line">        &#123;</div><div class="line">            if(head == NULL)</div><div class="line">                <span class="keyword">return</span> head;</div><div class="line">            ListNode * root = new ListNode(<span class="number">0</span>);</div><div class="line">            root-&gt;<span class="keyword">next</span> = head;</div><div class="line">            ListNode *pre = root;</div><div class="line">            ListNode *cur = head;</div><div class="line">            <span class="keyword">while</span>(cur)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">while</span>(cur-&gt;<span class="keyword">next</span> &amp;&amp; cur-&gt;<span class="keyword">next</span>-&gt;val == cur-&gt;val)</div><div class="line">                    cur = cur-&gt;<span class="keyword">next</span>;</div><div class="line">                pre-&gt;<span class="keyword">next</span> = cur;</div><div class="line">                pre = pre-&gt;<span class="keyword">next</span>;</div><div class="line">                cur = cur-&gt;<span class="keyword">next</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> root-&gt;<span class="keyword">next</span>;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="86-Partition-List"><a href="#86-Partition-List" class="headerlink" title="86. Partition List"></a>86. Partition List</h2><h3 id="解题思路-9"><a href="#解题思路-9" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>建立左右两个链表，将小于x的数全部放入到左链表中，其他的都放到右链表中，最后连接起来就好；</li>
</ul>
</blockquote>
<h3 id="代码-9"><a href="#代码-9" class="headerlink" title="代码"></a>代码</h3><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution</div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        ListNode* partition(ListNode* head, <span class="built_in">int</span> x)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(head == <span class="literal">NULL</span> || head-&gt;<span class="keyword">next</span> == <span class="literal">NULL</span>)</div><div class="line">                return head;</div><div class="line">            ListNode *<span class="built_in">left</span> = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</div><div class="line">            ListNode *<span class="built_in">right</span> = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</div><div class="line">            ListNode *l = <span class="built_in">left</span>;</div><div class="line">            ListNode *r = <span class="built_in">right</span>;</div><div class="line">            ListNode *p = head;</div><div class="line">            <span class="keyword">while</span>(p)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(p-&gt;val &lt; x)</div><div class="line">                &#123;</div><div class="line">                    l-&gt;<span class="keyword">next</span> = p;</div><div class="line">                    l = l-&gt;<span class="keyword">next</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                &#123;</div><div class="line">                    r-&gt;<span class="keyword">next</span> = p;</div><div class="line">                    r = r-&gt;<span class="keyword">next</span>;</div><div class="line">                &#125;</div><div class="line">                p = p-&gt;<span class="keyword">next</span>;</div><div class="line">            &#125;</div><div class="line">            r-&gt;<span class="keyword">next</span> = <span class="literal">NULL</span>;</div><div class="line">            l-&gt;<span class="keyword">next</span> = <span class="built_in">right</span>-&gt;<span class="keyword">next</span>;</div><div class="line">            return <span class="built_in">left</span>-&gt;<span class="keyword">next</span>;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="92-Reverse-Linked-List-II"><a href="#92-Reverse-Linked-List-II" class="headerlink" title="92. Reverse Linked List II"></a>92. Reverse Linked List II</h2><h3 id="解题思路-10"><a href="#解题思路-10" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>这里其实是应用了链表的逆序算法；</li>
</ul>
</blockquote>
<h3 id="代码-10"><a href="#代码-10" class="headerlink" title="代码"></a>代码</h3><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution</div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        ListNode* reverseBetween(ListNode* head, <span class="built_in">int</span> m, <span class="built_in">int</span> n)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(head == <span class="literal">NULL</span> || m == n)</div><div class="line">                return head;</div><div class="line">            ListNode *root = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</div><div class="line">            root-&gt;<span class="keyword">next</span> = head;</div><div class="line">            ListNode *pre, *cur, *<span class="built_in">left</span>;</div><div class="line">            <span class="built_in">left</span> = root;</div><div class="line">            <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; m; ++i)</div><div class="line">                <span class="built_in">left</span> = <span class="built_in">left</span>-&gt;<span class="keyword">next</span>;</div><div class="line">            pre = <span class="built_in">left</span>-&gt;<span class="keyword">next</span>;</div><div class="line">            cur = pre-&gt;<span class="keyword">next</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; n - m; ++i)</div><div class="line">            &#123;</div><div class="line">                pre-&gt;<span class="keyword">next</span> = cur-&gt;<span class="keyword">next</span>;</div><div class="line">                cur-&gt;<span class="keyword">next</span> = <span class="built_in">left</span>-&gt;<span class="keyword">next</span>;</div><div class="line">                <span class="built_in">left</span>-&gt;<span class="keyword">next</span> = cur;</div><div class="line">                cur = pre-&gt;<span class="keyword">next</span>;</div><div class="line">            &#125;</div><div class="line">            return root-&gt;<span class="keyword">next</span>;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="109-Convert-Sorted-List-to-Binary-Search-Tree"><a href="#109-Convert-Sorted-List-to-Binary-Search-Tree" class="headerlink" title="109. Convert Sorted List to Binary Search Tree"></a>109. Convert Sorted List to Binary Search Tree</h2><h3 id="解题思路-11"><a href="#解题思路-11" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>由于链表是有序的，需要先从中间开始插入，从而来保证树结构的平衡；</li>
<li>这里用到了slow和fast两个指针来快速求取链表中点；</li>
</ul>
</blockquote>
<h3 id="代码-11"><a href="#代码-11" class="headerlink" title="代码"></a>代码</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        TreeNode *sortedListToBST(ListNode *head)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(head == <span class="keyword">NULL</span>)</div><div class="line">                <span class="keyword">return</span> <span class="keyword">NULL</span>;</div><div class="line">            <span class="keyword">return</span> toTree(head, <span class="keyword">NULL</span>);</div><div class="line">        &#125;</div><div class="line">        TreeNode *toTree(ListNode *head, ListNode *tail)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(head == tail)</div><div class="line">                <span class="keyword">return</span> <span class="keyword">NULL</span>;</div><div class="line">            ListNode *slow = head;</div><div class="line">            ListNode *fast = head;</div><div class="line">            <span class="keyword">while</span>(fast != tail &amp;&amp; fast-&gt;next != tail)</div><div class="line">            &#123;</div><div class="line">                slow = slow-&gt;next;</div><div class="line">                fast = fast-&gt;next-&gt;next;</div><div class="line">            &#125;</div><div class="line">            TreeNode *res = <span class="keyword">new</span> TreeNode(slow-&gt;val);</div><div class="line">            res-&gt;left = toTree(head, slow);</div><div class="line">            res-&gt;right = toTree(slow-&gt;next, tail);</div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="138-Copy-List-with-Random-Pointer"><a href="#138-Copy-List-with-Random-Pointer" class="headerlink" title="138. Copy List with Random Pointer"></a>138. Copy List with Random Pointer</h2><h3 id="解题思路-12"><a href="#解题思路-12" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>首先在每个链表节点后面复制一个该节点，加入到链表中；</li>
<li>此时复制节点的random取值就变成：<code>cp-&gt;random = p-&gt;random-&gt;next</code>；</li>
<li>然后再将两个链表区分开来就可以了；</li>
</ul>
</blockquote>
<h3 id="代码-12"><a href="#代码-12" class="headerlink" title="代码"></a>代码</h3><figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">class Solution </div><div class="line">&#123;</div><div class="line">public:</div><div class="line">    RandomListNode *copyRandomList(RandomListNode *head) </div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(head == NULL)</div><div class="line">            return NULL;</div><div class="line">        RandomListNode *p = head;</div><div class="line">        RandomListNode *cp;</div><div class="line">        RandomListNode *res;</div><div class="line">        <span class="keyword">while</span>(p)</div><div class="line">        &#123;</div><div class="line">            <span class="function"><span class="title">cp</span> = new RandomListNode(p-&gt;</span>label);</div><div class="line">            <span class="function"><span class="title">cp</span>-&gt;</span><span class="function"><span class="title">next</span> = p-&gt;</span>next;</div><div class="line">            <span class="function"><span class="title">p</span>-&gt;</span>next = cp;</div><div class="line">            <span class="function"><span class="title">p</span> = cp-&gt;</span>next;</div><div class="line">        &#125;</div><div class="line">        p = head;</div><div class="line">        <span class="keyword">while</span>(p)</div><div class="line">        &#123;</div><div class="line">            <span class="function"><span class="title">cp</span> = p-&gt;</span>next;</div><div class="line">            <span class="function"><span class="title">if</span>(p-&gt;</span>random)</div><div class="line">                <span class="function"><span class="title">cp</span>-&gt;</span><span class="function"><span class="title">random</span> = p-&gt;</span><span class="function"><span class="title">random</span>-&gt;</span>next;</div><div class="line">            <span class="function"><span class="title">p</span> = cp-&gt;</span>next;</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="title">res</span> = head-&gt;</span>next;</div><div class="line">        p = head;</div><div class="line">        <span class="keyword">while</span>(p)</div><div class="line">        &#123;</div><div class="line">            <span class="function"><span class="title">cp</span> = p-&gt;</span>next;</div><div class="line">            <span class="function"><span class="title">p</span>-&gt;</span><span class="function"><span class="title">next</span> = cp-&gt;</span>next;</div><div class="line">            <span class="function"><span class="title">p</span> = p-&gt;</span>next;</div><div class="line">            <span class="keyword">if</span>(p)</div><div class="line">                <span class="function"><span class="title">cp</span>-&gt;</span><span class="function"><span class="title">next</span> = p-&gt;</span>next;</div><div class="line">        &#125;</div><div class="line">        return res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="141-Linked-List-Cycle"><a href="#141-Linked-List-Cycle" class="headerlink" title="141. Linked List Cycle"></a>141. Linked List Cycle</h2><h3 id="解题思路-13"><a href="#解题思路-13" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>简单题，使用快慢指针解决，如果有循环则快慢指针会相遇；</li>
</ul>
</blockquote>
<h3 id="代码-13"><a href="#代码-13" class="headerlink" title="代码"></a>代码</h3><figure class="highlight zephir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        <span class="keyword">bool</span> hasCycle(ListNode *head)</div><div class="line">        &#123;</div><div class="line">            ListNode *slow = head;</div><div class="line">            ListNode *fast = head;</div><div class="line">            <span class="keyword">while</span>(slow &amp;&amp; fast)</div><div class="line">            &#123;</div><div class="line">                slow = slow-&gt;next;</div><div class="line">                <span class="keyword">if</span>(fast-&gt;next)</div><div class="line">                    fast = fast-&gt;next-&gt;next;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">                <span class="keyword">if</span>(slow == fast)</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="142-Linked-List-Cycle-II"><a href="#142-Linked-List-Cycle-II" class="headerlink" title="142. Linked List Cycle II"></a>142. Linked List Cycle II</h2><h3 id="解题思路-14"><a href="#解题思路-14" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>使用快慢指针，第一次相遇时结束；快指针比慢指针多走了一倍的距离；</li>
<li>快指针多走了一个循环，通过画图分析，从相遇节点到<code>cycle begin</code>的距离正好等于从起始节点到<code>cycle begin</code>的距离；</li>
</ul>
</blockquote>
<h3 id="代码-14"><a href="#代码-14" class="headerlink" title="代码"></a>代码</h3><figure class="highlight zephir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span></div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    ListNode *detectCycle(ListNode *head) </div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(head == <span class="keyword">NULL</span> || head-&gt;next == <span class="keyword">NULL</span>)</div><div class="line">        	<span class="keyword">return</span> <span class="keyword">NULL</span>;</div><div class="line">        ListNode *slow = head;</div><div class="line">        ListNode *fast = head;</div><div class="line">        <span class="keyword">bool</span> isCycle = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">while</span>(slow &amp;&amp; fast)</div><div class="line">        &#123;</div><div class="line">        	slow = slow-&gt;next;</div><div class="line">        	<span class="keyword">if</span>(fast-&gt;next == <span class="keyword">NULL</span>)</div><div class="line">        		<span class="keyword">return</span> <span class="keyword">NULL</span>;</div><div class="line">        	fast = fast-&gt;next-&gt;next;</div><div class="line">        	<span class="keyword">if</span>(slow == fast)</div><div class="line">        	&#123;</div><div class="line">        		isCycle = <span class="keyword">true</span>;</div><div class="line">        		<span class="keyword">break</span>;</div><div class="line">        	&#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(!isCycle)</div><div class="line">        	<span class="keyword">return</span> <span class="keyword">NULL</span>;</div><div class="line">        slow = head;</div><div class="line">        <span class="keyword">while</span>(slow != fast)</div><div class="line">        &#123;</div><div class="line">        	slow = slow-&gt;next;</div><div class="line">        	fast = fast-&gt;next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> slow;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="143-Reorder-List"><a href="#143-Reorder-List" class="headerlink" title="143. Reorder List"></a>143. Reorder List</h2><h3 id="解题思路-15"><a href="#解题思路-15" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>使用快慢指针将链表从中间分成两部分，将后半部分进行逆序处理最后merge合并即可；</li>
</ul>
</blockquote>
<h3 id="代码-15"><a href="#代码-15" class="headerlink" title="代码"></a>代码</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">class Solution </div><div class="line">&#123;</div><div class="line"><span class="symbol">public:</span></div><div class="line">    void reorderList(ListNode* head) </div><div class="line">    &#123;</div><div class="line">    	if(head == NULL || head-&gt;<span class="keyword">next</span> == NULL)</div><div class="line">    		<span class="keyword">return</span>;</div><div class="line">    	ListNode *p1 = head;</div><div class="line">    	ListNode *p2 = head-&gt;<span class="keyword">next</span>;</div><div class="line">    	<span class="keyword">while</span>(p2 &amp;&amp; p2-&gt;<span class="keyword">next</span>)</div><div class="line">    	&#123;</div><div class="line">    		p1 = p1-&gt;<span class="keyword">next</span>;</div><div class="line">    		p2 = p2-&gt;<span class="keyword">next</span>-&gt;<span class="keyword">next</span>;</div><div class="line">    	&#125;</div><div class="line"></div><div class="line">    	ListNode *head2 = p1-&gt;<span class="keyword">next</span>;</div><div class="line">    	p1-&gt;<span class="keyword">next</span> = NULL;</div><div class="line"></div><div class="line">    	p2 = head2-&gt;<span class="keyword">next</span>;</div><div class="line">    	head2-&gt;<span class="keyword">next</span> = NULL;</div><div class="line">    	<span class="keyword">while</span>(p2)</div><div class="line">    	&#123;</div><div class="line">    		p1 = p2-&gt;<span class="keyword">next</span>;</div><div class="line">    		p2-&gt;<span class="keyword">next</span> = head2;</div><div class="line">    		head2 = p2;</div><div class="line">    		p2 = p1;</div><div class="line">    	&#125;</div><div class="line"></div><div class="line">    	<span class="keyword">for</span>(p1 = head, p2 = head2; p1; )</div><div class="line">    	&#123;</div><div class="line">    		auto temp = p1-&gt;<span class="keyword">next</span>;</div><div class="line">    		p1 = p1-&gt;<span class="keyword">next</span> = p2;</div><div class="line">    		p2 = temp;</div><div class="line">    	&#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="160-Intersection-of-Two-Linked-Lists"><a href="#160-Intersection-of-Two-Linked-Lists" class="headerlink" title="160. Intersection of Two Linked Lists"></a>160. Intersection of Two Linked Lists</h2><h3 id="解题思路-16"><a href="#解题思路-16" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>如果两个链表有重复的部分，则<code>A+B</code>和<code>B+A</code>对齐就可以直接找到重复的部分；</li>
</ul>
</blockquote>
<h3 id="代码-16"><a href="#代码-16" class="headerlink" title="代码"></a>代码</h3><figure class="highlight monkey"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span></div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) </div><div class="line">    &#123;</div><div class="line">        ListNode *p = headA;</div><div class="line">        ListNode *q = headB;</div><div class="line">        <span class="keyword">if</span>(p == <span class="literal">NULL</span> || p == <span class="literal">NULL</span>)</div><div class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">        <span class="keyword">while</span>(p &amp;&amp; q &amp;&amp; p != q)</div><div class="line">        &#123;</div><div class="line">        	p = p-&gt;<span class="keyword">next</span>;</div><div class="line">        	q = q-&gt;<span class="keyword">next</span>;</div><div class="line">            <span class="keyword">if</span>(p == q)</div><div class="line">                <span class="keyword">return</span> p;  </div><div class="line">            <span class="keyword">if</span>(p == <span class="literal">NULL</span>)</div><div class="line">                p = headB;</div><div class="line">            <span class="keyword">if</span>(q == <span class="literal">NULL</span>)</div><div class="line">                q = headA;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> p;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="203-Remove-Linked-List-Elements"><a href="#203-Remove-Linked-List-Elements" class="headerlink" title="203. Remove Linked List Elements"></a>203. Remove Linked List Elements</h2><h3 id="解题思路-17"><a href="#解题思路-17" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<p>*　简单题，不多说了；</p>
</blockquote>
<h3 id="代码-17"><a href="#代码-17" class="headerlink" title="代码"></a>代码</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">class Solution </div><div class="line">&#123;</div><div class="line"><span class="symbol">public:</span></div><div class="line">    ListNode* removeElements(ListNode* head, int val) </div><div class="line">    &#123;</div><div class="line">        ListNode *root = new ListNode(<span class="number">0</span>);</div><div class="line">        root-&gt;<span class="keyword">next</span> = head;</div><div class="line">        ListNode *cur = root;</div><div class="line">        <span class="keyword">while</span>(cur-&gt;<span class="keyword">next</span>)</div><div class="line">        &#123;</div><div class="line">        	if(cur-&gt;<span class="keyword">next</span>-&gt;val == val)</div><div class="line">            &#123;</div><div class="line">                cur-&gt;<span class="keyword">next</span> = cur-&gt;<span class="keyword">next</span>-&gt;<span class="keyword">next</span>;</div><div class="line">            &#125;</div><div class="line">            else</div><div class="line">                cur = cur-&gt;<span class="keyword">next</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> root-&gt;<span class="keyword">next</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="206-Reverse-Linked-List"><a href="#206-Reverse-Linked-List" class="headerlink" title="206. Reverse Linked List"></a>206. Reverse Linked List</h2><h3 id="解题思路-18"><a href="#解题思路-18" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>链表的逆序处理；</li>
</ul>
</blockquote>
<h3 id="代码-18"><a href="#代码-18" class="headerlink" title="代码"></a>代码</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line"><span class="symbol">public:</span></div><div class="line">    ListNode* reverseList(ListNode* head) </div><div class="line">    &#123;</div><div class="line">        if(head == NULL || head-&gt;<span class="keyword">next</span> == NULL)</div><div class="line">        	<span class="keyword">return</span> head;</div><div class="line">        ListNode *pre = head;</div><div class="line">        ListNode *cur = head-&gt;<span class="keyword">next</span>;</div><div class="line">        ListNode *temp;</div><div class="line">        pre-&gt;<span class="keyword">next</span> = NULL;</div><div class="line">        <span class="keyword">while</span>(cur-&gt;<span class="keyword">next</span>)</div><div class="line">        &#123;</div><div class="line">        	temp = cur-&gt;<span class="keyword">next</span>;</div><div class="line">        	cur-&gt;<span class="keyword">next</span> = pre;</div><div class="line">        	pre = cur;</div><div class="line">        	cur = temp;</div><div class="line">        &#125;</div><div class="line">        cur-&gt;<span class="keyword">next</span> = pre;</div><div class="line">        <span class="keyword">return</span> cur;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="234-Palindrome-Linked-List"><a href="#234-Palindrome-Linked-List" class="headerlink" title="234. Palindrome Linked List"></a>234. Palindrome Linked List</h2><h3 id="解题思路-19"><a href="#解题思路-19" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>使用快慢指针将链表分成两个部分，将后半部分进行逆序处理然后进行比较是否为回文；    </li>
</ul>
</blockquote>
<h3 id="代码-19"><a href="#代码-19" class="headerlink" title="代码"></a>代码</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">class Solution </div><div class="line">&#123;</div><div class="line"><span class="symbol">public:</span></div><div class="line">    bool isPalindrome(ListNode* head) </div><div class="line">    &#123;</div><div class="line">        if(head == NULL || head-&gt;<span class="keyword">next</span> == NULL)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        ListNode *slow = head;</div><div class="line">        ListNode *fast = head;</div><div class="line">        <span class="keyword">while</span>(fast-&gt;<span class="keyword">next</span> &amp;&amp; fast-&gt;<span class="keyword">next</span>-&gt;<span class="keyword">next</span>)</div><div class="line">        &#123;</div><div class="line">            slow = slow-&gt;<span class="keyword">next</span>;</div><div class="line">            fast = fast-&gt;<span class="keyword">next</span>-&gt;<span class="keyword">next</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        ListNode *pre = slow-&gt;<span class="keyword">next</span>;</div><div class="line">        ListNode *cur = pre-&gt;<span class="keyword">next</span>;</div><div class="line">        slow-&gt;<span class="keyword">next</span> = NULL;</div><div class="line">        pre-&gt;<span class="keyword">next</span> = NULL;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(cur)</div><div class="line">        &#123;</div><div class="line">            ListNode *temp = cur-&gt;<span class="keyword">next</span>;</div><div class="line">            cur-&gt;<span class="keyword">next</span> = pre;</div><div class="line">            pre = cur;</div><div class="line">            cur = temp;</div><div class="line">        &#125;</div><div class="line">        ListNode *p = head;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(pre &amp;&amp; p)</div><div class="line">        &#123;</div><div class="line">            if(pre-&gt;val != p-&gt;val)</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            pre = pre-&gt;<span class="keyword">next</span>;</div><div class="line">            p = p-&gt;<span class="keyword">next</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="237-Delete-Node-in-a-Linked-List"><a href="#237-Delete-Node-in-a-Linked-List" class="headerlink" title="237. Delete Node in a Linked List"></a>237. Delete Node in a Linked List</h2><h3 id="解题思路-20"><a href="#解题思路-20" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>这个题，搞明白题意就可以，将要删除的节点数据替换成下一节点的数据；</li>
</ul>
</blockquote>
<h3 id="代码-20"><a href="#代码-20" class="headerlink" title="代码"></a>代码</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">class Solution </div><div class="line">&#123;</div><div class="line">public:</div><div class="line">    void deleteNode(ListNode* <span class="keyword">node</span><span class="title">) </span></div><div class="line">    &#123;</div><div class="line">        *node = *<span class="keyword">node</span><span class="title">-&gt;next</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="328-Odd-Even-Linked-List"><a href="#328-Odd-Even-Linked-List" class="headerlink" title="328. Odd Even Linked List"></a>328. Odd Even Linked List</h2><h3 id="解题思路-21"><a href="#解题思路-21" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>两个两个向后扫描即可，得到奇偶两条链表链接到一块；</li>
</ul>
</blockquote>
<h3 id="代码-21"><a href="#代码-21" class="headerlink" title="代码"></a>代码</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">class Solution </div><div class="line">&#123;</div><div class="line"><span class="symbol">public:</span></div><div class="line">    ListNode* oddEvenList(ListNode* head) </div><div class="line">    &#123;</div><div class="line">        if(head == NULL || head-&gt;<span class="keyword">next</span> == NULL)</div><div class="line">        	<span class="keyword">return</span> head;</div><div class="line">        ListNode *odd =  head;</div><div class="line">        ListNode *even = head-&gt;<span class="keyword">next</span>;</div><div class="line">        ListNode *evenStart = even;</div><div class="line">        <span class="keyword">while</span>(even &amp;&amp; even-&gt;<span class="keyword">next</span>)</div><div class="line">        &#123;</div><div class="line">        	odd-&gt;<span class="keyword">next</span> = odd-&gt;<span class="keyword">next</span>-&gt;<span class="keyword">next</span>;</div><div class="line">        	even-&gt;<span class="keyword">next</span> = even-&gt;<span class="keyword">next</span>-&gt;<span class="keyword">next</span>;</div><div class="line">        	odd = odd-&gt;<span class="keyword">next</span>;</div><div class="line">        	even = even-&gt;<span class="keyword">next</span>;</div><div class="line">        &#125;</div><div class="line">        odd-&gt;<span class="keyword">next</span> = evenStart;</div><div class="line">        <span class="keyword">return</span> head;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="445-Add-Two-Numbers-II"><a href="#445-Add-Two-Numbers-II" class="headerlink" title="445. Add Two Numbers II"></a>445. Add Two Numbers II</h2><h3 id="解题思路-22"><a href="#解题思路-22" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>利用<code>l1+l2</code>和<code>l2+l1</code>实现对齐，利用两个bool标记何时数值有效；</li>
<li>将结果保存到一个<code>vector</code>中，最后求取进位后构建链表；</li>
</ul>
</blockquote>
<h3 id="代码-22"><a href="#代码-22" class="headerlink" title="代码"></a>代码</h3><figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span></div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) </div><div class="line">    &#123;</div><div class="line">    	bool f1 = <span class="keyword">false</span>;</div><div class="line">    	bool f2 = <span class="keyword">false</span>;</div><div class="line">    	vector&lt;<span class="keyword">int</span>&gt; <span class="keyword">sum</span>;</div><div class="line">        ListNode *res = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</div><div class="line">        ListNode *p = l1;</div><div class="line">        ListNode *q = l2;</div><div class="line">        <span class="keyword">while</span>(p &amp;&amp; q)</div><div class="line">        &#123;</div><div class="line">        	<span class="keyword">if</span>(f1 || f2)</div><div class="line">        	&#123;</div><div class="line">        		<span class="keyword">int</span> temp = (f1 ? p-&gt;val : <span class="number">0</span>) + (f2 ? q-&gt;val : <span class="number">0</span>);</div><div class="line">        		<span class="keyword">sum</span>.push_back(temp);</div><div class="line">        	&#125;</div><div class="line">        	p = p-&gt;next;</div><div class="line">        	q = q-&gt;next;</div><div class="line">        	<span class="keyword">if</span>(f1 &amp;&amp; f2 &amp;&amp; p == q)</div><div class="line">        		<span class="keyword">break</span>;</div><div class="line">        	<span class="keyword">if</span>(p == NULL)&#123; p = l2; f1 = <span class="keyword">true</span>; &#125;</div><div class="line">        	<span class="keyword">if</span>(q == NULL)&#123; q = l1; f2 = <span class="keyword">true</span>; &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> carry = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="keyword">sum</span>.size()<span class="number">-1</span>; i &gt;= <span class="number">0</span>; --i)</div><div class="line">        &#123;</div><div class="line">        	<span class="keyword">sum</span>[i] = <span class="keyword">sum</span>[i] + carry;</div><div class="line">        	carry = <span class="keyword">sum</span>[i] / <span class="number">10</span>;</div><div class="line">        	<span class="keyword">sum</span>[i] %= <span class="number">10</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(carry)</div><div class="line">        	<span class="keyword">sum</span>.insert(<span class="keyword">sum</span>.begin(), carry);</div><div class="line"></div><div class="line">        ListNode *cur = res;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sum</span>.size(); ++i)</div><div class="line">        &#123;</div><div class="line">        	cur-&gt;next = <span class="keyword">new</span> ListNode(<span class="keyword">sum</span>[i]);</div><div class="line">        	cur = cur-&gt;next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res-&gt;next;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文包含如下题目：&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/add-two-numbers/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;2. Add Two Numbers&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/remove-nth-node-from-end-of-list/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;19. Remove Nth Node From End of List&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/merge-two-sorted-lists/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;21. Merge Two Sorted Lists&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/merge-k-sorted-lists/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;23. Merge k Sorted Lists&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/swap-nodes-in-pairs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;24. Swap Nodes in Pairs&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/reverse-nodes-in-k-group/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;25. Reverse Nodes in k-Group&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/rotate-list/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;61. Rotate List&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/remove-duplicates-from-sorted-list-ii/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;82. Remove Duplicates from Sorted List II&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/remove-duplicates-from-sorted-list/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;83. Remove Duplicates from Sorted List&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/partition-list/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;86. Partition List&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/reverse-linked-list-ii/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;92. Reverse Linked List II&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/convert-sorted-list-to-binary-search-tree/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;109. Convert Sorted List to Binary Search Tree&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/copy-list-with-random-pointer/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;138. Copy List with Random Pointer&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/linked-list-cycle/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;141. Linked List Cycle&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/linked-list-cycle-ii/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;142. Linked List Cycle II&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/reorder-list/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;143. Reorder List&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/intersection-of-two-linked-lists/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;160. Intersection of Two Linked Lists&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/remove-linked-list-elements/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;203. Remove Linked List Elements&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/reverse-linked-list/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;206. Reverse Linked List&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/palindrome-linked-list/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;234. Palindrome Linked List&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/delete-node-in-a-linked-list/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;237. Delete Node in a Linked List&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/odd-even-linked-list/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;328. Odd Even Linked List&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/add-two-numbers-ii/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;445. Add Two Numbers II&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://haoyuanliu.github.io/categories/LeetCode/"/>
    
    
      <category term="LinkList" scheme="http://haoyuanliu.github.io/tags/LinkList/"/>
    
      <category term="LeetCode" scheme="http://haoyuanliu.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>归并排序的实现与深入应用分析</title>
    <link href="http://haoyuanliu.github.io/2016/12/28/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%B8%8E%E6%B7%B1%E5%85%A5%E5%BA%94%E7%94%A8%E5%88%86%E6%9E%90/"/>
    <id>http://haoyuanliu.github.io/2016/12/28/归并排序的实现与深入应用分析/</id>
    <published>2016-12-28T07:08:27.000Z</published>
    <updated>2017-07-01T08:19:25.157Z</updated>
    
    <content type="html"><![CDATA[<p>归并排序是我们经常使用的一种排序方法，其特性为：<br>最差时间复杂度：O(nlogn)<br>平均时间复杂度：O(nlogn)<br>最差空间复杂度：O(n)<br>稳定性：稳定<br>本文主要介绍在LeetCode中用到归并排序的两道例题，详细展示一下归并排序的强大应用；</p>
<a id="more"></a>
<h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p>下面的代码是使用c++的vector编写的归并排序，方便读者阅读理解归并排序：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">MergeSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(right - left &lt;= <span class="number">1</span>)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</div><div class="line">    MergeSort(nums, left, mid);</div><div class="line">    MergeSort(nums, mid, right);</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; temp(right - left, <span class="number">0</span>);</div><div class="line">    <span class="keyword">int</span> l = left;</div><div class="line">    <span class="keyword">int</span> r = mid;</div><div class="line">    <span class="keyword">int</span> s = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(l &lt; mid &amp;&amp; r &lt; right)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(nums[l] &lt; nums[r])</div><div class="line">            temp[s++] = nums[l++];</div><div class="line">        <span class="keyword">else</span></div><div class="line">            temp[s++] = nums[r++];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span>(l &lt; mid)</div><div class="line">        temp[s++] = nums[l++];</div><div class="line">    <span class="keyword">while</span>(r &lt; right)</div><div class="line">        temp[s++] = nums[r++];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = left; i &lt; right; ++i)</div><div class="line">        nums[i] = temp[i-left];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nums;</div><div class="line">    <span class="keyword">int</span> num;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; num)</div><div class="line">        nums.push_back(num);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> x : nums)</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="string">" "</span>;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    MergeSort(nums, <span class="number">0</span>, nums.size());</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> x : nums)</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="string">" "</span>;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="归并排序应用"><a href="#归并排序应用" class="headerlink" title="归并排序应用"></a>归并排序应用</h2><h3 id="315-Count-of-Smaller-Numbers-After-Self"><a href="#315-Count-of-Smaller-Numbers-After-Self" class="headerlink" title="315. Count of Smaller Numbers After Self"></a><a href="https://leetcode.com/problems/count-of-smaller-numbers-after-self/" target="_blank" rel="external">315. Count of Smaller Numbers After Self</a></h3><p>You are given an integer array nums and you have to return a new counts array. The counts array has the property where counts[i] is the number of smaller elements to the right of nums[i].</p>
<p><strong>Example:</strong></p>
<p>Given nums = [5, 2, 6, 1]</p>
<blockquote>
<ul>
<li>To the right of 5 there are 2 smaller elements (2 and 1).</li>
<li>To the right of 2 there is only 1 smaller element (1).</li>
<li>To the right of 6 there is 1 smaller element (1).</li>
<li>To the right of 1 there is 0 smaller element.</li>
</ul>
</blockquote>
<p>Return the array [2, 1, 1, 0].</p>
<h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>以[5, 2, 6, 1]为例，我们使用归并排序解决这个问题：<br>首先归并排序将[5, 2, 6, 1]分为</p>
<blockquote>
<p><code>[5, 2]</code>, <code>[6, 1]</code></p>
</blockquote>
<p>然后因为再归并的话可以得到</p>
<blockquote>
<p><code>[[5], [2]]</code>, <code>[[6], [1]]</code></p>
</blockquote>
<p>在<code>[[6], [1]]</code>中，<code>[1]</code>位于整个区间的右部，所以结果为0；<code>[6]</code>位于左边，使<code>[6]</code>中每个元素都与右边<code>[1]</code>比较，可以得到<code>6</code>的count值为1；比较完成后对<code>[[6], [1]]</code>进行排序，得到：</p>
<blockquote>
<p><code>[[5], [2]]</code>, <code>[[1], [6(1)]]</code></p>
</blockquote>
<p>然后在<code>[[5], [2]]</code>中执行相同的操作，<code>2</code>的count值为0， <code>5</code>的count值为1，得到：</p>
<blockquote>
<p><code>[[2], [5(1)]]</code>, <code>[[1], [6(1)]]</code></p>
</blockquote>
<p>然后在<code>[[[2], [5(1)]], [[1], [6(1)]]]</code>中进行比较，左边<code>[[2], [5(1)]]</code>中每个数值都在<code>[[1], [6(1)]]</code>进行遍历计数，由于<code>[[1], [6(1)]]</code>和<code>[[2], [5(1)]]</code>都已经排好序了，所以只需要遍历一遍就可以得到结果：</p>
<blockquote>
<p><code>[[2(1)], [5(2)]]</code>, <code>[[1], [6(1)]]</code></p>
</blockquote>
<p>每次通过辅助的拷贝数组将计数信息保存到正确的位置即可；<br>由于使用了归并排序，所以每次进行比较的时候都是比较的有序队列，这样可以很好地提高效率，同时也保证了每一轮次左右相对位置的稳定；</p>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; countSmaller(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> len = nums.size();</div><div class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res(len, <span class="number">0</span>);</div><div class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; index;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</div><div class="line">                index.push_back(i);</div><div class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; numUpdate = nums;</div><div class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; indexUpdate = index;</div><div class="line">            solve(res, nums, index, <span class="number">0</span>, len, numUpdate, indexUpdate);</div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;res, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;index, <span class="keyword">int</span> start, <span class="keyword">int</span> end, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;numUpdate, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;indexUpdate)</span></span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(end - start &lt;= <span class="number">1</span>)</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            <span class="keyword">int</span> mid = (start + end) / <span class="number">2</span>;</div><div class="line">            solve(res, nums, index, mid, end, numUpdate, indexUpdate);</div><div class="line">            solve(res, nums, index, start, mid, numUpdate, indexUpdate);</div><div class="line">            <span class="keyword">int</span> r = mid;</div><div class="line">            <span class="keyword">int</span> t = mid;</div><div class="line">            <span class="keyword">int</span> s = start;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> l = start; l &lt; mid; ++l)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">while</span>(nums[l] &gt; nums[r] &amp;&amp; r &lt; end)</div><div class="line">                    r++;</div><div class="line">                <span class="keyword">while</span>(t &lt; end &amp;&amp; nums[t] &lt;= nums[l])</div><div class="line">                &#123;</div><div class="line">                    numUpdate[s] = nums[t];</div><div class="line">                    indexUpdate[s++] = index[t++];</div><div class="line">                &#125;</div><div class="line">                numUpdate[s] = nums[l];</div><div class="line">                indexUpdate[s++] = index[l];</div><div class="line">                res[index[l]] += r - mid;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = start; i &lt; end; ++i)</div><div class="line">            &#123;</div><div class="line">                nums[i] = numUpdate[i];</div><div class="line">                index[i] = indexUpdate[i];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="327-Count-of-Range-Sum"><a href="#327-Count-of-Range-Sum" class="headerlink" title="327. Count of Range Sum"></a><a href="https://leetcode.com/problems/count-of-range-sum/" target="_blank" rel="external">327. Count of Range Sum</a></h3><p>Given an integer array <code>nums</code>, return the number of range sums that lie in <code>[lower, upper]</code> inclusive.<br>Range sum <code>S(i, j)</code> is defined as the sum of the elements in <code>nums</code> between indices <code>i</code> and <code>j</code> <code>(i ≤ j)</code>, inclusive.</p>
<p><strong>Note:</strong><br>A naive algorithm of <code>O(n2)</code> is trivial. You MUST do better than that.</p>
<p><strong>Example:</strong><br>Given nums = <code>[-2, 5, -1]</code>, lower = <code>-2</code>, upper = <code>2</code>,<br>Return <code>3</code>.<br>The three ranges are : <code>[0, 0]</code>, <code>[2, 2]</code>, <code>[0, 2]</code> and their respective sums are: <code>-2</code>, <code>-1</code>, <code>2</code>.</p>
<h4 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h4><p>这一题跟上面一题类似，都要使用归并排序进行分段求解；<br>首先构建一个<code>sum</code>的数组，<code>sum[i]</code>表示从<code>0～i</code>的子区间的元素之和，这样<code>sum[i][j]</code>就表示从<code>i～j</code>的子区间的元素之和，从而问题也就转化为求取<code>sum</code>数组中<code>sum[i]</code>之后的<code>sum[j]</code>满足<code>lower &lt;= sum[j] - sum[i] &lt;= upper</code>的个数，其中<code>i&lt;=j</code>，就相当于上面那个题加了一个上下界；<br>则仍然使用上面归并排序的思路，在归并排序的过程中进行计数计算，对于左边的每个元素，都在右边的元素中去找两个参数:</p>
<blockquote>
<p><code>left</code>：第一个满足 <code>sum[j] - sum[i] &gt;= lower</code>，即为左边界；<br><code>right</code>：第一个满足 <code>sum[j] - sum[i] &gt; upper</code>，即为右边界；</p>
</blockquote>
<p>则<code>right-left</code>即为所求的计数个数，不断叠加即可；</p>
<p>因为每一次归并之后左右两个部分都是有序的序列，所以这里<code>left</code>和<code>right</code>同样只需要扫描一遍即可；</p>
<h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight q"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">class Solution</div><div class="line">&#123;</div><div class="line">    public:</div><div class="line">        <span class="type">int</span> countRangeSum(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> <span class="built_in">lower</span>, <span class="type">int</span> <span class="built_in">upper</span>) </div><div class="line">        &#123;</div><div class="line">            <span class="type">int</span> len = nums.size();</div><div class="line">            if(len == <span class="number">0</span>)</div><div class="line">                return <span class="number">0</span>;</div><div class="line">            vector&lt;long&gt; <span class="built_in">sums</span>(len+<span class="number">1</span>, <span class="number">0</span>);</div><div class="line">            for(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</div><div class="line">                <span class="built_in">sums</span>[i+<span class="number">1</span>] = <span class="built_in">sums</span>[i] + nums[i];</div><div class="line">            vector&lt;long&gt; sumUpdate = <span class="built_in">sums</span>;</div><div class="line">            return solve(<span class="built_in">sums</span>, sumUpdate, <span class="number">0</span>, len+<span class="number">1</span>, <span class="built_in">lower</span>, <span class="built_in">upper</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="type">int</span> solve(vector&lt;long&gt; &amp;<span class="built_in">sums</span>, vector&lt;long&gt; &amp;sumUpdate, <span class="type">int</span> start, <span class="type">int</span> end, <span class="type">int</span> <span class="built_in">lower</span>, <span class="type">int</span> <span class="built_in">upper</span>)</div><div class="line">        &#123;</div><div class="line">            if(end - start &lt;= <span class="number">1</span>)</div><div class="line">                return <span class="number">0</span>;</div><div class="line">            <span class="type">int</span> mid = (end + start) / <span class="number">2</span>;</div><div class="line">            <span class="type">int</span> <span class="built_in">count</span> = solve(<span class="built_in">sums</span>, sumUpdate, start, mid, <span class="built_in">lower</span>, <span class="built_in">upper</span>)</div><div class="line">                + solve(<span class="built_in">sums</span>, sumUpdate, mid, end, <span class="built_in">lower</span>, <span class="built_in">upper</span>);</div><div class="line">            <span class="type">int</span> l = mid;</div><div class="line">            <span class="type">int</span> r = mid;</div><div class="line">            <span class="type">int</span> t = mid;</div><div class="line">            <span class="type">int</span> s = start;</div><div class="line">            for(<span class="type">int</span> i = start; i &lt; mid; ++i)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">while</span>(<span class="built_in">sums</span>[l] - <span class="built_in">sums</span>[i] &lt; <span class="built_in">lower</span> &amp;&amp; l &lt; end)</div><div class="line">                    l++;</div><div class="line">                <span class="keyword">while</span>(<span class="built_in">sums</span>[r] - <span class="built_in">sums</span>[i] &lt;= <span class="built_in">upper</span> &amp;&amp; r &lt; end)</div><div class="line">                    r++;</div><div class="line">                <span class="keyword">while</span>(<span class="built_in">sums</span>[i] &gt; <span class="built_in">sums</span>[t] &amp;&amp; t &lt; end)</div><div class="line">                    sumUpdate[s++] = <span class="built_in">sums</span>[t++];</div><div class="line">                sumUpdate[s++] = <span class="built_in">sums</span>[i];</div><div class="line">                <span class="built_in">count</span> += r - l;</div><div class="line">            &#125;</div><div class="line">            for(<span class="type">int</span> i = start; i &lt; end; ++i)</div><div class="line">                <span class="built_in">sums</span>[i] = sumUpdate[i];</div><div class="line">            return <span class="built_in">count</span>;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;归并排序是我们经常使用的一种排序方法，其特性为：&lt;br&gt;最差时间复杂度：O(nlogn)&lt;br&gt;平均时间复杂度：O(nlogn)&lt;br&gt;最差空间复杂度：O(n)&lt;br&gt;稳定性：稳定&lt;br&gt;本文主要介绍在LeetCode中用到归并排序的两道例题，详细展示一下归并排序的强大应用；&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="http://haoyuanliu.github.io/categories/Algorithm/"/>
    
    
      <category term="LeetCode" scheme="http://haoyuanliu.github.io/tags/LeetCode/"/>
    
      <category term="MergeSort" scheme="http://haoyuanliu.github.io/tags/MergeSort/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode Divide and Conquer</title>
    <link href="http://haoyuanliu.github.io/2016/12/27/LeetCode-Divide-and-Conquer/"/>
    <id>http://haoyuanliu.github.io/2016/12/27/LeetCode-Divide-and-Conquer/</id>
    <published>2016-12-27T13:06:45.000Z</published>
    <updated>2017-07-01T08:19:25.157Z</updated>
    
    <content type="html"><![CDATA[<p>本文包含如下题目：</p>
<p><a href="https://leetcode.com/problems/the-skyline-problem/" target="_blank" rel="external">218. The Skyline Problem</a><br><a href="https://leetcode.com/problems/different-ways-to-add-parentheses/" target="_blank" rel="external">241. Different Ways to Add Parentheses</a><br><a href="https://leetcode.com/problems/expression-add-operators/" target="_blank" rel="external">282. Expression Add Operators</a><br><a href="https://leetcode.com/problems/burst-balloons/" target="_blank" rel="external">312. Burst Balloons</a><br><a href="https://leetcode.com/problems/count-of-smaller-numbers-after-self/" target="_blank" rel="external">315. Count of Smaller Numbers After Self</a><br><a href="https://leetcode.com/problems/count-of-range-sum/" target="_blank" rel="external">327. Count of Range Sum</a></p>
<a id="more"></a>
<h2 id="218-The-Skyline-Problem"><a href="#218-The-Skyline-Problem" class="headerlink" title="218. The Skyline Problem"></a>218. The Skyline Problem</h2><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>强烈推荐看这个分析，<a href="https://briangordon.github.io/2014/08/the-skyline-problem.html" target="_blank" rel="external">文章链接</a>！！！！！！！</li>
<li>只有矩阵的左右边界会对最后的结果产生影响，使用vector保存全部边界并进行排序；</li>
<li>使用priority_queue的heap结构维持一个存储高度的堆，如果是左边界，则其高度数据push进去，如果是右边界，则将该高度标记为废弃，在后面访问到的时候删除；</li>
<li>如果改边界获取的最大高度值与之前一样，则不操作，否则，将边界值和高度信息push进答案中去；</li>
<li>这里使用了priority_queue的堆结构特性，可以很快的访问到最大值；</li>
<li>使用unordered_map比map要快很多，因为它不排序；</li>
</ul>
</blockquote>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; a, <span class="keyword">const</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; b)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> a.first != b.first ? a.first &lt; b.first : a.second &lt; b.second;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; getSkyline(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; buildings) </div><div class="line">        &#123;</div><div class="line">            <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; res;</div><div class="line">            <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; heights;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> build : buildings)</div><div class="line">            &#123;</div><div class="line">                heights.push_back(make_pair(build[<span class="number">0</span>], -build[<span class="number">2</span>]));</div><div class="line">                heights.push_back(make_pair(build[<span class="number">1</span>], build[<span class="number">2</span>]));</div><div class="line">            &#125;</div><div class="line">            sort(heights.begin(), heights.end(), cmp);</div><div class="line">            <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; isEnd;</div><div class="line">            priority_queue&lt;<span class="keyword">int</span>&gt; que;</div><div class="line">            <span class="keyword">int</span> pre = <span class="number">0</span>;</div><div class="line">            que.push(<span class="number">0</span>);</div><div class="line">            <span class="keyword">int</span> cur;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> height : heights)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(height.second &lt; <span class="number">0</span>)</div><div class="line">                &#123;</div><div class="line">                    que.push(-height.second);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                &#123;</div><div class="line">                    ++isEnd[height.second];</div><div class="line">                    <span class="keyword">while</span>(!que.empty() &amp;&amp; isEnd[que.top()] &gt; <span class="number">0</span>)</div><div class="line">                    &#123;</div><div class="line">                        --isEnd[que.top()];</div><div class="line">                        que.pop();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                cur = que.top();</div><div class="line">                <span class="keyword">if</span>(cur != pre)</div><div class="line">                &#123;</div><div class="line">                    pre = cur;</div><div class="line">                    res.push_back(make_pair(height.first, cur));</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="241-Different-Ways-to-Add-Parentheses"><a href="#241-Different-Ways-to-Add-Parentheses" class="headerlink" title="241. Different Ways to Add Parentheses"></a>241. Different Ways to Add Parentheses</h2><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>每个运算选项都有可能是最后一个运算，由此展开进行求算；</li>
<li>使用递归来求解，要注意仔细观察原函数的输入和输出来确定递归的调用方式；</li>
</ul>
</blockquote>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; diffWaysToCompute(<span class="built_in">string</span> input)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</div><div class="line">            <span class="keyword">int</span> len = input.size();</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(input[i] == <span class="string">'+'</span> || input[i] == <span class="string">'-'</span> || input[i] == <span class="string">'*'</span>)</div><div class="line">                &#123;</div><div class="line">                    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; r1 = diffWaysToCompute(input.substr(<span class="number">0</span>, i));</div><div class="line">                    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; r2 = diffWaysToCompute(input.substr(i+<span class="number">1</span>));</div><div class="line">                    <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> a : r1)</div><div class="line">                    &#123;</div><div class="line">                        <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> b : r2)</div><div class="line">                        &#123;</div><div class="line">                            <span class="keyword">if</span>(input[i] == <span class="string">'+'</span>)</div><div class="line">                                res.push_back(a + b);</div><div class="line">                            <span class="keyword">else</span> <span class="keyword">if</span>(input[i] == <span class="string">'-'</span>)</div><div class="line">                                res.push_back(a - b);</div><div class="line">                            <span class="keyword">else</span> <span class="keyword">if</span>(input[i] == <span class="string">'*'</span>)</div><div class="line">                                res.push_back(a * b);</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(res.empty())</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">int</span> temp = <span class="number">0</span>;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> ch : input)</div><div class="line">                &#123;</div><div class="line">                    temp = temp * <span class="number">10</span> + ch - <span class="string">'0'</span>;</div><div class="line">                &#125;</div><div class="line">                res.push_back(temp);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="282-Expression-Add-Operators"><a href="#282-Expression-Add-Operators" class="headerlink" title="282. Expression Add Operators"></a>282. Expression Add Operators</h2><h3 id="结题思路"><a href="#结题思路" class="headerlink" title="结题思路"></a>结题思路</h3><blockquote>
<ul>
<li>使用dfs进行深度搜索，用两个参数pre和val保持计算优先级；</li>
<li>pre表示已经计算的出的结果，val表示先阶段计算得出的结果但是不确定后面的运算符是+还是×，如果是×就需要考虑优先级；</li>
<li>+： pre = pre + val; val = temp;<br>  -:  pre = pre + val; val = -temp;<br>  <em>:  pre = pre; val = val </em> temp;</li>
</ul>
</blockquote>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; addOperators(<span class="built_in">string</span> num, <span class="keyword">int</span> target)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; res;</div><div class="line">            dfs(res, num.size(), num, target, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">""</span>);</div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp;res, <span class="keyword">int</span> len, <span class="built_in">string</span> num, ll target, <span class="keyword">int</span> cur, ll pre, ll val, <span class="built_in">string</span> path)</span></span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(cur == len &amp;&amp; pre + val == target)</div><div class="line">            &#123;</div><div class="line">                res.push_back(path);</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">            ll temp = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = cur; i &lt; len; ++i)</div><div class="line">            &#123;</div><div class="line">                temp = temp * <span class="number">10</span> + num[i] - <span class="string">'0'</span>;</div><div class="line">                <span class="built_in">string</span> s = to_string(temp);</div><div class="line">                <span class="keyword">if</span>(cur != <span class="number">0</span>)</div><div class="line">                &#123;</div><div class="line">                    dfs(res, len, num, target, i+<span class="number">1</span>, pre+val, temp, path + <span class="string">'+'</span> + s);</div><div class="line">                    dfs(res, len, num, target, i+<span class="number">1</span>, pre+val, -temp, path + <span class="string">'-'</span> + s);</div><div class="line">                    dfs(res, len, num, target, i+<span class="number">1</span>, pre, temp * val, path + <span class="string">'*'</span> + s);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    dfs(res, len, num, target, i+<span class="number">1</span>, <span class="number">0</span>, temp, s);</div><div class="line">                <span class="keyword">if</span>(num[cur] == <span class="string">'0'</span>)</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="312-Burst-Balloons"><a href="#312-Burst-Balloons" class="headerlink" title="312. Burst Balloons"></a>312. Burst Balloons</h2><h3 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>在nums两端各添加一个1；</li>
<li>设DP[i][j]表示从i~j的计算结果，则整个计算结果为DP[1][N]，N表示nums添加1之前的长度；</li>
<li>如果x是i~j中最后一个气球，则其结果为：<code>nums[i-1]*nums[x]*nums[j+1]</code>;</li>
<li>则使用DP可以得到状态公式：<br><code>dp[i][j] = max(dp[i][j], dp[i][x-1] + nums[i-1]*nums[x]*nums[j+1] + dp[x+1][j])</code>;</li>
</ul>
</blockquote>
<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        <span class="function"><span class="keyword">int</span> <span class="title">maxCoins</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums)</span></span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> len = nums.size();</div><div class="line">            nums.insert(nums.begin(), <span class="number">1</span>);</div><div class="line">            nums.insert(nums.end(), <span class="number">1</span>);</div><div class="line">            <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; dp(len+<span class="number">2</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(len+<span class="number">2</span>, <span class="number">0</span>));</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= len; ++k)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len-k+<span class="number">1</span>; ++i)</div><div class="line">                &#123;</div><div class="line">                        <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt; i+k; ++j)</div><div class="line">                        &#123;</div><div class="line">                            dp[i][i+k<span class="number">-1</span>] = max(dp[i][i+k<span class="number">-1</span>], dp[i][j<span class="number">-1</span>] + nums[i<span class="number">-1</span>]*nums[j]*nums[i+k] + dp[j+<span class="number">1</span>][i+k<span class="number">-1</span>]); </div><div class="line">                        &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> dp[<span class="number">1</span>][len];</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="315-Count-of-Smaller-Numbers-After-Self"><a href="#315-Count-of-Smaller-Numbers-After-Self" class="headerlink" title="315. Count of Smaller Numbers After Self"></a>315. Count of Smaller Numbers After Self</h2><h3 id="解题思路I"><a href="#解题思路I" class="headerlink" title="解题思路I"></a>解题思路I</h3><blockquote>
<ul>
<li>使用归并排序，在归并排序的过程中一段一段地去计算结果；</li>
<li>对于每一阶段归并排序的左右两部分，左半部分每个元素都去右半部分中找<code>Smaller Number</code>，由于是在归并排序之后再去找，所以只需要扫描一遍；</li>
<li>具体分析可以看<a href="https://discuss.leetcode.com/topic/73300/share-my-c-mergesort-solution" target="_blank" rel="external">这里</a>！</li>
</ul>
</blockquote>
<h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; countSmaller(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> len = nums.size();</div><div class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res(len, <span class="number">0</span>);</div><div class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; index;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</div><div class="line">                index.push_back(i);</div><div class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; numUpdate = nums;</div><div class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; indexUpdate = index;</div><div class="line">            solve(res, nums, index, <span class="number">0</span>, len, numUpdate, indexUpdate);</div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;res, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;index, <span class="keyword">int</span> start, <span class="keyword">int</span> end, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;numUpdate, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;indexUpdate)</span></span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(end - start &lt;= <span class="number">1</span>)</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            <span class="keyword">int</span> mid = (start + end) / <span class="number">2</span>;</div><div class="line">            solve(res, nums, index, mid, end, numUpdate, indexUpdate);</div><div class="line">            solve(res, nums, index, start, mid, numUpdate, indexUpdate);</div><div class="line">            <span class="keyword">int</span> r = mid;</div><div class="line">            <span class="keyword">int</span> t = mid;</div><div class="line">            <span class="keyword">int</span> s = start;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> l = start; l &lt; mid; ++l)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">while</span>(nums[l] &gt; nums[r] &amp;&amp; r &lt; end)</div><div class="line">                    r++;</div><div class="line">                <span class="keyword">while</span>(t &lt; end &amp;&amp; nums[t] &lt;= nums[l])</div><div class="line">                &#123;</div><div class="line">                    numUpdate[s] = nums[t];</div><div class="line">                    indexUpdate[s++] = index[t++];</div><div class="line">                &#125;</div><div class="line">                numUpdate[s] = nums[l];</div><div class="line">                indexUpdate[s++] = index[l];</div><div class="line">                res[index[l]] += r - mid;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = start; i &lt; end; ++i)</div><div class="line">            &#123;</div><div class="line">                nums[i] = numUpdate[i];</div><div class="line">                index[i] = indexUpdate[i];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="解题思路II"><a href="#解题思路II" class="headerlink" title="解题思路II"></a>解题思路II</h3><blockquote>
<ul>
<li>首先对数据进行拷贝排序，使用map保存其序列号值；</li>
<li>使用了Fenwick树结构，保存数据的大小个数等信息；</li>
<li>遍历数组结构，每次获得当前数值的结果后，将当前数值添加进树结构中，并进行树结构更新；</li>
</ul>
</blockquote>
<h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> <span class="title">FenwickTree</span></div><div class="line">&#123;</div><div class="line">    vector&lt;<span class="keyword">int</span>&gt; sumArray;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="function">inline <span class="keyword">int</span> <span class="title">lowBit</span>(<span class="params"><span class="keyword">int</span> x</span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> x &amp; -x;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    FenwickTree(<span class="keyword">int</span> n) : n(n), sumArray(n+<span class="number">1</span>, <span class="number">0</span>) &#123;&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span>(<span class="params"><span class="keyword">int</span> x, <span class="keyword">int</span> d</span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">while</span>(x &lt;= n)</div><div class="line">        &#123;</div><div class="line">            sumArray[x] += d;</div><div class="line">            x += lowBit(x);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">sum</span>(<span class="params"><span class="keyword">int</span> x</span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(x &gt; <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            res += sumArray[x];</div><div class="line">            x -= lowBit(x);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">class</span> <span class="title">Solution</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">countSmaller</span>(<span class="params">vector&lt;<span class="keyword">int</span>&gt; &amp;nums</span>)</span></div><div class="line">        &#123;</div><div class="line">            vector&lt;<span class="keyword">int</span>&gt; temp = nums;</div><div class="line">            sort(temp.begin(), temp.end());</div><div class="line">            unordered_map&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; dic;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; temp.size(); ++i)</div><div class="line">                dic[temp[i]] = i+<span class="number">1</span>;</div><div class="line">            <span class="function">FenwickTree <span class="title">tree</span>(<span class="params">nums.size(</span>))</span>;</div><div class="line">            <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">res</span>(<span class="params">nums.size(</span>), 0)</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = nums.size()<span class="number">-1</span>; i &gt;= <span class="number">0</span>; --i)</div><div class="line">            &#123;</div><div class="line">                res[i] = tree.sum(dic[nums[i]] - <span class="number">1</span>);</div><div class="line">                tree.<span class="keyword">add</span>(dic[nums[i]], <span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="327-Count-of-Range-Sum"><a href="#327-Count-of-Range-Sum" class="headerlink" title="327. Count of Range Sum"></a>327. Count of Range Sum</h2><h3 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>详细讲解看<a href="https://discuss.leetcode.com/topic/33738/share-my-solution" target="_blank" rel="external">这里</a>！</li>
</ul>
</blockquote>
<h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h3><figure class="highlight excel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">class Solution</div><div class="line">&#123;</div><div class="line">publ<span class="symbol">ic:</span></div><div class="line">    <span class="built_in">int</span> countRangeSum(vector&lt;<span class="built_in">int</span>&gt;&amp; nums, <span class="built_in">int</span> <span class="built_in">lower</span>, <span class="built_in">int</span> <span class="built_in">upper</span>) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">int</span> size=nums.size();</div><div class="line">        <span class="built_in">if</span>(size==<span class="number">0</span>)  </div><div class="line">            return <span class="number">0</span>;</div><div class="line">        vector&lt;long&gt; sums(size+<span class="number">1</span>, <span class="number">0</span>);</div><div class="line">        for(<span class="built_in">int</span> i=<span class="number">0</span>; i&lt;size; i++)  </div><div class="line">            sums[i+<span class="number">1</span>]=sums[i]+nums[i];</div><div class="line">        return solve(sums, <span class="number">0</span>, size+<span class="number">1</span>, <span class="built_in">lower</span>, <span class="built_in">upper</span>);</div><div class="line">    &#125;</div><div class="line">   </div><div class="line">    <span class="built_in">int</span> solve(vector&lt;long&gt;&amp; sums, <span class="built_in">int</span> start, <span class="built_in">int</span> end, <span class="built_in">int</span> <span class="built_in">lower</span>, <span class="built_in">int</span> <span class="built_in">upper</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">if</span>(end-start&lt;=<span class="number">1</span>)  return <span class="number">0</span>;</div><div class="line">        <span class="built_in">int</span> <span class="built_in">mid</span>=(start+end)/<span class="number">2</span>;</div><div class="line">        <span class="built_in">int</span> <span class="built_in">count</span>=solve(sums, start, <span class="built_in">mid</span>, <span class="built_in">lower</span>, <span class="built_in">upper</span>) + solve(sums, <span class="built_in">mid</span>, end, <span class="built_in">lower</span>, <span class="built_in">upper</span>);</div><div class="line">        <span class="built_in">int</span> m=<span class="built_in">mid</span>, <span class="built_in">n</span>=<span class="built_in">mid</span>, <span class="built_in">t</span>=<span class="built_in">mid</span>, <span class="built_in">len</span>=<span class="number">0</span>;</div><div class="line">        vector&lt;long&gt; cache(end-start, <span class="number">0</span>);</div><div class="line">        for(<span class="built_in">int</span> i=start, s=<span class="number">0</span>; i&lt;<span class="built_in">mid</span>; i++, s++)</div><div class="line">        &#123;</div><div class="line">            while(m&lt;end &amp;&amp; sums[m]-sums[i]&lt;<span class="built_in">lower</span>) </div><div class="line">                m++;</div><div class="line">            while(<span class="built_in">n</span>&lt;end &amp;&amp; sums[<span class="built_in">n</span>]-sums[i]&lt;=<span class="built_in">upper</span>) </div><div class="line">                <span class="built_in">n</span>++;</div><div class="line">            <span class="built_in">count</span>+=<span class="built_in">n</span>-m;</div><div class="line">            while(<span class="built_in">t</span>&lt;end &amp;&amp; sums[<span class="built_in">t</span>]&lt;sums[i]) </div><div class="line">                cache[s++]=sums[<span class="built_in">t</span>++];</div><div class="line">            cache[s]=sums[i];</div><div class="line">            <span class="built_in">len</span>=s;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        for(<span class="built_in">int</span> i=<span class="number">0</span>; i&lt;=<span class="built_in">len</span>; i++)  </div><div class="line">            sums[start+i]=cache[i];</div><div class="line">        return <span class="built_in">count</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文包含如下题目：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/the-skyline-problem/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;218. The Skyline Problem&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/different-ways-to-add-parentheses/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;241. Different Ways to Add Parentheses&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/expression-add-operators/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;282. Expression Add Operators&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/burst-balloons/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;312. Burst Balloons&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/count-of-smaller-numbers-after-self/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;315. Count of Smaller Numbers After Self&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/count-of-range-sum/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;327. Count of Range Sum&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://haoyuanliu.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://haoyuanliu.github.io/tags/LeetCode/"/>
    
      <category term="Divide and Conquer" scheme="http://haoyuanliu.github.io/tags/Divide-and-Conquer/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode Bit Manipulation II</title>
    <link href="http://haoyuanliu.github.io/2016/12/25/LeetCode-Bit-Manipulation-II/"/>
    <id>http://haoyuanliu.github.io/2016/12/25/LeetCode-Bit-Manipulation-II/</id>
    <published>2016-12-25T14:37:04.000Z</published>
    <updated>2017-07-01T08:19:25.157Z</updated>
    
    <content type="html"><![CDATA[<p>本文包含如下题目：<br><a href="https://leetcode.com/problems/power-of-four/" target="_blank" rel="external">342. Power of Four</a><br><a href="https://leetcode.com/problems/sum-of-two-integers/" target="_blank" rel="external">371. Sum of Two Integers</a><br><a href="https://leetcode.com/problems/find-the-difference/" target="_blank" rel="external">389. Find the Difference</a><br><a href="https://leetcode.com/problems/utf-8-validation/" target="_blank" rel="external">393. UTF-8 Validation</a><br><a href="https://leetcode.com/problems/integer-replacement/" target="_blank" rel="external">397. Integer Replacement</a><br><a href="https://leetcode.com/problems/binary-watch/" target="_blank" rel="external">401. Binary Watch</a><br><a href="https://leetcode.com/problems/convert-a-number-to-hexadecimal/" target="_blank" rel="external">405. Convert a Number to Hexadecimal</a><br><a href="https://leetcode.com/problems/maximum-xor-of-two-numbers-in-an-array/" target="_blank" rel="external">421. Maximum XOR of Two Numbers in an Array</a><br><a href="https://leetcode.com/problems/hamming-distance/" target="_blank" rel="external">461. Hamming Distance</a><br><a href="https://leetcode.com/problems/total-hamming-distance/" target="_blank" rel="external">477. Total Hamming Distance</a></p>
<a id="more"></a>
<h2 id="342-Power-of-Four"><a href="#342-Power-of-Four" class="headerlink" title="342. Power of Four"></a>342. Power of Four</h2><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>简单题，不多说了；</li>
</ul>
</blockquote>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></div><div class="line">&#123;</div><div class="line">    public:</div><div class="line">        <span class="built_in">bool</span> isPowerOfFour(<span class="built_in">int</span> <span class="built_in">num</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">int</span> temp = <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span>(<span class="built_in">num</span> == <span class="number">0</span> || <span class="built_in">num</span> &lt; <span class="number">0</span>)</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; ++i)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>((<span class="built_in">num</span>&amp;temp) == <span class="built_in">num</span>)</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                temp &lt;&lt;= <span class="number">2</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="371-Sum-of-Two-Integers"><a href="#371-Sum-of-Two-Integers" class="headerlink" title="371. Sum of Two Integers"></a>371. Sum of Two Integers</h2><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>使用<code>^</code>运算求取加和结果，使用<code>&amp;</code>运算求取进位结果，循环调用即可；</li>
</ul>
</blockquote>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        <span class="function"><span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> carry = a&amp;b;</div><div class="line">            <span class="keyword">int</span> res = a ^ b;</div><div class="line">            <span class="keyword">int</span> temp;</div><div class="line">            <span class="keyword">while</span>(carry)</div><div class="line">            &#123;</div><div class="line">                carry &lt;&lt;= <span class="number">1</span>;</div><div class="line">                temp = res &amp; carry;</div><div class="line">                res = res ^ carry;</div><div class="line">                carry = temp;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="389-Find-the-Difference"><a href="#389-Find-the-Difference" class="headerlink" title="389. Find the Difference"></a>389. Find the Difference</h2><h3 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>简单题，不多说了；</li>
</ul>
</blockquote>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        <span class="function"><span class="keyword">char</span> <span class="title">findTheDifference</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">string</span> t)</span></span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">char</span> res;</div><div class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; c1(<span class="number">26</span>, <span class="number">0</span>);</div><div class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; c2(<span class="number">26</span>, <span class="number">0</span>);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> <span class="keyword">const</span> c : s)</div><div class="line">                c1[c - <span class="string">'a'</span>]++;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> <span class="keyword">const</span> c : t)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(++c2[c - <span class="string">'a'</span>] &gt; c1[c - <span class="string">'a'</span>])</div><div class="line">                &#123;</div><div class="line">                    res = c;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="393-UTF-8-Validation"><a href="#393-UTF-8-Validation" class="headerlink" title="393. UTF-8 Validation"></a>393. UTF-8 Validation</h2><h3 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>这个题目的难点在于理解题目。。。</li>
</ul>
</blockquote>
<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">class Solution</div><div class="line">&#123;</div><div class="line">    public:</div><div class="line">        bool validUtf8(<span class="built_in">vector</span>&lt;int&gt; &amp;data)</div><div class="line">        &#123;</div><div class="line">            int len = data.size();</div><div class="line">            int count = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(int i = <span class="number">0</span>; i &lt; len; ++i)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(count == <span class="number">0</span>)</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">if</span>(data[i]&gt;&gt;<span class="number">5</span> == <span class="number">0b110</span>)</div><div class="line">                        count = <span class="number">1</span>;</div><div class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(data[i]&gt;&gt;<span class="number">4</span> == <span class="number">0b1110</span>)</div><div class="line">                        count = <span class="number">2</span>;</div><div class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(data[i]&gt;&gt;<span class="number">3</span> == <span class="number">0b11110</span>)</div><div class="line">                        count = <span class="number">3</span>;</div><div class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(data[i]&gt;&gt;<span class="number">7</span>)</div><div class="line">                        <span class="built_in">return</span> <span class="literal">false</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">if</span>(data[i]&gt;&gt;<span class="number">6</span> != <span class="number">0b10</span>)</div><div class="line">                        <span class="built_in">return</span> <span class="literal">false</span>;</div><div class="line">                    count--;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">return</span> count == <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="397-Integer-Replacement"><a href="#397-Integer-Replacement" class="headerlink" title="397. Integer Replacement"></a>397. Integer Replacement</h2><h3 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>如果最后两位是<code>11</code>，则加法操作比较好；反之则减法操作比较好；</li>
<li>3是一个特例，如果是3的话，需要减法操作；</li>
<li>如果是最大整数，则因为无法加法操作，所以需要在最前边进行设置判断；</li>
</ul>
</blockquote>
<h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        <span class="keyword">int</span> integerReplacement(<span class="keyword">int</span> n)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(n == <span class="number">0x7fffffff</span>)</div><div class="line">                <span class="keyword">return</span> <span class="number">32</span>;</div><div class="line">            <span class="keyword">int</span> <span class="keyword">count</span> = <span class="number">0</span>;</div><div class="line">            <span class="keyword">while</span>(n &gt; <span class="number">1</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">count</span>++;</div><div class="line">                <span class="keyword">if</span>(n &amp; <span class="number">1</span>)</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">if</span>(n == <span class="number">3</span> || (n&amp;<span class="number">2</span>) == <span class="number">0</span>)</div><div class="line">                        n--;</div><div class="line">                    <span class="keyword">else</span></div><div class="line">                        n++;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    n &gt;&gt;= <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">count</span>;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="401-Binary-Watch"><a href="#401-Binary-Watch" class="headerlink" title="401. Binary Watch"></a>401. Binary Watch</h2><h3 id="结题思路"><a href="#结题思路" class="headerlink" title="结题思路"></a>结题思路</h3><blockquote>
<ul>
<li>这道题主要是一道递归的题目，递归解决即可；</li>
<li>需要注意的是hours和minutes本身的范围，以及输出的格式；</li>
</ul>
</blockquote>
<h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; readBinaryWatch(<span class="keyword">int</span> num)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; res;</div><div class="line">            <span class="keyword">int</span> hours = <span class="number">0</span>;</div><div class="line">            <span class="keyword">int</span> minutes = <span class="number">0</span>;</div><div class="line">            solve(res, num, hours, minutes, <span class="number">0</span>);</div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp;res, <span class="keyword">int</span> count, <span class="keyword">int</span> &amp;hours, <span class="keyword">int</span> &amp;minutes, <span class="keyword">int</span> cur)</span></span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(hours &gt; <span class="number">11</span> || minutes &gt; <span class="number">59</span>)</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            <span class="keyword">if</span>(count == <span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="built_in">string</span> temp = <span class="string">""</span>;</div><div class="line">                <span class="keyword">if</span>(hours &lt; <span class="number">10</span>)</div><div class="line">                &#123;</div><div class="line">                    temp += hours - <span class="number">0</span> + <span class="string">'0'</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                &#123;</div><div class="line">                    temp += hours / <span class="number">10</span> + <span class="string">'0'</span>;</div><div class="line">                    temp += hours % <span class="number">10</span> + <span class="string">'0'</span>;</div><div class="line">                &#125;</div><div class="line">                temp += <span class="string">":"</span>;</div><div class="line">                temp += minutes / <span class="number">10</span> + <span class="string">'0'</span>;</div><div class="line">                temp += minutes % <span class="number">10</span> + <span class="string">'0'</span>;</div><div class="line">                res.push_back(temp);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = cur; i &lt; <span class="number">10</span>; ++i)</div><div class="line">                &#123;</div><div class="line"></div><div class="line">                    <span class="keyword">if</span>(i &lt; <span class="number">6</span> &amp;&amp; (minutes&amp;(<span class="number">1</span>&lt;&lt;i)) == <span class="number">0</span>)</div><div class="line">                    &#123;</div><div class="line">                        minutes += (<span class="number">1</span>&lt;&lt;i);</div><div class="line">                        solve(res, count<span class="number">-1</span>, hours, minutes, i+<span class="number">1</span>);</div><div class="line">                        minutes -= (<span class="number">1</span>&lt;&lt;i);</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span>(i &gt;= <span class="number">6</span> &amp;&amp; (hours&amp;(<span class="number">1</span>&lt;&lt;(i<span class="number">-6</span>))) == <span class="number">0</span>)</div><div class="line">                    &#123;</div><div class="line">                        hours += (<span class="number">1</span>&lt;&lt;(i<span class="number">-6</span>));</div><div class="line">                        solve(res, count<span class="number">-1</span>, hours, minutes, i+<span class="number">1</span>);</div><div class="line">                        hours -= (<span class="number">1</span>&lt;&lt;(i<span class="number">-6</span>));</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="405-Convert-a-Number-to-Hexadecimal"><a href="#405-Convert-a-Number-to-Hexadecimal" class="headerlink" title="405. Convert a Number to Hexadecimal"></a>405. Convert a Number to Hexadecimal</h2><h3 id="解题思路-5"><a href="#解题思路-5" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>四位四位地去转换就可以了，注意<code>(-1&gt;&gt;4)</code>一直都是<code>-1</code>；</li>
</ul>
</blockquote>
<h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="built_in">string</span> <span class="title">toHex</span><span class="params">(<span class="keyword">int</span> num)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(num == <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> <span class="string">"0"</span>;</div><div class="line">        <span class="built_in">string</span> res = <span class="string">""</span>;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; hex= &#123;<span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>&#125;;</div><div class="line">        <span class="keyword">while</span>(num != <span class="number">0</span> &amp;&amp; res.size() &lt; <span class="number">8</span>)</div><div class="line">        &#123;</div><div class="line">            res = hex[num&amp;<span class="number">15</span>] + res;</div><div class="line">            num &gt;&gt;= <span class="number">4</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="421-Maximum-XOR-of-Two-Numbers-in-an-Array"><a href="#421-Maximum-XOR-of-Two-Numbers-in-an-Array" class="headerlink" title="421. Maximum XOR of Two Numbers in an Array"></a>421. Maximum XOR of Two Numbers in an Array</h2><h3 id="解题思路-6"><a href="#解题思路-6" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>计算最大异或值，从最高位开始计算，使用<code>set</code>保存从高位开始前1,2,3…位的数据；</li>
<li>每次使用左移<code>&lt;&lt;</code>更新res，使用<code>^</code>判断最后一位是0还是1；</li>
</ul>
</blockquote>
<h3 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        <span class="function"><span class="keyword">int</span> <span class="title">findMaximumXOR</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums)</span></span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line">            <span class="built_in">unordered_set</span>&lt;<span class="keyword">int</span>&gt; pre;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">31</span>; i &gt;= <span class="number">0</span>; --i)</div><div class="line">            &#123;</div><div class="line">                res &lt;&lt;= <span class="number">1</span>;</div><div class="line">                pre.clear();</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">auto</span> <span class="keyword">const</span> num : nums)</div><div class="line">                    pre.insert(num&gt;&gt;i);</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">auto</span> <span class="keyword">const</span> p : pre)</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">if</span>(pre.find((res^<span class="number">1</span>)^p) != pre.end())</div><div class="line">                    &#123;</div><div class="line">                        res++;</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="461-Hamming-Distance"><a href="#461-Hamming-Distance" class="headerlink" title="461. Hamming Distance"></a>461. Hamming Distance</h2><h3 id="解题思路-7"><a href="#解题思路-7" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>简单题，用到了<code>temp&amp;(temp-1)</code>；</li>
</ul>
</blockquote>
<h3 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        <span class="function"><span class="keyword">int</span> <span class="title">hammingDistance</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line">            <span class="keyword">int</span> temp = x^y;</div><div class="line">            <span class="keyword">while</span>(temp)</div><div class="line">            &#123;</div><div class="line">                temp = temp&amp;(temp<span class="number">-1</span>);</div><div class="line">                res++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="477-Total-Hamming-Distance"><a href="#477-Total-Hamming-Distance" class="headerlink" title="477. Total Hamming Distance"></a>477. Total Hamming Distance</h2><h3 id="解题思路-8"><a href="#解题思路-8" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>每一位只有为1才会产生汉明距离，总的汉明距离和为1的个数×0的个数；</li>
</ul>
</blockquote>
<h3 id="代码-9"><a href="#代码-9" class="headerlink" title="代码"></a>代码</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution</div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        <span class="keyword">int</span> totalHammingDistance(vector&lt;<span class="keyword">int</span>&gt; &amp;nums)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line">            <span class="keyword">int</span> len = nums.<span class="keyword">size</span>();</div><div class="line">            <span class="keyword">int</span> <span class="keyword">count</span> = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; ++i)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">count</span> = <span class="number">0</span>;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nums.<span class="keyword">size</span>(); ++i)</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">if</span>((nums[j]&gt;&gt;i)&amp;<span class="number">1</span>)</div><div class="line">                        <span class="keyword">count</span>++;</div><div class="line">                &#125;</div><div class="line">                res += (len - <span class="keyword">count</span>) * <span class="keyword">count</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文包含如下题目：&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/power-of-four/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;342. Power of Four&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/sum-of-two-integers/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;371. Sum of Two Integers&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/find-the-difference/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;389. Find the Difference&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/utf-8-validation/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;393. UTF-8 Validation&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/integer-replacement/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;397. Integer Replacement&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/binary-watch/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;401. Binary Watch&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/convert-a-number-to-hexadecimal/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;405. Convert a Number to Hexadecimal&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/maximum-xor-of-two-numbers-in-an-array/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;421. Maximum XOR of Two Numbers in an Array&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/hamming-distance/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;461. Hamming Distance&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/total-hamming-distance/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;477. Total Hamming Distance&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://haoyuanliu.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://haoyuanliu.github.io/tags/LeetCode/"/>
    
      <category term="Bit Manipulation" scheme="http://haoyuanliu.github.io/tags/Bit-Manipulation/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode Bit Manipulation I</title>
    <link href="http://haoyuanliu.github.io/2016/12/24/LeetCode-Bit-Manipulation-I/"/>
    <id>http://haoyuanliu.github.io/2016/12/24/LeetCode-Bit-Manipulation-I/</id>
    <published>2016-12-24T10:36:13.000Z</published>
    <updated>2017-07-01T08:19:25.156Z</updated>
    
    <content type="html"><![CDATA[<p>本文包含如下题目：<br><a href="https://leetcode.com/problems/subsets/" target="_blank" rel="external">78. Subsets</a><br><a href="https://leetcode.com/problems/single-number/" target="_blank" rel="external">136. Single Number</a><br><a href="https://leetcode.com/problems/single-number-ii/" target="_blank" rel="external">137. Single Number II</a><br><a href="https://leetcode.com/problems/majority-element/" target="_blank" rel="external">169. Majority Element</a><br><a href="https://leetcode.com/problems/repeated-dna-sequences/" target="_blank" rel="external">187. Repeated DNA Sequences</a><br><a href="https://leetcode.com/problems/reverse-bits/" target="_blank" rel="external">190. Reverse Bits</a><br><a href="https://leetcode.com/problems/number-of-1-bits/" target="_blank" rel="external">191. Number of 1 Bits</a><br><a href="https://leetcode.com/problems/bitwise-and-of-numbers-range/" target="_blank" rel="external">201. Bitwise AND of Numbers Range</a><br><a href="https://leetcode.com/problems/power-of-two/" target="_blank" rel="external">231. Power of Two</a><br><a href="https://leetcode.com/problems/single-number-iii/" target="_blank" rel="external">260. Single Number III</a><br><a href="https://leetcode.com/problems/missing-number/" target="_blank" rel="external">268. Missing Number</a><br><a href="https://leetcode.com/problems/maximum-product-of-word-lengths/" target="_blank" rel="external">318. Maximum Product of Word Lengths</a><br><a href="https://leetcode.com/problems/counting-bits/" target="_blank" rel="external">338. Counting Bits</a></p>
<a id="more"></a>
<h2 id="78-Subsets"><a href="#78-Subsets" class="headerlink" title="78. Subsets"></a>78. Subsets</h2><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>使用bitmap表示：<br><code>000-&gt;[],  001-&gt;[1], 010-&gt;[2], 011-&gt;[1, 2], 100-&gt;[3],  101-&gt;[1, 3], 110-&gt;[2, 3], 111-&gt;[1, 2, 3]</code></li>
</ul>
</blockquote>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; subsets(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; res;</div><div class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; temp;</div><div class="line">            <span class="keyword">int</span> len = nums.size();</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">1</span>&lt;&lt;len); ++i)</div><div class="line">            &#123;</div><div class="line">                temp.clear();</div><div class="line">                <span class="keyword">int</span> index = <span class="number">0</span>;</div><div class="line">                <span class="keyword">while</span>(i &gt;= (<span class="number">1</span>&lt;&lt;index))</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">if</span>(i &amp; (<span class="number">1</span>&lt;&lt;index))</div><div class="line">                        temp.push_back(nums[index]);</div><div class="line">                    index++;</div><div class="line">                &#125;</div><div class="line">                res.push_back(temp);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="136-Single-Number"><a href="#136-Single-Number" class="headerlink" title="136. Single Number"></a>136. Single Number</h2><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>这道题用bitmap，使用异或操作，相同的数都会消去，最后只剩下Single Number；</li>
</ul>
</blockquote>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        <span class="function"><span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums)</span></span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i++)</div><div class="line">            &#123;</div><div class="line">                res ^= nums[i];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="137-Single-Number-II"><a href="#137-Single-Number-II" class="headerlink" title="137. Single Number II"></a>137. Single Number II</h2><h3 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>仍然使用位运算，使用ones、twos两位表示每一位的累加和；</li>
<li>对应循环关系为：00-&gt;01-&gt;10-&gt;00 即 0-&gt;1-&gt;2-&gt;0;</li>
<li>最后返回ones中的结果即可；</li>
<li>如果重复的个数是5的话，就需要三位数来表示：000-&gt;001-&gt;010-&gt;011-&gt;100-&gt;000;</li>
</ul>
</blockquote>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        <span class="function"><span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums)</span></span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> ones = <span class="number">0</span>, twos = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); ++i)</div><div class="line">            &#123;</div><div class="line">                ones = (ones ^ nums[i]) &amp; ~twos;</div><div class="line">                twos = (twos ^ nums[i]) &amp; ~ones;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> ones;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="169-Majority-Element"><a href="#169-Majority-Element" class="headerlink" title="169. Majority Element"></a>169. Majority Element</h2><h3 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>思路I：对数组进行排序，然后取中位数就可以了；</li>
<li>思路II：遍历数组，初始化一个res，维持一个count计数变量，只有count减为零的时候才更新res，因为众数超过总数的一半，所以最后必然能够转换到res中；</li>
</ul>
</blockquote>
<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        <span class="function"><span class="keyword">int</span> <span class="title">majorityElement</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums)</span></span></div><div class="line">        &#123;</div><div class="line">            sort(nums.begin(), nums.end());</div><div class="line">            <span class="keyword">int</span> len = nums.size();</div><div class="line">            <span class="keyword">return</span> nums[len/<span class="number">2</span>];</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        <span class="keyword">int</span> majorityElement(vector&lt;<span class="keyword">int</span>&gt; &amp;nums)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> res = nums[<span class="number">0</span>];</div><div class="line">            <span class="keyword">int</span> <span class="keyword">count</span> = <span class="number">1</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.size(); ++i)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(<span class="keyword">count</span> == <span class="number">0</span>)</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">count</span>++;</div><div class="line">                    res = nums[i];</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(nums[i] == res)</div><div class="line">                    <span class="keyword">count</span>++;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    <span class="keyword">count</span>--;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="187-Repeated-DNA-Sequences"><a href="#187-Repeated-DNA-Sequences" class="headerlink" title="187. Repeated DNA Sequences"></a>187. Repeated DNA Sequences</h2><h3 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>字符串中只包含了A, C, G, T四种字符，这四种字符的不同进制表示如下所示：<br>16进制：0X41, 0X43, 0X47, 0X54<br>10进制：65， 67， 71， 84<br>8进制：0101, 0103, 0107, 0124;</li>
<li>观察上述进制规律，可以发现如果用二进制进行表示，其最后三位分别为001， 011， 111， 100；</li>
<li>所以我们可以使用一个int类型整数保存包含10个字符的子串，一共需要30位，int有32位，正好满足要求；</li>
<li>然后使用一个map进行映射保存，遍历所有的子串有重复的就进行保存即可；</li>
<li>这里推荐使用<code>unordered_map</code>而不是map，<code>unordered_map</code>不会进行排序，效率更高；</li>
</ul>
</blockquote>
<h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; findRepeatedDnaSequences(<span class="built_in">string</span> s)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; m;</div><div class="line">            <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; res;</div><div class="line">            <span class="keyword">int</span> temp = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.size(); ++i)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(m[temp = temp &lt;&lt; <span class="number">3</span> &amp; <span class="number">0x3FFFFFFF</span> | s[i] &amp; <span class="number">7</span>]++ == <span class="number">1</span>)</div><div class="line">                    res.push_back(s.substr(i<span class="number">-9</span>, <span class="number">10</span>));</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="190-Reverse-Bits"><a href="#190-Reverse-Bits" class="headerlink" title="190. Reverse Bits"></a>190. Reverse Bits</h2><h3 id="解题思路-5"><a href="#解题思路-5" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>这道题就简单了，移位操作32次就可以了；</li>
</ul>
</blockquote>
<h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        <span class="keyword">uint32_t</span> reverseBits(<span class="keyword">uint32_t</span> n)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">uint32_t</span> res = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; ++i)</div><div class="line">            &#123;</div><div class="line">                res &lt;&lt;= <span class="number">1</span>;</div><div class="line">                <span class="keyword">int</span> temp = n &amp; <span class="number">1</span>;</div><div class="line">                res = res | temp;</div><div class="line">                n &gt;&gt;= <span class="number">1</span>;       </div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="191-Number-of-1-Bits"><a href="#191-Number-of-1-Bits" class="headerlink" title="191. Number of 1 Bits"></a>191. Number of 1 Bits</h2><h3 id="解题思路-6"><a href="#解题思路-6" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>这道题不多说了；</li>
</ul>
</blockquote>
<h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        <span class="function"><span class="keyword">int</span> <span class="title">hammingWeight</span><span class="params">(<span class="keyword">uint32_t</span> n)</span></span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line">            <span class="keyword">while</span>(n)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(n &amp; <span class="number">1</span>)</div><div class="line">                    res++;</div><div class="line">                n &gt;&gt;= <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="201-Bitwise-AND-of-Numbers-Range"><a href="#201-Bitwise-AND-of-Numbers-Range" class="headerlink" title="201. Bitwise AND of Numbers Range"></a>201. Bitwise AND of Numbers Range</h2><h3 id="解题思路-7"><a href="#解题思路-7" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>首先如果n &gt; m，则最后一位必定是0，取fun(m&gt;&gt;1, n&gt;&gt;1)&lt;&lt;1作为最终结果；</li>
<li>沿用这种思路，迭代去求取即可；</li>
</ul>
</blockquote>
<h3 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">class</span> <span class="selector-tag">Solution</span></div><div class="line">&#123;</div><div class="line">    <span class="attribute">public</span>:</div><div class="line">        int <span class="built_in">rangeBitwiseAnd</span>(int m, int n)</div><div class="line">        &#123;</div><div class="line">            return n &gt; m ? <span class="built_in">rangeBitwiseAnd</span>(m&gt;&gt;1, n&gt;&gt;1) &lt;&lt; <span class="number">1</span> : m;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="231-Power-of-Two"><a href="#231-Power-of-Two" class="headerlink" title="231. Power of Two"></a>231. Power of Two</h2><h3 id="解题思路-8"><a href="#解题思路-8" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>这里注意负数和零都返回false；</li>
</ul>
</blockquote>
<h3 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        <span class="function"><span class="keyword">bool</span> <span class="title">isPowerOfTwo</span><span class="params">(<span class="keyword">int</span> n)</span></span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(n == <span class="number">0</span> || n&amp;(<span class="number">1</span>&lt;&lt;<span class="number">31</span>))</div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; ++i)</div><div class="line">                <span class="keyword">if</span>((n &amp; (<span class="number">1</span>&lt;&lt;i)) == n)</div><div class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="260-Single-Number-III"><a href="#260-Single-Number-III" class="headerlink" title="260. Single Number III"></a>260. Single Number III</h2><h3 id="解题思路I"><a href="#解题思路I" class="headerlink" title="解题思路I"></a>解题思路I</h3><blockquote>
<ul>
<li>首先对数组执行sort，然后两个两个地去找；</li>
</ul>
</blockquote>
<h3 id="代码-9"><a href="#代码-9" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; singleNumber(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</div><div class="line">            <span class="keyword">if</span>(nums.size() == <span class="number">2</span>)</div><div class="line">            &#123;</div><div class="line">                res.push_back(nums[<span class="number">0</span>]);</div><div class="line">                res.push_back(nums[<span class="number">1</span>]);</div><div class="line">                <span class="keyword">return</span> res;</div><div class="line">            &#125;</div><div class="line">            sort(nums.begin(), nums.end());</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i++)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(nums[i] == nums[i+<span class="number">1</span>])</div><div class="line">                    i++;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    res.push_back(nums[i]);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="解题思路II"><a href="#解题思路II" class="headerlink" title="解题思路II"></a>解题思路II</h3><blockquote>
<ul>
<li>假设结果所求为a和b两个数，对数组中所有的数据执行异或操作，则可以得到所求两个数的异或结果，假设为a^b；</li>
<li>利用位运算获取a^b中为1的设置位，表示a和b在这一设置位上一个是1，一个是0，可以把a和b区分开来，这里我们选择最右边为1的那位；</li>
<li>再次对数组进行遍历异或，使用设置为进行区分，则可以得到所求结果；</li>
<li>使用<code>diff &amp;= -diff</code>可以获取diff中最右边为零的设置位，<code>diff &amp;= ~(diff - 1)</code>同样也可以，这里mark学习一下！</li>
</ul>
</blockquote>
<h3 id="代码-10"><a href="#代码-10" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; singleNumber(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res(<span class="number">2</span>, <span class="number">0</span>);</div><div class="line">            <span class="keyword">int</span> temp = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); ++i)</div><div class="line">                temp ^= nums[i];</div><div class="line">            temp &amp;= -temp;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); ++i)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(temp &amp; nums[i])</div><div class="line">                    res[<span class="number">0</span>] ^= nums[i];</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    res[<span class="number">1</span>] ^= nums[i];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="268-Missing-Number"><a href="#268-Missing-Number" class="headerlink" title="268. Missing Number"></a>268. Missing Number</h2><h3 id="解题思路-9"><a href="#解题思路-9" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>方法一：先sort然后用二分法去找；</li>
<li>方法二：使用异或，同时异或下标和数组值，存在的就会消去；</li>
<li>方法三：使用sum求和，然后作减法即可；</li>
</ul>
</blockquote>
<h3 id="代码-11"><a href="#代码-11" class="headerlink" title="代码"></a>代码</h3><figure class="highlight excel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">//方法一</div><div class="line">class Solution</div><div class="line">&#123;</div><div class="line">    publ<span class="symbol">ic:</span></div><div class="line">        <span class="built_in">int</span> missingNumber(vector&lt;<span class="built_in">int</span>&gt; &amp;nums)</div><div class="line">        &#123;</div><div class="line">            sort(nums.begin(), nums.end());</div><div class="line">            <span class="built_in">int</span> <span class="built_in">left</span> = <span class="number">0</span>;</div><div class="line">            <span class="built_in">int</span> <span class="built_in">right</span> = nums.size();</div><div class="line">            <span class="built_in">int</span> <span class="built_in">mid</span> = (<span class="built_in">left</span> + <span class="built_in">right</span>) / <span class="number">2</span>;</div><div class="line">            while(<span class="built_in">left</span> &lt; <span class="built_in">right</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="built_in">mid</span> = (<span class="built_in">left</span> + <span class="built_in">right</span>) / <span class="number">2</span>;</div><div class="line">                <span class="built_in">if</span>(<span class="built_in">mid</span> &lt; nums[<span class="built_in">mid</span>])</div><div class="line">                    <span class="built_in">right</span> = <span class="built_in">mid</span>;</div><div class="line">                else</div><div class="line">                    <span class="built_in">left</span> = <span class="built_in">mid</span>+<span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">            return <span class="built_in">left</span>;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//方法二</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        <span class="function"><span class="keyword">int</span> <span class="title">missingNumber</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums)</span></span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> res = nums.size();</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); ++i)</div><div class="line">            &#123;</div><div class="line">                res ^= nums[i];</div><div class="line">                res ^= i;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//方法三</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        <span class="function"><span class="keyword">int</span> <span class="title">missingNumber</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums)</span></span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line">            <span class="keyword">int</span> len = nums.size();</div><div class="line">            res = len * (len + <span class="number">1</span>) / <span class="number">2</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</div><div class="line">                res -= nums[i];</div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="318-Maximum-Product-of-Word-Lengths"><a href="#318-Maximum-Product-of-Word-Lengths" class="headerlink" title="318. Maximum Product of Word Lengths"></a>318. Maximum Product of Word Lengths</h2><h3 id="解题思路-10"><a href="#解题思路-10" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>对于每一个string，使用int的后26为记录string中字符的存在与否；</li>
<li>建立一个vector<int>保存所有字符串的字符信息，使用<code>&amp;</code>判断是否有重复的字符；  </int></li>
</ul>
</blockquote>
<h3 id="代码-12"><a href="#代码-12" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        <span class="function"><span class="keyword">int</span> <span class="title">maxProduct</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp;words)</span></span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line">            <span class="keyword">int</span> len = words.size();</div><div class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nums(len, <span class="number">0</span>);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; words[i].size(); ++j)</div><div class="line">                &#123;</div><div class="line">                    nums[i] |= <span class="number">1</span>&lt;&lt;(words[i][j] - <span class="string">'a'</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; len; ++j)</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">if</span>(nums[i] &amp; nums[j])</div><div class="line">                        <span class="keyword">continue</span>;</div><div class="line">                    <span class="keyword">else</span></div><div class="line">                        res = max(res, <span class="keyword">int</span>(words[i].size() * words[j].size()));</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="338-Counting-Bits"><a href="#338-Counting-Bits" class="headerlink" title="338. Counting Bits"></a>338. Counting Bits</h2><h3 id="解题思路-11"><a href="#解题思路-11" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li><code>Bit Counts: 0-&gt;01, 01-&gt;0112, 0112-&gt;01121223, 01121223-&gt;0112122312232334;</code></li>
<li>参照上述规律使用DP进行求解即可；</li>
</ul>
</blockquote>
<h3 id="代码-13"><a href="#代码-13" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; countBits(<span class="keyword">int</span> num)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res(num+<span class="number">1</span>, <span class="number">0</span>);</div><div class="line">            <span class="keyword">int</span> start = <span class="number">0</span>;</div><div class="line">            <span class="keyword">int</span> end = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; num+<span class="number">1</span>; ++i)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(start &gt; end)</div><div class="line">                &#123;</div><div class="line">                    start = <span class="number">0</span>;</div><div class="line">                    end = i<span class="number">-1</span>;</div><div class="line">                &#125;</div><div class="line">                res[i] = res[start++] + <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文包含如下题目：&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/subsets/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;78. Subsets&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/single-number/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;136. Single Number&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/single-number-ii/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;137. Single Number II&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/majority-element/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;169. Majority Element&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/repeated-dna-sequences/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;187. Repeated DNA Sequences&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/reverse-bits/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;190. Reverse Bits&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/number-of-1-bits/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;191. Number of 1 Bits&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/bitwise-and-of-numbers-range/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;201. Bitwise AND of Numbers Range&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/power-of-two/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;231. Power of Two&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/single-number-iii/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;260. Single Number III&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/missing-number/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;268. Missing Number&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/maximum-product-of-word-lengths/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;318. Maximum Product of Word Lengths&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/counting-bits/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;338. Counting Bits&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://haoyuanliu.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://haoyuanliu.github.io/tags/LeetCode/"/>
    
      <category term="Bit Manipulation" scheme="http://haoyuanliu.github.io/tags/Bit-Manipulation/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode Combinations</title>
    <link href="http://haoyuanliu.github.io/2016/12/22/LeetCode-Combinations/"/>
    <id>http://haoyuanliu.github.io/2016/12/22/LeetCode-Combinations/</id>
    <published>2016-12-22T06:58:29.000Z</published>
    <updated>2017-07-01T08:19:25.156Z</updated>
    
    <content type="html"><![CDATA[<p>本文包含如下题目：<br><a href="https://leetcode.com/problems/letter-combinations-of-a-phone-number/" target="_blank" rel="external">17. Letter Combinations of a Phone Number</a><br><a href="https://leetcode.com/problems/next-permutation/" target="_blank" rel="external">31. Next Permutation</a><br><a href="https://leetcode.com/problems/combination-sum/" target="_blank" rel="external">39. Combination Sum</a><br><a href="https://leetcode.com/problems/combination-sum-ii/" target="_blank" rel="external">40. Combination Sum II</a><br><a href="https://leetcode.com/problems/permutations/" target="_blank" rel="external">46. Permutations</a><br><a href="https://leetcode.com/problems/permutations-ii/" target="_blank" rel="external">47. Permutations II</a><br><a href="https://leetcode.com/problems/permutation-sequence/" target="_blank" rel="external">60. Permutation Sequence</a><br><a href="https://leetcode.com/problems/combinations/" target="_blank" rel="external">77. Combinations</a><br><a href="https://leetcode.com/problems/combination-sum-iii/" target="_blank" rel="external">216. Combination Sum III</a><br><a href="https://leetcode.com/problems/combination-sum-iv/" target="_blank" rel="external">377. Combination Sum IV</a></p>
<a id="more"></a>
<h2 id="17-Letter-Combinations-of-a-Phone-Number"><a href="#17-Letter-Combinations-of-a-Phone-Number" class="headerlink" title="17. Letter Combinations of a Phone Number"></a>17. Letter Combinations of a Phone Number</h2><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>加入现在输入是<code>23</code>，则首先把<code>2</code>对应的字符放到结果res中，结果res为<code>[a, b, c]</code>;</li>
<li><code>3</code>所包含的字符有<code>d, e, f</code>则首先把res的首项取出来，分别和<code>d, e, f</code>组合之后再次放进res中，此时为<code>[b, c, ad, ae, af]</code>;</li>
<li>不断地完成如上操作即可；</li>
</ul>
</blockquote>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; letterCombinations(<span class="built_in">string</span> digits)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">string</span> str[<span class="number">10</span>] = &#123;<span class="string">" "</span>, <span class="string">" "</span>, <span class="string">"abc"</span>, <span class="string">"def"</span>, <span class="string">"ghi"</span>, <span class="string">"jkl"</span>, <span class="string">"mno"</span>, <span class="string">"pqrs"</span>, <span class="string">"tuv"</span>, <span class="string">"wxyz"</span>&#125;;</div><div class="line">            <span class="keyword">int</span> len[<span class="number">10</span>] = &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</div><div class="line">            <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; res;</div><div class="line">            <span class="keyword">if</span>(digits.size() == <span class="number">0</span>)</div><div class="line">                <span class="keyword">return</span> res;</div><div class="line">            res.push_back(<span class="string">""</span>);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; digits.size(); ++i)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">int</span> sz = res.size();<span class="comment">//注意这里要保存res的大小，以便下面循环的进行</span></div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; sz; ++j)</div><div class="line">                &#123;</div><div class="line">                    <span class="built_in">string</span> temp = res[<span class="number">0</span>];</div><div class="line">                    res.erase(res.begin());</div><div class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; len[digits[i] - <span class="string">'0'</span>]; ++k)</div><div class="line">                    &#123;</div><div class="line">                        res.push_back(temp + str[digits[i] - <span class="string">'0'</span>][k]);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="31-Next-Permutation"><a href="#31-Next-Permutation" class="headerlink" title="31. Next Permutation"></a>31. Next Permutation</h2><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>终极状态是<code>321</code>这种呈递减顺序排布的，也是数字组合的最大值；</li>
<li>首先找到第一个破坏上述规则的数，其位置记为start；</li>
<li>将start对应元素与从尾部开始第一个大于它的元素交换；</li>
<li>对于start后面的元素进行一个逆序处理即可；</li>
<li>详细分析可以参考<a href="https://leetcode.com/articles/next-permutation/" target="_blank" rel="external">LeetCode的官方Solution</a>；</li>
</ul>
</blockquote>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">class Solution</div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        <span class="keyword">void</span> nextPermutation(vector&lt;<span class="keyword">int</span>&gt; &amp;nums)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> start = <span class="number">-1</span>;</div><div class="line">            <span class="built_in">for</span>(<span class="keyword">int</span> i = nums.<span class="built_in">size</span>() - <span class="number">2</span>; i &gt;= <span class="number">0</span>; --i)</div><div class="line">            &#123;</div><div class="line">                <span class="built_in">if</span>(nums[i] &lt; nums[i+<span class="number">1</span>])</div><div class="line">                &#123;</div><div class="line">                    start = i;</div><div class="line">                    <span class="built_in">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">if</span>(start == <span class="number">-1</span>)</div><div class="line">            &#123;</div><div class="line">                reverse(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</div><div class="line">                <span class="built_in">return</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">for</span>(<span class="keyword">int</span> i = nums.<span class="built_in">size</span>()<span class="number">-1</span>; i &gt; start; --i)</div><div class="line">            &#123;</div><div class="line">                <span class="built_in">if</span>(nums[start] &lt; nums[i])</div><div class="line">                &#123;</div><div class="line">                    swap(nums[start], nums[i]);</div><div class="line">                    <span class="built_in">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            reverse(nums.<span class="built_in">begin</span>()+start+<span class="number">1</span>, nums.<span class="built_in">end</span>());</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="39-Combination-Sum"><a href="#39-Combination-Sum" class="headerlink" title="39. Combination Sum"></a>39. Combination Sum</h2><h3 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>使用回溯和递归，不断地去找就好；</li>
<li>注意给出的数据均为正数，且没有重复的数值；</li>
</ul>
</blockquote>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; combinationSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; candidates, <span class="keyword">int</span> target)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; res;</div><div class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; temp;</div><div class="line">            sort(candidates.begin(), candidates.end());</div><div class="line">            solve(res, temp, candidates, <span class="number">0</span>, target, <span class="number">0</span>);</div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; &amp;res, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;temp, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; candidates, <span class="keyword">int</span> cur, <span class="keyword">int</span> target, <span class="keyword">int</span> sum)</span></span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(sum == target)</div><div class="line">            &#123;</div><div class="line">                res.push_back(temp);</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = cur; i &lt; candidates.size(); ++i)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(sum + candidates[i] &lt;= target)</div><div class="line">                &#123;</div><div class="line">                    temp.push_back(candidates[i]);</div><div class="line">                    solve(res, temp, candidates, i, target, sum+candidates[i]);</div><div class="line">                    temp.pop_back();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="40-Combination-Sum-II"><a href="#40-Combination-Sum-II" class="headerlink" title="40. Combination Sum II"></a>40. Combination Sum II</h2><h3 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>这一题跟上面39题类似，注意这里给出的数据中包含重复的数值；</li>
<li>为了避免重复解，对candidates进行排序，重复数值只对第一个进行迭代求解，其余的跳过；</li>
</ul>
</blockquote>
<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; combinationSum2(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;candidates, <span class="keyword">int</span> target)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; res;</div><div class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; temp;</div><div class="line">            sort(candidates.begin(), candidates.end());</div><div class="line">            solve(res, temp, candidates, target, <span class="number">0</span>, <span class="number">0</span>, candidates.size());</div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; &amp;res, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;temp, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; candidates, <span class="keyword">int</span> target, <span class="keyword">int</span> cur, <span class="keyword">int</span> sum, <span class="keyword">int</span> len)</span></span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(sum == target)</div><div class="line">            &#123;</div><div class="line">                res.push_back(temp);</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = cur; i &lt; len; ++i)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(sum + candidates[i] &lt;= target)</div><div class="line">                &#123;</div><div class="line">                    temp.push_back(candidates[i]);</div><div class="line">                    solve(res, temp, candidates, target, i+<span class="number">1</span>, sum+candidates[i], len);</div><div class="line">                    temp.pop_back();</div><div class="line">                    <span class="keyword">while</span>(i+<span class="number">1</span> &lt; len &amp;&amp; candidates[i] == candidates[i+<span class="number">1</span>]) <span class="comment">//如果下一个值等于当前值，则跳过，</span></div><div class="line">                        i++;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="46-Permutations"><a href="#46-Permutations" class="headerlink" title="46. Permutations"></a>46. Permutations</h2><h3 id="解题思路I"><a href="#解题思路I" class="headerlink" title="解题思路I"></a>解题思路I</h3><blockquote>
<ul>
<li>这一题仍然是排列组合，但是不同的是这一次不看数值的大小，直接按照排列组合的顺序输出；</li>
</ul>
</blockquote>
<h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; permute(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; res;</div><div class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; temp;</div><div class="line">            <span class="keyword">int</span> size = <span class="number">1</span>;</div><div class="line">            <span class="keyword">int</span> i, j;</div><div class="line"></div><div class="line">            res.push_back(nums);</div><div class="line">            <span class="keyword">int</span> len = nums.size();</div><div class="line">            <span class="keyword">if</span>(len == <span class="number">1</span>)</div><div class="line">                <span class="keyword">return</span> res;</div><div class="line"></div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</div><div class="line">            &#123;</div><div class="line">                size = size * (i+<span class="number">1</span>);</div><div class="line">                temp.push_back(i+<span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">            size = size<span class="number">-1</span>;</div><div class="line">            <span class="keyword">while</span>(size--)</div><div class="line">            &#123;</div><div class="line">                i = j = len - <span class="number">1</span>;</div><div class="line">                <span class="keyword">while</span>(temp[i<span class="number">-1</span>] &gt;= temp[i])</div><div class="line">                    i--;</div><div class="line">                <span class="keyword">while</span>(temp[j] &lt;= temp[i<span class="number">-1</span>])</div><div class="line">                    j--;</div><div class="line">                swap(temp[i<span class="number">-1</span>], temp[j]);</div><div class="line">                swap(nums[i<span class="number">-1</span>], nums[j]);</div><div class="line"></div><div class="line">                j = len - <span class="number">1</span>;</div><div class="line">                <span class="keyword">while</span>(i &lt; j)</div><div class="line">                &#123;</div><div class="line">                    swap(temp[i], temp[j]);</div><div class="line">                    swap(nums[i++], nums[j--]);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                res.push_back(nums);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="解题思路II"><a href="#解题思路II" class="headerlink" title="解题思路II"></a>解题思路II</h3><blockquote>
<ul>
<li>也可以使用dfs进行求解，遍历每一种不同的组合方式；</li>
</ul>
</blockquote>
<h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; permute(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; res;</div><div class="line">            dfs(res, nums, <span class="number">0</span>);</div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; &amp;res, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums, <span class="keyword">int</span> cur)</span></span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(cur &gt;= nums.size())</div><div class="line">            &#123;</div><div class="line">                res.push_back(nums);</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = cur; i &lt; nums.size(); ++i)</div><div class="line">            &#123;</div><div class="line">                swap(nums[cur], nums[i]);</div><div class="line">                dfs(res, nums, cur+<span class="number">1</span>);</div><div class="line">                swap(nums[cur], nums[i]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="47-Permutations-II"><a href="#47-Permutations-II" class="headerlink" title="47. Permutations II"></a>47. Permutations II</h2><h3 id="解题思路I-1"><a href="#解题思路I-1" class="headerlink" title="解题思路I"></a>解题思路I</h3><blockquote>
<ul>
<li>首先使用<code>sort</code>函数整理数据，然后按照next premutation的算法不断进行求取；</li>
<li>这里需要注意的是，交换过程中，如果相等则不进行交换，使用<code>&lt;=</code>过滤掉重复的答案；</li>
</ul>
</blockquote>
<h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; permuteUnique(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; nums)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; res;</div><div class="line">            sort(nums.begin(), nums.end());</div><div class="line">            res.push_back(nums);</div><div class="line">            <span class="keyword">int</span> len = nums.size();</div><div class="line">            <span class="keyword">int</span> i, j;</div><div class="line">            <span class="keyword">if</span>(len == <span class="number">1</span>)</div><div class="line">                <span class="keyword">return</span> res;</div><div class="line">            <span class="keyword">while</span>(<span class="number">1</span>)</div><div class="line">            &#123;</div><div class="line">                i = j = len - <span class="number">1</span>;</div><div class="line">                <span class="keyword">while</span>(nums[i] &lt;= nums[i<span class="number">-1</span>] &amp;&amp; i &gt;= <span class="number">0</span>)</div><div class="line">                    i--;</div><div class="line">                <span class="keyword">if</span>(i == <span class="number">-1</span> || i == <span class="number">0</span>)</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">while</span>(nums[j] &lt;= nums[i<span class="number">-1</span>])</div><div class="line">                    j--;</div><div class="line">                swap(nums[i<span class="number">-1</span>], nums[j]);</div><div class="line">                j = len - <span class="number">1</span>;</div><div class="line">                <span class="keyword">while</span>(i &lt; j)</div><div class="line">                    swap(nums[i++], nums[j--]);</div><div class="line">                res.push_back(nums);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="解题思路II-1"><a href="#解题思路II-1" class="headerlink" title="解题思路II"></a>解题思路II</h3><blockquote>
<ul>
<li>这里借鉴了<a href="https://discuss.leetcode.com/topic/8831/a-simple-c-solution-in-only-20-lines/65" target="_blank" rel="external">LeetCode Discuss</a>中的思路，仍然采用的是dfs搜索的方式去遍历每一种可能的结果；</li>
<li>不同的是，针对本题没有回溯操作，nums作为参数前面并没有加<code>&amp;</code>号；</li>
<li>这个思路搞了好久没有弄清楚，有大神懂的求告知；</li>
</ul>
</blockquote>
<h3 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; permuteUnique(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; nums)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; res;</div><div class="line">            sort(nums.begin(), nums.end());</div><div class="line">            dfs(res, nums, <span class="number">0</span>);</div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; &amp;res, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nums, <span class="keyword">int</span> cur)</span></span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(cur == nums.size()<span class="number">-1</span>)</div><div class="line">            &#123;</div><div class="line">                res.push_back(nums);</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = cur; i &lt; nums.size(); ++i)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(i != cur &amp;&amp; nums[cur] == nums[i])</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                swap(nums[cur], nums[i]);</div><div class="line">                dfs(res, nums, cur+<span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="60-Permutation-Sequence"><a href="#60-Permutation-Sequence" class="headerlink" title="60. Permutation Sequence"></a>60. Permutation Sequence</h2><h3 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>如果不断调用next permutation算法，则肯定会超时；</li>
<li>我们一位一位的计算，一共有<code>n!</code>种序列，第一位有<code>n</code>中选择，每种都对应<code>(n-1)!</code>种序列，利用这种关系不断计算每一位的选择即可；</li>
</ul>
</blockquote>
<h3 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        <span class="function"><span class="built_in">string</span> <span class="title">getPermutation</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> k)</span></span></div><div class="line">        &#123;</div><div class="line">            <span class="built_in">string</span> res = <span class="string">""</span>;</div><div class="line">            <span class="keyword">int</span> nums[n];</div><div class="line">            nums[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i)</div><div class="line">                nums[i] = i * nums[i<span class="number">-1</span>];</div><div class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; index;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</div><div class="line">                index.push_back(i);</div><div class="line">            k = k - <span class="number">1</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = n<span class="number">-1</span>; i &gt;= <span class="number">0</span>; --i)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">int</span> temp = k / nums[i];</div><div class="line">                res += *(index.begin() + temp) + <span class="string">'0'</span>;</div><div class="line">                index.erase(index.begin() + temp);</div><div class="line">                k = k % nums[i];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="77-Combinations"><a href="#77-Combinations" class="headerlink" title="77. Combinations"></a>77. Combinations</h2><h3 id="解题思路-5"><a href="#解题思路-5" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>这个题直接用递归和回溯就解决了； </li>
</ul>
</blockquote>
<h3 id="代码-9"><a href="#代码-9" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; combine(<span class="keyword">int</span> n, <span class="keyword">int</span> k)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; res;</div><div class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; temp;</div><div class="line">            pushBack(res, temp, <span class="number">1</span>, k, n, <span class="number">0</span>);</div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">pushBack</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; &amp;res, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;temp, <span class="keyword">int</span> next, <span class="keyword">int</span> k, <span class="keyword">int</span> n, <span class="keyword">int</span> count)</span></span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(count == k)</div><div class="line">                res.push_back(temp);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = next; i &lt;= n; ++i)</div><div class="line">            &#123;</div><div class="line">                temp.push_back(i);</div><div class="line">                pushBack(res, temp, i+<span class="number">1</span>, k, n, count+<span class="number">1</span>);</div><div class="line">                temp.erase(temp.end()<span class="number">-1</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="216-Combination-Sum-III"><a href="#216-Combination-Sum-III" class="headerlink" title="216. Combination Sum III"></a>216. Combination Sum III</h2><h3 id="解题思路-6"><a href="#解题思路-6" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>这道题也是使用递归和回溯就可以解决了；</li>
</ul>
</blockquote>
<h3 id="代码-10"><a href="#代码-10" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; combinationSum3(<span class="keyword">int</span> k, <span class="keyword">int</span> n)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; res;</div><div class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; temp;</div><div class="line">            dfs(res, temp, k, n, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; &amp;res, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;temp, <span class="keyword">int</span> k, <span class="keyword">int</span> n, <span class="keyword">int</span> cur, <span class="keyword">int</span> count, <span class="keyword">int</span> sum)</span></span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(count == k)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(sum == n)</div><div class="line">                &#123;</div><div class="line">                    res.push_back(temp);</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(cur &gt; <span class="number">9</span>)</div><div class="line">                <span class="keyword">return</span>;</div><div class="line"></div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = cur; i &lt; <span class="number">10</span>; ++i)</div><div class="line">            &#123;</div><div class="line">                temp.push_back(i);</div><div class="line">                dfs(res, temp, k, n, i+<span class="number">1</span>, count+<span class="number">1</span>, sum+i);</div><div class="line">                temp.erase(temp.end()<span class="number">-1</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="377-Combination-Sum-IV"><a href="#377-Combination-Sum-IV" class="headerlink" title="377. Combination Sum IV"></a>377. Combination Sum IV</h2><h3 id="解题思路I-2"><a href="#解题思路I-2" class="headerlink" title="解题思路I"></a>解题思路I</h3><blockquote>
<ul>
<li>使用搜索算法进行迭代，TLE超时！</li>
</ul>
</blockquote>
<h3 id="代码-11"><a href="#代码-11" class="headerlink" title="代码"></a>代码</h3><figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution</div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        <span class="built_in">int</span> combinationSum4(vector&lt;<span class="built_in">int</span>&gt; &amp;nums, <span class="built_in">int</span> <span class="keyword">target</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">int</span> res = <span class="number">0</span>;</div><div class="line">            dfs(res, nums, <span class="keyword">target</span>, <span class="number">0</span>);</div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">        &#125;</div><div class="line">        void dfs(<span class="built_in">int</span> &amp;res, vector&lt;<span class="built_in">int</span>&gt; &amp;nums, <span class="built_in">int</span> <span class="keyword">target</span>, <span class="built_in">int</span> <span class="built_in">sum</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(<span class="built_in">sum</span> == <span class="keyword">target</span>)</div><div class="line">            &#123;</div><div class="line">                res++;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">            for(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); ++i)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(<span class="built_in">sum</span> + nums[i] &lt;= <span class="keyword">target</span>)</div><div class="line">                    dfs(res, nums, <span class="keyword">target</span>, <span class="built_in">sum</span>+nums[i]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="解题思路II-2"><a href="#解题思路II-2" class="headerlink" title="解题思路II"></a>解题思路II</h3><blockquote>
<ul>
<li>如果nums包含<code>1， 2， 3</code>三个数字，<code>Sum(nums, 4) = Sum(nums, 4-1) + Sum(nums, 4-2) + Sum(nums, 4-3)</code>;</li>
<li>如果根据上述等式进行递归迭代求解的话，超时TLE！</li>
<li>根据公式的特性，使用DP进行求解，<code>dp[i] = Sum(nums, i)</code>，dp[0]=1初始化即可；</li>
</ul>
</blockquote>
<h3 id="代码I"><a href="#代码I" class="headerlink" title="代码I"></a>代码I</h3><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        <span class="keyword">int</span> combinationSum4(vector&lt;<span class="keyword">int</span>&gt; &amp;nums, <span class="keyword">int</span> <span class="keyword">target</span>)</div><div class="line">        &#123;</div><div class="line">            vector&lt;<span class="keyword">int</span>&gt; dp(<span class="keyword">target</span>+<span class="number">1</span>, <span class="number">-1</span>);</div><div class="line">            dp[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">            <span class="function"><span class="keyword">return</span> <span class="title">solve</span><span class="params">(dp, nums, <span class="keyword">target</span>)</span></span>;</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; &amp;dp, vector&lt;<span class="keyword">int</span>&gt; &amp;nums, <span class="keyword">int</span> <span class="keyword">target</span>)</span></span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(dp[<span class="keyword">target</span>] != <span class="number">-1</span>)</div><div class="line">                <span class="keyword">return</span> dp[<span class="keyword">target</span>];</div><div class="line">            <span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); ++i)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(<span class="keyword">target</span> &gt;= nums[i])</div><div class="line">                    res += solve(dp, nums, <span class="keyword">target</span> - nums[i]);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> dp[<span class="keyword">target</span>] = res;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="代码II"><a href="#代码II" class="headerlink" title="代码II"></a>代码II</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        <span class="function"><span class="keyword">int</span> <span class="title">combinationSum4</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums, <span class="keyword">int</span> target)</span></span></div><div class="line">        &#123;</div><div class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dp(target+<span class="number">1</span>, <span class="number">0</span>);</div><div class="line">            dp[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= target; ++i)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nums.size(); ++j)</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">if</span>(i &gt;= nums[j])</div><div class="line">                        dp[i] += dp[i - nums[j]];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> dp[target];</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文包含如下题目：&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/letter-combinations-of-a-phone-number/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;17. Letter Combinations of a Phone Number&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/next-permutation/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;31. Next Permutation&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/combination-sum/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;39. Combination Sum&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/combination-sum-ii/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;40. Combination Sum II&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/permutations/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;46. Permutations&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/permutations-ii/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;47. Permutations II&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/permutation-sequence/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;60. Permutation Sequence&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/combinations/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;77. Combinations&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/combination-sum-iii/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;216. Combination Sum III&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/combination-sum-iv/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;377. Combination Sum IV&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://haoyuanliu.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://haoyuanliu.github.io/tags/LeetCode/"/>
    
      <category term="Combination" scheme="http://haoyuanliu.github.io/tags/Combination/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode Substring and Subarray</title>
    <link href="http://haoyuanliu.github.io/2016/12/20/LeetCode-Substring-and-Subarray/"/>
    <id>http://haoyuanliu.github.io/2016/12/20/LeetCode-Substring-and-Subarray/</id>
    <published>2016-12-20T12:50:48.000Z</published>
    <updated>2017-07-01T08:19:25.155Z</updated>
    
    <content type="html"><![CDATA[<p>本文包含如下题目：<br><a href="https://leetcode.com/problems/substring-with-concatenation-of-all-words/atenation-of-all-words/" target="_blank" rel="external">30. Substring with Concatenation of All Words</a><br><a href="https://leetcode.com/problems/minimum-window-substring/atenation-of-all-words/" target="_blank" rel="external">76. Minimum Window Substring</a><br><a href="https://leetcode.com/problems/minimum-size-subarray-sum/tenation-of-all-words/" target="_blank" rel="external">209. Minimum Size Subarray Sum</a><br><a href="https://leetcode.com/problems/sliding-window-maximum/" target="_blank" rel="external">239. Sliding Window Maximum</a></p>
<a id="more"></a>
<h2 id="30-Substring-with-Concatenation-of-All-Words"><a href="#30-Substring-with-Concatenation-of-All-Words" class="headerlink" title="30. Substring with Concatenation of All Words"></a>30. Substring with Concatenation of All Words</h2><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>首先构建一个<code>map&lt;string, int&gt;</code>保存words中字符串，每个对应int值为1；</li>
<li>然后对搜索字符串进行遍历，将等长的子字符串保存在<code>map&lt;string, int&gt;</code>中；</li>
<li>如果有新的子字符串或者相同的子字符串数量超过words所给出的数量，则判定失败。</li>
</ul>
</blockquote>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">class Solution</div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        vector&lt;<span class="keyword">int</span>&gt; findSubstring(<span class="keyword">string</span> s, vector&lt;<span class="keyword">string</span>&gt; &amp;words)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> i, j;</div><div class="line">            <span class="keyword">int</span> wordNum = words.<span class="built_in">size</span>();</div><div class="line">            <span class="keyword">int</span> wordLen = words[<span class="number">0</span>].<span class="built_in">size</span>();</div><div class="line">            <span class="keyword">int</span> startLen = s.<span class="built_in">size</span>() - wordLen * wordNum;</div><div class="line">            <span class="built_in">map</span>&lt;<span class="keyword">string</span>, <span class="keyword">int</span>&gt; <span class="keyword">word</span>;</div><div class="line">            <span class="built_in">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; wordNum; ++i)</div><div class="line">                ++<span class="keyword">word</span>[words[i]];</div><div class="line">            <span class="built_in">map</span>&lt;<span class="keyword">string</span>, <span class="keyword">int</span>&gt; count;</div><div class="line">            vector&lt;<span class="keyword">int</span>&gt; res;</div><div class="line">            <span class="keyword">string</span> temp;</div><div class="line">            <span class="built_in">for</span>(i = <span class="number">0</span>; i &lt;= startLen; ++i)</div><div class="line">            &#123;</div><div class="line">                count.<span class="built_in">clear</span>();</div><div class="line">                <span class="built_in">for</span>(j = <span class="number">0</span>; j &lt; wordNum; ++j)</div><div class="line">                &#123;</div><div class="line">                    temp = s.substr(i + wordLen * j, wordLen);</div><div class="line">                    <span class="built_in">if</span>(<span class="keyword">word</span>.<span class="built_in">find</span>(temp) == <span class="keyword">word</span>.<span class="built_in">end</span>() || ++count[temp] &gt; <span class="keyword">word</span>[temp])</div><div class="line">                        <span class="built_in">break</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="built_in">if</span>(j == wordNum)</div><div class="line">                    res.push_back(i);</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">return</span> res;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="76-Minimum-Window-Substring"><a href="#76-Minimum-Window-Substring" class="headerlink" title="76. Minimum Window Substring"></a>76. Minimum Window Substring</h2><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>使用一个<code>vector&lt;int&gt; ch(128, 0)</code>保存字符的数据信息；</li>
<li>正如题目描述，需要维持一个窗口，该窗口能够覆盖t中的字符；</li>
<li>计算过程就是窗口的移动过程，需要不断地从窗口头部去掉字符元素，然后在尾部添加新的字符，迭代计算窗口的宽度等数值特征；</li>
</ul>
</blockquote>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">class Solution</div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        <span class="keyword">string</span> minWindow(<span class="keyword">string</span> s, <span class="keyword">string</span> t)</div><div class="line">        &#123;</div><div class="line">            vector&lt;<span class="keyword">int</span>&gt; ch(<span class="number">128</span>, <span class="number">0</span>);</div><div class="line">            <span class="built_in">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t.<span class="built_in">size</span>(); ++i)</div><div class="line">                ch[t[i]]++;</div><div class="line">            <span class="keyword">int</span> count = t.<span class="built_in">size</span>();</div><div class="line">            <span class="keyword">int</span> <span class="built_in">begin</span>, <span class="built_in">end</span>, head, resLen;</div><div class="line">            <span class="built_in">begin</span> = <span class="built_in">end</span> = head = <span class="number">0</span>;</div><div class="line">            resLen = s.<span class="built_in">size</span>() + <span class="number">1</span>;</div><div class="line">            <span class="built_in">while</span>(<span class="built_in">end</span> &lt; s.<span class="built_in">size</span>())</div><div class="line">            &#123;</div><div class="line">                <span class="built_in">if</span>(ch[s[<span class="built_in">end</span>++]]-- &gt; <span class="number">0</span>)</div><div class="line">                    count--;</div><div class="line">                <span class="built_in">while</span>(count == <span class="number">0</span>)</div><div class="line">                &#123;</div><div class="line">                    <span class="built_in">if</span>(<span class="built_in">end</span> - <span class="built_in">begin</span> &lt; resLen)</div><div class="line">                    &#123;</div><div class="line">                        resLen = <span class="built_in">end</span> - <span class="built_in">begin</span>;</div><div class="line">                        head = <span class="built_in">begin</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="built_in">if</span>(ch[s[<span class="built_in">begin</span>++]]++ == <span class="number">0</span>)</div><div class="line">                        count++;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">return</span> resLen==s.<span class="built_in">size</span>()+<span class="number">1</span> ? <span class="string">""</span> : s.substr(head, resLen);</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="209-Minimum-Size-Subarray-Sum"><a href="#209-Minimum-Size-Subarray-Sum" class="headerlink" title="209. Minimum Size Subarray Sum"></a>209. Minimum Size Subarray Sum</h2><h3 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>维持一个窗口，不断更新子数组的长度；</li>
</ul>
</blockquote>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution</div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        <span class="built_in">int</span> minSubArrayLen(<span class="built_in">int</span> s, vector&lt;<span class="built_in">int</span>&gt; &amp;nums)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">int</span> res, <span class="built_in">count</span>, begin, <span class="keyword">end</span>;</div><div class="line">            <span class="built_in">count</span> = begin = <span class="keyword">end</span> = <span class="number">0</span>;</div><div class="line">            res = nums.<span class="built_in">size</span>() + <span class="number">1</span>;</div><div class="line">            <span class="keyword">while</span>(<span class="keyword">end</span> &lt; nums.<span class="built_in">size</span>())</div><div class="line">            &#123;</div><div class="line">                <span class="built_in">count</span> += nums[<span class="keyword">end</span>++];</div><div class="line">                <span class="keyword">while</span>(<span class="built_in">count</span> &gt;= s)</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">if</span>(<span class="keyword">end</span> - begin &lt; res)</div><div class="line">                    &#123;</div><div class="line">                        res = <span class="keyword">end</span> - begin;</div><div class="line">                    &#125;</div><div class="line">                    <span class="built_in">count</span> -= nums[begin++];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> res == nums.<span class="built_in">size</span>()+<span class="number">1</span> ? <span class="number">0</span> : res;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="239-Sliding-Window-Maximum"><a href="#239-Sliding-Window-Maximum" class="headerlink" title="239. Sliding Window Maximum"></a>239. Sliding Window Maximum</h2><h3 id="解题思路I"><a href="#解题思路I" class="headerlink" title="解题思路I"></a>解题思路I</h3><blockquote>
<ul>
<li>为了维持窗口，每次向左添加一位，更新最大值；</li>
<li>temp[j] = max(nums[j-i], temp[j])其中i表示此时窗口的大小+1;</li>
<li>这种方法效率较低，勉强AC；</li>
</ul>
</blockquote>
<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; maxSlidingWindow(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(k == <span class="number">0</span>)</div><div class="line">                <span class="keyword">return</span> nums;</div><div class="line">            <span class="keyword">int</span> len = nums.size();</div><div class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; temp = nums;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; k; ++i)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt; len; ++j)</div><div class="line">                &#123;</div><div class="line">                    temp[j] = max(nums[j-i], temp[j]);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = k<span class="number">-1</span>; i &lt; len; ++i)</div><div class="line">                res.push_back(temp[i]);</div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="解题思路II"><a href="#解题思路II" class="headerlink" title="解题思路II"></a>解题思路II</h3><blockquote>
<ul>
<li>使用<code>deque</code>维持一个双向队列，保存加入其中数据的下标；</li>
<li>对数组进行遍历，在<code>deque</code>不为空的情况下，当遍历到下标i的时候，删掉超出范围k的数据，即下标小于<code>i-k+1</code>的数据；</li>
<li>每次加入一个数据nums[i]的时候，删除比他还要小的数据，因为在整个作用范围内，小于nums[i]的数都不可能成为最大的数据；</li>
<li>上述操作维持<code>deque</code>是一个降序的队列，取窗口最大值只需要取<code>deque</code>的头部数据就可以了。</li>
</ul>
</blockquote>
<h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; maxSlidingWindow(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</div><div class="line">            <span class="keyword">if</span>(k == <span class="number">0</span>)</div><div class="line">                <span class="keyword">return</span> res;</div><div class="line">            <span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; temp;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); ++i)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">while</span>(!temp.empty() &amp;&amp; temp.front() &lt; i-k+<span class="number">1</span>)</div><div class="line">                    temp.pop_front();</div><div class="line">                <span class="keyword">while</span>(!temp.empty() &amp;&amp; nums[temp.back()] &lt; nums[i])</div><div class="line">                    temp.pop_back();</div><div class="line">                temp.push_back(i);</div><div class="line">                <span class="keyword">if</span>(i &gt;= k - <span class="number">1</span>)</div><div class="line">                    res.push_back(nums[temp.front()]);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文包含如下题目：&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/substring-with-concatenation-of-all-words/atenation-of-all-words/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;30. Substring with Concatenation of All Words&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/minimum-window-substring/atenation-of-all-words/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;76. Minimum Window Substring&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/minimum-size-subarray-sum/tenation-of-all-words/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;209. Minimum Size Subarray Sum&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/sliding-window-maximum/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;239. Sliding Window Maximum&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://haoyuanliu.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://haoyuanliu.github.io/tags/LeetCode/"/>
    
      <category term="Substring" scheme="http://haoyuanliu.github.io/tags/Substring/"/>
    
      <category term="Subarray" scheme="http://haoyuanliu.github.io/tags/Subarray/"/>
    
  </entry>
  
  <entry>
    <title>Partition算法剖析</title>
    <link href="http://haoyuanliu.github.io/2016/12/18/Partition%E7%AE%97%E6%B3%95%E5%89%96%E6%9E%90/"/>
    <id>http://haoyuanliu.github.io/2016/12/18/Partition算法剖析/</id>
    <published>2016-12-18T08:01:12.000Z</published>
    <updated>2017-07-01T08:19:25.155Z</updated>
    
    <content type="html"><![CDATA[<p>partition算法从字面上就非常好理解，就是分割算法嘛！简单讲就是可以把数组按照一定的分成几个部分，其中最常见的就是快速排序中使用的partition算法，这是一个二分partition算法，将整个数组分解为小于某个数和大于某个数的两个部分，然后递归进行排序算法。<br>上述只是二分partition算法，我们还会使用三分partition算法，三分partition也有这非常重要的应用。往往我们更多的关注点是快速排序算法等各种算法，以及时间复杂度等这些东西，今天我们专门讨论一下partition分割算法的一些应用。</p>
<a id="more"></a>
<h2 id="二分-Partition算法"><a href="#二分-Partition算法" class="headerlink" title="二分 Partition算法"></a>二分 Partition算法</h2><p>二分partition算法是我们最常使用的，尤其在快速排序中使用最为常见。常见的partition算法有如下两种实现思路：</p>
<h3 id="思路I"><a href="#思路I" class="headerlink" title="思路I"></a>思路I</h3><h4 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h4><blockquote>
<ul>
<li>使用第一个数组元素作为枢轴点，即为pivot；</li>
<li>使用一个指针去扫描整个数组，凡是小于pivot的全部放到数组左端；</li>
<li>最后讲pivot放到数组中间的位置，pivot左边全部都是小于他的数字，右边反之，最后返回pivot的位置信息；</li>
</ul>
</blockquote>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> partition(vector&lt;<span class="keyword">int</span>&gt; &amp;nums, <span class="keyword">int</span> <span class="built_in">begin</span>, <span class="keyword">int</span> <span class="built_in">end</span>)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> pivot = nums[<span class="built_in">begin</span>];</div><div class="line">    <span class="keyword">int</span> pos = <span class="built_in">begin</span>;</div><div class="line">    <span class="built_in">for</span>(<span class="keyword">int</span> i = <span class="built_in">begin</span>+<span class="number">1</span>; i &lt; <span class="built_in">end</span>; ++i)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">if</span>(nums[i] &lt;= pivot)</div><div class="line">            swap(nums[++pos],nums[i]);</div><div class="line">    &#125;</div><div class="line">    swap(nums[pos], nums[<span class="built_in">begin</span>]);</div><div class="line">    <span class="built_in">return</span> pos;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="思路II"><a href="#思路II" class="headerlink" title="思路II"></a>思路II</h3><h4 id="算法思路-1"><a href="#算法思路-1" class="headerlink" title="算法思路"></a>算法思路</h4><blockquote>
<ul>
<li>就如快速排序中最常使用的那样，使用两个指针分别从头部和尾部进行扫描，头部遇到大于pivot的数和尾部遇到小于pivot的数进行交换；</li>
<li>使用了两个指针，效率更高一点；</li>
</ul>
</blockquote>
<h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> partition(vector&lt;<span class="keyword">int</span>&gt; &amp;nums, <span class="keyword">int</span> <span class="built_in">begin</span>, <span class="keyword">int</span> <span class="built_in">end</span>)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> pivot = nums[<span class="built_in">begin</span>];</div><div class="line">    <span class="built_in">while</span>(<span class="built_in">begin</span> &lt; <span class="built_in">end</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">while</span>(<span class="built_in">begin</span> &lt; <span class="built_in">end</span> &amp;&amp; nums[--<span class="built_in">end</span>] &gt;= pivot);</div><div class="line">        nums[<span class="built_in">begin</span>] = nums[<span class="built_in">end</span>];</div><div class="line">        <span class="built_in">while</span>(<span class="built_in">begin</span> &lt; <span class="built_in">end</span> &amp;&amp; nums[++<span class="built_in">begin</span>] &lt;= pivot);</div><div class="line">        nums[<span class="built_in">end</span>] = nums[<span class="built_in">begin</span>];</div><div class="line">    &#125;</div><div class="line">    nums[<span class="built_in">begin</span>] = pivot;</div><div class="line">    <span class="built_in">return</span> <span class="built_in">begin</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="二分partition算法应用"><a href="#二分partition算法应用" class="headerlink" title="二分partition算法应用"></a>二分partition算法应用</h2><h3 id="快速排序算法"><a href="#快速排序算法" class="headerlink" title="快速排序算法"></a>快速排序算法</h3><p>经典的快速排序算法，直接上代码：</p>
<h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> quickSort(vector&lt;<span class="keyword">int</span>&gt; &amp;nums, <span class="keyword">int</span> <span class="built_in">begin</span>, <span class="keyword">int</span> <span class="built_in">end</span>)</div><div class="line">&#123;</div><div class="line">    <span class="built_in">if</span>(<span class="built_in">end</span> - <span class="built_in">begin</span> &lt;= <span class="number">1</span>)</div><div class="line">        <span class="built_in">return</span>;</div><div class="line">    <span class="keyword">int</span> mid = partition(nums, <span class="built_in">begin</span>, <span class="built_in">end</span>);</div><div class="line"></div><div class="line">    quickSort(nums, <span class="built_in">begin</span>, mid);</div><div class="line">    quickSort(nums, mid, <span class="built_in">end</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="数组第K大数值查询"><a href="#数组第K大数值查询" class="headerlink" title="数组第K大数值查询"></a>数组第K大数值查询</h3><p>这也是LeetCode中的一道例题，非常适合使用partition算法进行解决，问题链接<a href="https://leetcode.com/problems/kth-largest-element-in-an-array/" target="_blank" rel="external">215. Kth Largest Element in an Array</a>！</p>
<h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><blockquote>
<ul>
<li>首先可以通过排序进行求解，简单暴力；</li>
<li>不断使用partition算法进行迭代查找；</li>
</ul>
</blockquote>
<h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">class Solution</div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        <span class="keyword">int</span> findKthLargest(vector&lt;<span class="keyword">int</span>&gt; &amp;nums, <span class="keyword">int</span> k)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> len = nums.<span class="built_in">size</span>();</div><div class="line">            <span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line">            <span class="keyword">int</span> left = <span class="number">0</span>;</div><div class="line">            <span class="keyword">int</span> right = len;</div><div class="line">            <span class="built_in">while</span>(left &lt; right)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">int</span> pos = partition(nums, left, right);</div><div class="line">                <span class="built_in">if</span>(pos == len-k)</div><div class="line">                &#123;</div><div class="line">                    res = nums[pos];</div><div class="line">                    <span class="built_in">break</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="built_in">else</span> <span class="built_in">if</span>(pos &lt; len-k)</div><div class="line">                    left = pos+<span class="number">1</span>;</div><div class="line">                <span class="built_in">else</span></div><div class="line">                    right = pos;</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">return</span> res;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> partition(vector&lt;<span class="keyword">int</span>&gt; &amp;nums, <span class="keyword">int</span> <span class="built_in">begin</span>, <span class="keyword">int</span> <span class="built_in">end</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> pivot = nums[<span class="built_in">begin</span>];</div><div class="line">            <span class="built_in">while</span>(<span class="built_in">begin</span> &lt; <span class="built_in">end</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="built_in">while</span>(<span class="built_in">begin</span> &lt; <span class="built_in">end</span> &amp;&amp; nums[--<span class="built_in">end</span>] &gt;= pivot);</div><div class="line">                nums[<span class="built_in">begin</span>] = nums[<span class="built_in">end</span>];</div><div class="line">                <span class="built_in">while</span>(<span class="built_in">begin</span> &lt; <span class="built_in">end</span> &amp;&amp; nums[++<span class="built_in">begin</span>] &lt;= pivot);</div><div class="line">                nums[<span class="built_in">end</span>] = nums[<span class="built_in">begin</span>];</div><div class="line">            &#125;</div><div class="line">            nums[<span class="built_in">begin</span>] = pivot;</div><div class="line">            <span class="built_in">return</span> <span class="built_in">begin</span>;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="三分paitition算法"><a href="#三分paitition算法" class="headerlink" title="三分paitition算法"></a>三分paitition算法</h2><p>三分partition算法，顾名思义，也就是将数组按照规则分为三个部分，比如非常经典的国旗问题<a href="https://en.wikipedia.org/wiki/Dutch_national_flag_problem#Pseudocode" target="_blank" rel="external">Dutch national flag problem</a>，就是要给定的红、白、蓝三色随机颜色小球按照红、白、蓝的顺序进行排序，利用partition算法，使用一个指针进行扫描，红色的小球就用swap()放到左边，白色的保持位置不变，蓝色的同样使用swap()放到右边，最后就得到要求的序列了。</p>
<h3 id="Dutch-National-Flag-Problem"><a href="#Dutch-National-Flag-Problem" class="headerlink" title="Dutch National Flag Problem"></a>Dutch National Flag Problem</h3><p>LeetCode中有恰好有这么一个题：<a href="https://leetcode.com/problems/sort-colors/" target="_blank" rel="external">75. Sort Colors</a>！</p>
<h4 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h4><blockquote>
<ul>
<li>就使用三分partition算法进行求解就可以了！</li>
</ul>
</blockquote>
<h4 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h4><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution</div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        void sortColors(vector&lt;<span class="built_in">int</span>&gt; &amp;nums)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">int</span> <span class="built_in">len</span> = nums.size();</div><div class="line">            <span class="built_in">int</span> <span class="built_in">left</span> = <span class="number">0</span>;</div><div class="line">            <span class="built_in">int</span> <span class="built_in">right</span> = <span class="built_in">len</span> - <span class="number">1</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">len</span>; ++i)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(i &gt; <span class="built_in">right</span>)</div><div class="line">                    break;</div><div class="line">                <span class="keyword">if</span>(nums[i] == <span class="number">1</span>)</div><div class="line">                    continue;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(nums[i] == <span class="number">0</span>)</div><div class="line">                &#123;</div><div class="line">                    swap(nums[i], nums[<span class="built_in">left</span>]);</div><div class="line">                    <span class="built_in">left</span>++;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                &#123;</div><div class="line">                    swap(nums[i], nums[<span class="built_in">right</span>]);</div><div class="line">                    <span class="built_in">right</span>--;</div><div class="line">                    i--;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="进阶应用"><a href="#进阶应用" class="headerlink" title="进阶应用"></a>进阶应用</h3><h4 id="LeetCode-324-Wiggle-Sort-II"><a href="#LeetCode-324-Wiggle-Sort-II" class="headerlink" title="LeetCode 324. Wiggle Sort II"></a>LeetCode 324. Wiggle Sort II</h4><p>LeetCode中的第324题中也同样可以使用三分partition算法，该题的discuss中，StefanPochmann大神提出一种O(n)+O(1)复杂度的高效算法，原链接为：<br><a href="https://leetcode.com/problems/wiggle-sort-ii/" target="_blank" rel="external">324. Wiggle Sort II</a><br><a href="https://discuss.leetcode.com/topic/32929/o-n-o-1-after-median-virtual-indexing" target="_blank" rel="external">Discuss</a>！</p>
<h4 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h4><blockquote>
<ul>
<li>使用partition算法获取数组的中位数，这个思路同找第k大的数，这里作者用了c++中的nth_element()函数；</li>
<li>使用宏定义的方式<code>#define A(i) nums[(1+2*(i)) % (n|1)]</code>，<code>A()</code>的前半部分对应nums中下标为奇数的元素，后半部分为偶数，即<code>奇数</code> +　<code>偶数</code>；</li>
<li>使用三分partition算法对A()进行排序，使其前半部分大于后半部分，即在nums中<code>奇数部分</code> &gt; <code>偶数部分</code>；</li>
<li>最终达到的效果为 <code>0</code> &lt; <code>1</code> &gt; <code>2</code> &lt; <code>3</code> &gt; <code>4</code> &lt; <code>5</code> …</li>
<li>注意这里需要的是<code>奇数</code>&gt;<code>偶数</code>，所以进行partition的时候大于pivot枢轴值的要放到前面；</li>
</ul>
</blockquote>
<p><code>#define A(i) nums[(1+2*(i)) % (n|1)]</code>的作用如下所示：<br>假设有0, 1, 2, 3, 4, 5, 6, 7, 8, 9共10个数据，则使用<code>A()</code>进行映射之后的结果为：<br><code>A(0)</code> -&gt; <code>nums[1]</code>.<br><code>A(1)</code> -&gt; <code>nums[3]</code>.<br><code>A(2)</code> -&gt; <code>nums[5]</code>.<br><code>A(3)</code> -&gt; <code>nums[7]</code>.<br><code>A(4)</code> -&gt; <code>nums[9]</code>.<br><code>A(5)</code> -&gt; <code>nums[0]</code>.<br><code>A(6)</code> -&gt; <code>nums[2]</code>.<br><code>A(7)</code> -&gt; <code>nums[4]</code>.<br><code>A(8)</code> -&gt; <code>nums[6]</code>.<br><code>A(9)</code> -&gt; <code>nums[8]</code>.</p>
<h4 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">wiggleSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> n = nums.size();</div><div class="line">    </div><div class="line">            <span class="comment">// Find a median.</span></div><div class="line">            <span class="keyword">auto</span> midptr = nums.begin() + n / <span class="number">2</span>;</div><div class="line">            nth_element(nums.begin(), midptr, nums.end());</div><div class="line">            <span class="keyword">int</span> mid = *midptr;</div><div class="line">    </div><div class="line">            <span class="comment">// Index-rewiring.</span></div><div class="line">            <span class="meta">#<span class="meta-keyword">define</span> A(i) nums[(1+2*(i)) % (n|1)]</span></div><div class="line"></div><div class="line">            <span class="comment">// 3-way-partition-to-wiggly in O(n) time with O(1) space.</span></div><div class="line">            <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, k = n - <span class="number">1</span>;</div><div class="line">            <span class="keyword">while</span> (j &lt;= k) </div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span> (A(j) &gt; mid)</div><div class="line">                    swap(A(i++), A(j++));</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (A(j) &lt; mid)</div><div class="line">                    swap(A(j), A(k--));</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    j++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;partition算法从字面上就非常好理解，就是分割算法嘛！简单讲就是可以把数组按照一定的分成几个部分，其中最常见的就是快速排序中使用的partition算法，这是一个二分partition算法，将整个数组分解为小于某个数和大于某个数的两个部分，然后递归进行排序算法。&lt;br&gt;上述只是二分partition算法，我们还会使用三分partition算法，三分partition也有这非常重要的应用。往往我们更多的关注点是快速排序算法等各种算法，以及时间复杂度等这些东西，今天我们专门讨论一下partition分割算法的一些应用。&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="http://haoyuanliu.github.io/categories/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="http://haoyuanliu.github.io/tags/Algorithm/"/>
    
      <category term="LeetCode" scheme="http://haoyuanliu.github.io/tags/LeetCode/"/>
    
      <category term="partition" scheme="http://haoyuanliu.github.io/tags/partition/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode List Sort</title>
    <link href="http://haoyuanliu.github.io/2016/12/16/LeetCode-List-Sort/"/>
    <id>http://haoyuanliu.github.io/2016/12/16/LeetCode-List-Sort/</id>
    <published>2016-12-16T14:02:22.000Z</published>
    <updated>2017-07-01T08:19:25.153Z</updated>
    
    <content type="html"><![CDATA[<p>本文包含如下题目：<br><a href="https://leetcode.com/problems/merge-two-sorted-lists/" target="_blank" rel="external">21. Merge Two Sorted Lists</a><br><a href="https://leetcode.com/problems/sort-colors/" target="_blank" rel="external">75. Sort Colors</a><br><a href="https://leetcode.com/problems/insertion-sort-list/" target="_blank" rel="external">147. Insertion Sort List</a><br><a href="https://leetcode.com/problems/sort-liste.com/problems/sort-colors/" target="_blank" rel="external">148. Sort List</a><br><a href="https://leetcode.com/problems/kth-largest-element-in-an-arraye.com/problems/sort-colors/" target="_blank" rel="external">215. Kth Largest Element in an Array</a><br><a href="https://leetcode.com/problems/wiggle-sort-ii/" target="_blank" rel="external">324. Wiggle Sort II</a></p>
<a id="more"></a>
<h2 id="21-Merge-Two-Sorted-Lists"><a href="#21-Merge-Two-Sorted-Lists" class="headerlink" title="21. Merge Two Sorted Lists"></a>21. Merge Two Sorted Lists</h2><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>简单题，不多说了；</li>
</ul>
</blockquote>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">class Solution</div><div class="line">&#123;</div><div class="line">    public:</div><div class="line">        ListNode* mergeTwoLists(ListNode* l1, ListNode* l2)</div><div class="line">        &#123;</div><div class="line">            ListNode* head = new ListNode(<span class="number">0</span>);</div><div class="line">            ListNode* p = head;</div><div class="line">            <span class="keyword">while</span>(l1 &amp;&amp; l2)</div><div class="line">            &#123;</div><div class="line">                <span class="function"><span class="title">if</span>(l1-&gt;</span><span class="function"><span class="title">val</span> &gt; l2-&gt;</span>val)</div><div class="line">                &#123;</div><div class="line">                    <span class="function"><span class="title">p</span>-&gt;</span><span class="function"><span class="title">next</span> = new ListNode(l2-&gt;</span>val);</div><div class="line">                    <span class="function"><span class="title">p</span> = p-&gt;</span>next;</div><div class="line">                    <span class="function"><span class="title">l2</span> = l2-&gt;</span>next;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                &#123;</div><div class="line">                    <span class="function"><span class="title">p</span>-&gt;</span><span class="function"><span class="title">next</span> = new ListNode(l1-&gt;</span>val);</div><div class="line">                    <span class="function"><span class="title">p</span> = p-&gt;</span>next;</div><div class="line">                    <span class="function"><span class="title">l1</span> = l1-&gt;</span>next;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(l1)</div><div class="line">                <span class="function"><span class="title">p</span>-&gt;</span>next = l1;</div><div class="line">            <span class="keyword">if</span>(l2)</div><div class="line">                <span class="function"><span class="title">p</span>-&gt;</span>next = l2;</div><div class="line"></div><div class="line">            <span class="function"><span class="title">return</span> head-&gt;</span>next;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="75-Sort-Colors"><a href="#75-Sort-Colors" class="headerlink" title="75. Sort Colors"></a>75. Sort Colors</h2><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>把0一次丢到数组左边，2丢到数组右边，1的话保持不动；</li>
</ul>
</blockquote>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution</div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        void sortColors(vector&lt;<span class="built_in">int</span>&gt; &amp;nums)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">int</span> <span class="built_in">len</span> = nums.size();</div><div class="line">            <span class="built_in">int</span> <span class="built_in">left</span> = <span class="number">0</span>;</div><div class="line">            <span class="built_in">int</span> <span class="built_in">right</span> = <span class="built_in">len</span> - <span class="number">1</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">len</span>; ++i)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(i &gt; <span class="built_in">right</span>)</div><div class="line">                    break;</div><div class="line">                <span class="keyword">if</span>(nums[i] == <span class="number">1</span>)</div><div class="line">                    continue;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(nums[i] == <span class="number">0</span>)</div><div class="line">                &#123;</div><div class="line">                    swap(nums[i], nums[<span class="built_in">left</span>]);</div><div class="line">                    <span class="built_in">left</span>++;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                &#123;</div><div class="line">                    swap(nums[i], nums[<span class="built_in">right</span>]);</div><div class="line">                    <span class="built_in">right</span>--;</div><div class="line">                    i--;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="147-Insertion-Sort-List"><a href="#147-Insertion-Sort-List" class="headerlink" title="147. Insertion Sort List"></a>147. Insertion Sort List</h2><h3 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>需要新建一个链表头保存已排序的节点；</li>
</ul>
</blockquote>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">class Solution</div><div class="line">&#123;</div><div class="line">    <span class="symbol">public:</span></div><div class="line">        ListNode *insertionSortList(ListNode *head)</div><div class="line">        &#123;</div><div class="line">            if(head == NULL)</div><div class="line">                <span class="keyword">return</span> head;</div><div class="line">            ListNode *root = new ListNode(<span class="number">0</span>);</div><div class="line">            ListNode *pre = root;</div><div class="line">            ListNode *cur = head;</div><div class="line">            ListNode *<span class="keyword">next</span> = NULL;</div><div class="line">            <span class="keyword">while</span>(cur)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">next</span> = cur-&gt;<span class="keyword">next</span>;</div><div class="line">                <span class="keyword">while</span>(pre-&gt;<span class="keyword">next</span> &amp;&amp; pre-&gt;<span class="keyword">next</span>-&gt;val &lt; cur-&gt;val)</div><div class="line">                    pre = pre-&gt;<span class="keyword">next</span>;</div><div class="line">                cur-&gt;<span class="keyword">next</span> = pre-&gt;<span class="keyword">next</span>;</div><div class="line">                pre-&gt;<span class="keyword">next</span> = cur;</div><div class="line"></div><div class="line">                cur = <span class="keyword">next</span>;</div><div class="line">                pre = root;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> root-&gt;<span class="keyword">next</span>;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="148-Sort-List"><a href="#148-Sort-List" class="headerlink" title="148. Sort List"></a>148. Sort List</h2><h3 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>符合要求的排序算法有快排、堆排和归并，归并更适合用在链表中；</li>
<li>使用一个单步遍历和一个两步遍历快速找到链表的中间结点；</li>
<li>使用归并排序，最后通过merge函数将链表链接起来。</li>
</ul>
</blockquote>
<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">class Solution</div><div class="line">&#123;</div><div class="line">    <span class="symbol">public:</span></div><div class="line">        ListNode *sortList(ListNode *head)</div><div class="line">        &#123;</div><div class="line">            if(!head || !head-&gt;<span class="keyword">next</span>)</div><div class="line">                <span class="keyword">return</span> head;</div><div class="line">            ListNode *p = head;</div><div class="line">            ListNode *p2 = head;</div><div class="line">            <span class="keyword">while</span>(p &amp;&amp; p2-&gt;<span class="keyword">next</span>-&gt;<span class="keyword">next</span>)</div><div class="line">            &#123;</div><div class="line">                p = p-&gt;<span class="keyword">next</span>;</div><div class="line">                p2 = p2-&gt;<span class="keyword">next</span>-&gt;<span class="keyword">next</span>;</div><div class="line">                if(p2-&gt;<span class="keyword">next</span> == NULL)</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            ListNode *head2 = p-&gt;<span class="keyword">next</span>;</div><div class="line">            p-&gt;<span class="keyword">next</span> = NULL;</div><div class="line">            <span class="keyword">return</span> merge(sortList(head), sortList(head2));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        ListNode *merge(ListNode *a, ListNode *b)</div><div class="line">        &#123;</div><div class="line">            ListNode *root = new ListNode(<span class="number">1</span>);</div><div class="line">            ListNode *p = root;</div><div class="line">            <span class="keyword">while</span>(a &amp;&amp; b)</div><div class="line">            &#123;</div><div class="line">                if(a-&gt;val &gt; b-&gt;val)</div><div class="line">                &#123;</div><div class="line">                    p-&gt;<span class="keyword">next</span> = b;</div><div class="line">                    b = b-&gt;<span class="keyword">next</span>;</div><div class="line">                    p = p-&gt;<span class="keyword">next</span>;</div><div class="line">                    p-&gt;<span class="keyword">next</span> = NULL;</div><div class="line">                &#125;</div><div class="line">                else</div><div class="line">                &#123;</div><div class="line">                    p-&gt;<span class="keyword">next</span> = a;</div><div class="line">                    a = a-&gt;<span class="keyword">next</span>;</div><div class="line">                    p = p-&gt;<span class="keyword">next</span>;</div><div class="line">                    p-&gt;<span class="keyword">next</span> = NULL;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            if(a)</div><div class="line">                p-&gt;<span class="keyword">next</span> = a;</div><div class="line">            if(b)</div><div class="line">                p-&gt;<span class="keyword">next</span> = b;</div><div class="line">            <span class="keyword">return</span> root-&gt;<span class="keyword">next</span>;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="215-Kth-Largest-Element-in-an-Array"><a href="#215-Kth-Largest-Element-in-an-Array" class="headerlink" title="215. Kth Largest Element in an Array"></a>215. Kth Largest Element in an Array</h2><h3 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>各种排序算法的讨论比较才是这一题的关键；</li>
</ul>
</blockquote>
<h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        <span class="function"><span class="keyword">int</span> <span class="title">findKthLargest</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums, <span class="keyword">int</span> k)</span></span></div><div class="line">        &#123;</div><div class="line">            sort(nums.begin(), nums.end());</div><div class="line">            <span class="keyword">return</span> nums[nums.size() - k];</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="324-Wiggle-Sort-II"><a href="#324-Wiggle-Sort-II" class="headerlink" title="324. Wiggle Sort II"></a>324. Wiggle Sort II</h2><h3 id="解题思路-5"><a href="#解题思路-5" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>首先进行排序，然后从中间位置分为两个部分，都按照降序进行重组；</li>
</ul>
</blockquote>
<h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution</div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        void wiggleSort(vector&lt;<span class="built_in">int</span>&gt; &amp;nums)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">int</span> <span class="built_in">len</span> = nums.size();</div><div class="line">            vector&lt;<span class="built_in">int</span>&gt; temp(<span class="built_in">len</span>, <span class="number">0</span>);</div><div class="line">            sort(nums.begin(), nums.<span class="keyword">end</span>());</div><div class="line">            <span class="built_in">int</span> <span class="built_in">mid</span> = (<span class="built_in">len</span> + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</div><div class="line">            <span class="built_in">int</span> <span class="built_in">right</span> = <span class="built_in">len</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">len</span>; ++i)</div><div class="line">                temp[i] = (i&amp;<span class="number">1</span>) ? nums[--<span class="built_in">right</span>] : nums[--<span class="built_in">mid</span>];</div><div class="line">            <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">len</span>; ++i)</div><div class="line">                nums[i] = temp[i];</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文包含如下题目：&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/merge-two-sorted-lists/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;21. Merge Two Sorted Lists&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/sort-colors/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;75. Sort Colors&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/insertion-sort-list/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;147. Insertion Sort List&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/sort-liste.com/problems/sort-colors/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;148. Sort List&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/kth-largest-element-in-an-arraye.com/problems/sort-colors/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;215. Kth Largest Element in an Array&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/wiggle-sort-ii/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;324. Wiggle Sort II&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://haoyuanliu.github.io/categories/LeetCode/"/>
    
    
      <category term="LinkList" scheme="http://haoyuanliu.github.io/tags/LinkList/"/>
    
      <category term="LeetCode" scheme="http://haoyuanliu.github.io/tags/LeetCode/"/>
    
      <category term="Sort" scheme="http://haoyuanliu.github.io/tags/Sort/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode Search 2D Matrix</title>
    <link href="http://haoyuanliu.github.io/2016/12/16/LeetCode-Search-2D-Matrix/"/>
    <id>http://haoyuanliu.github.io/2016/12/16/LeetCode-Search-2D-Matrix/</id>
    <published>2016-12-16T07:49:24.000Z</published>
    <updated>2017-07-01T08:19:25.154Z</updated>
    
    <content type="html"><![CDATA[<p>本文包含如下题目：<br><a href="https://leetcode.com/problems/search-a-2d-matrix/ms/search-a-2d-matrix/" target="_blank" rel="external">74. Search a 2D Matrix</a><br><a href="https://leetcode.com/problems/search-a-2d-matrix-ii/" target="_blank" rel="external">240. Search a 2D Matrix II</a></p>
<a id="more"></a>
<h2 id="74-Search-a-2D-Matrix"><a href="#74-Search-a-2D-Matrix" class="headerlink" title="74. Search a 2D Matrix"></a>74. Search a 2D Matrix</h2><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>先找到target所在的行，然后对所在行进行二分查找，结果超时；</li>
<li>将矩阵看做一个一维数组，然后整体使用二分查找；</li>
</ul>
</blockquote>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution</div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        bool searchMatrix(vector&lt;vector&lt;<span class="built_in">int</span>&gt; &gt; &amp;matrix, <span class="built_in">int</span> target)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(matrix[<span class="number">0</span>][<span class="number">0</span>] == target)</div><div class="line">                return <span class="literal">true</span>;</div><div class="line">            <span class="built_in">int</span> m = matrix.size();</div><div class="line">            <span class="built_in">int</span> n = m ? matrix[<span class="number">0</span>].size() : <span class="number">0</span>;</div><div class="line">            <span class="built_in">int</span> total = n * m;</div><div class="line">            <span class="built_in">int</span> <span class="built_in">left</span> = <span class="number">0</span>;</div><div class="line">            <span class="built_in">int</span> <span class="built_in">right</span> = n * m - <span class="number">1</span>;</div><div class="line">            <span class="built_in">int</span> <span class="built_in">mid</span> = <span class="number">0</span>;</div><div class="line">            <span class="keyword">while</span>(<span class="built_in">left</span> &lt; <span class="built_in">right</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(matrix[<span class="built_in">left</span>/n][<span class="built_in">left</span>%n] == target)</div><div class="line">                    return <span class="literal">true</span>;</div><div class="line">                <span class="keyword">if</span>(matrix[<span class="built_in">right</span>/n][<span class="built_in">right</span>%n] == target)</div><div class="line">                    return <span class="literal">true</span>;</div><div class="line">                <span class="built_in">mid</span> = (<span class="built_in">left</span> + <span class="built_in">right</span>) / <span class="number">2</span>;</div><div class="line">                <span class="keyword">if</span>(matrix[<span class="built_in">mid</span>/n][<span class="built_in">mid</span>%n] == target)</div><div class="line">                    return <span class="literal">true</span>;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(matrix[<span class="built_in">mid</span>/n][<span class="built_in">mid</span>%n] &lt; target)</div><div class="line">                    <span class="built_in">left</span> = <span class="built_in">mid</span> + <span class="number">1</span>;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    <span class="built_in">right</span> = <span class="built_in">mid</span> - <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">            return <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="240-Search-a-2D-Matrix-II"><a href="#240-Search-a-2D-Matrix-II" class="headerlink" title="240. Search a 2D Matrix II"></a>240. Search a 2D Matrix II</h2><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>从右上角开始查找；</li>
<li>如果小于target，则这一行全部小于target；</li>
<li>如果大于target，则这一列全部大于target；</li>
<li>按照这个策略进行搜索即可；</li>
</ul>
</blockquote>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        <span class="function"><span class="keyword">bool</span> <span class="title">searchMatrix</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; &amp;matrix, <span class="keyword">int</span> target)</span></span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> m = matrix.size();</div><div class="line">            <span class="keyword">int</span> n = m ? matrix[<span class="number">0</span>].size() : <span class="number">0</span>;</div><div class="line">            <span class="keyword">int</span> x = <span class="number">0</span>;</div><div class="line">            <span class="keyword">int</span> y = n - <span class="number">1</span>;</div><div class="line">            <span class="keyword">while</span>(x &lt; m &amp;&amp; y &gt;= <span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(matrix[x][y] == target)</div><div class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(matrix[x][y] &lt; target)</div><div class="line">                    x++;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    y--;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文包含如下题目：&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/search-a-2d-matrix/ms/search-a-2d-matrix/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;74. Search a 2D Matrix&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/search-a-2d-matrix-ii/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;240. Search a 2D Matrix II&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://haoyuanliu.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://haoyuanliu.github.io/tags/LeetCode/"/>
    
      <category term="Binary Search" scheme="http://haoyuanliu.github.io/tags/Binary-Search/"/>
    
      <category term="Divide and Conquer" scheme="http://haoyuanliu.github.io/tags/Divide-and-Conquer/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode Matrix Setting</title>
    <link href="http://haoyuanliu.github.io/2016/12/16/LeetCode-Matrix-Setting/"/>
    <id>http://haoyuanliu.github.io/2016/12/16/LeetCode-Matrix-Setting/</id>
    <published>2016-12-16T06:51:39.000Z</published>
    <updated>2017-07-01T08:19:25.154Z</updated>
    
    <content type="html"><![CDATA[<p>本文包含如下题目：<br><a href="https://leetcode.com/problems/set-matrix-zeroes/" target="_blank" rel="external">73. Set Matrix Zeroes</a><br><a href="https://leetcode.com/problems/game-of-life/" target="_blank" rel="external">289. Game of Life</a></p>
<a id="more"></a>
<h2 id="73-Set-Matrix-Zeroes"><a href="#73-Set-Matrix-Zeroes" class="headerlink" title="73. Set Matrix Zeroes"></a>73. Set Matrix Zeroes</h2><h3 id="解题思路I"><a href="#解题思路I" class="headerlink" title="解题思路I"></a>解题思路I</h3><blockquote>
<ul>
<li>直接使用一个m长和n长的数组存储矩阵中0的位置；</li>
<li>空间复杂度（m+n）；</li>
</ul>
</blockquote>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">setZeroes</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; &amp;matrix)</span></span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> m = matrix.size();</div><div class="line">            <span class="keyword">int</span> n = matrix[<span class="number">0</span>].size();</div><div class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; row(m, <span class="number">1</span>);</div><div class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; col(n, <span class="number">1</span>);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">if</span>(matrix[i][j] == <span class="number">0</span>)</div><div class="line">                    &#123;</div><div class="line">                        row[i] = <span class="number">0</span>;</div><div class="line">                        col[j] = <span class="number">0</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">if</span>(row[i] &amp;&amp; col[j])</div><div class="line">                        <span class="keyword">continue</span>;</div><div class="line">                    matrix[i][j] = <span class="number">0</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="解题思路II"><a href="#解题思路II" class="headerlink" title="解题思路II"></a>解题思路II</h3><blockquote>
<ul>
<li>将矩阵中０所在的位置信息保存在首行和首列中；</li>
<li>空间复杂度为０；</li>
</ul>
</blockquote>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight mel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">class Solution</div><div class="line">&#123;</div><div class="line">    public:</div><div class="line">        void setZeroes(<span class="keyword">vector</span>&lt;<span class="keyword">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; &amp;<span class="keyword">matrix</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> m = <span class="keyword">matrix</span>.<span class="keyword">size</span>();</div><div class="line">            <span class="keyword">int</span> n = <span class="keyword">matrix</span>[<span class="number">0</span>].<span class="keyword">size</span>();</div><div class="line">            bool flag = false;</div><div class="line"></div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(<span class="keyword">matrix</span>[i][<span class="number">0</span>] == <span class="number">0</span>)</div><div class="line">                    flag = true;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; ++j)</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">if</span>(<span class="keyword">matrix</span>[i][j] == <span class="number">0</span>)</div><div class="line">                        <span class="keyword">matrix</span>[i][<span class="number">0</span>] = <span class="keyword">matrix</span>[<span class="number">0</span>][j] = <span class="number">0</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = m<span class="number">-1</span>; i &gt;= <span class="number">0</span>; --i)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = n<span class="number">-1</span>; j &gt; <span class="number">0</span>; --j)</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">if</span>(!<span class="keyword">matrix</span>[i][<span class="number">0</span>] || !<span class="keyword">matrix</span>[<span class="number">0</span>][j])</div><div class="line">                        <span class="keyword">matrix</span>[i][j] = <span class="number">0</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>(flag)</div><div class="line">                    <span class="keyword">matrix</span>[i][<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="289-Game-of-Life"><a href="#289-Game-of-Life" class="headerlink" title="289. Game of Life"></a>289. Game of Life</h2><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<ul>
<li>[2nd bit, 1st bit] = [next state, current state]</li>
</ul>
<ul>
<li>00  dead (current) -&gt; dead(next)</li>
<li>01  live (current) -&gt; dead(next)</li>
<li>10  dead (current) -&gt; live(next)</li>
<li>11  live (current) -&gt; live(next)</li>
</ul>
<ul>
<li>discuss里面的思路，使用２bit的数据存储下一步和现在的状态，最后移位即可；</li>
</ul>
</blockquote>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">class Solution</div><div class="line">&#123;</div><div class="line"><span class="symbol">    public:</span></div><div class="line">        void gameOfLife(vector&lt;vector&lt;int&gt; &gt; &amp;<span class="keyword">board)</span></div><div class="line">        &#123;</div><div class="line">            int m = <span class="keyword">board.size();</span></div><div class="line">            int n = m ? <span class="keyword">board[0].size() </span>: <span class="number">0</span><span class="comment">;</span></div><div class="line">            int <span class="built_in">count</span><span class="comment">;</span></div><div class="line">            for(int i = <span class="number">0</span><span class="comment">; i &lt; m; ++i)</span></div><div class="line">            &#123;</div><div class="line">                for(int <span class="keyword">j </span>= <span class="number">0</span><span class="comment">; j &lt; n; ++j)</span></div><div class="line">                &#123;</div><div class="line">                    <span class="built_in">count</span> = <span class="keyword">board[i][j] </span>? -<span class="number">1</span> : <span class="number">0</span><span class="comment">;</span></div><div class="line">                    for(int x = max(<span class="number">0</span>, i-1)<span class="comment">; x &lt; min(i+2, m); ++x)</span></div><div class="line">                    &#123;</div><div class="line">                        for(int y = max(<span class="number">0</span>, <span class="keyword">j-1); </span>y &lt; min(<span class="keyword">j+2, </span>n)<span class="comment">; ++y)</span></div><div class="line">                        &#123;</div><div class="line">                            if(<span class="keyword">board[x][y]&amp;1)</span></div><div class="line">                                <span class="built_in">count</span>++<span class="comment">;</span></div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    if(<span class="built_in">count</span> == <span class="number">2</span>)</div><div class="line">                        <span class="keyword">board[i][j] </span>+= <span class="keyword">board[i][j]&lt;&lt;1;</span></div><div class="line">                    else if(<span class="built_in">count</span> == <span class="number">3</span>)</div><div class="line">                        <span class="keyword">board[i][j] </span>+= <span class="number">2</span><span class="comment">;</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            for(int i = <span class="number">0</span><span class="comment">; i &lt; m ; ++i)</span></div><div class="line">                for(int <span class="keyword">j </span>= <span class="number">0</span><span class="comment">; j &lt; n; ++j)</span></div><div class="line">                    <span class="keyword">board[i][j] </span>&gt;&gt;= <span class="number">1</span><span class="comment">;</span></div><div class="line">        &#125;</div><div class="line">&#125;<span class="comment">;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文包含如下题目：&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/set-matrix-zeroes/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;73. Set Matrix Zeroes&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/game-of-life/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;289. Game of Life&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://haoyuanliu.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://haoyuanliu.github.io/tags/LeetCode/"/>
    
      <category term="Array" scheme="http://haoyuanliu.github.io/tags/Array/"/>
    
  </entry>
  
</feed>
